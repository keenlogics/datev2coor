// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "coor.hxx"

// bool_type
// 

bool_type::
bool_type (::xml_schema::int_ v): ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, wchar_t, ::xml_schema::simple_type > (v)
{
}

bool_type::
bool_type (const bool_type& v,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, wchar_t, ::xml_schema::simple_type > (v, f, c)
{
}


// collect_type
// 

collect_type::
collect_type (::xml_schema::int_ v): ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, wchar_t, ::xml_schema::simple_type > (v)
{
}

collect_type::
collect_type (const collect_type& v,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, wchar_t, ::xml_schema::simple_type > (v, f, c)
{
}


// text256_type
// 


// text128_type
// 


// text64_type
// 


// text48_type
// 


// text32_type
// 


// text16_type
// 


// text12_type
// 


// text8_type
// 


// text4_type
// 


// invoicetype_type
// 


// scope_type
// 

scope_type::
scope_type (value v)
: ::xml_schema::string (_xsd_scope_type_literals_[v])
{
}

scope_type::
scope_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

scope_type::
scope_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

scope_type::
scope_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

scope_type::
scope_type (const scope_type& v,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

scope_type& scope_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_scope_type_literals_[v]);

  return *this;
}


// valuedata_type
// 

valuedata_type::
valuedata_type (value v)
: ::xml_schema::string (_xsd_valuedata_type_literals_[v])
{
}

valuedata_type::
valuedata_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

valuedata_type::
valuedata_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

valuedata_type::
valuedata_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

valuedata_type::
valuedata_type (const valuedata_type& v,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

valuedata_type& valuedata_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_valuedata_type_literals_[v]);

  return *this;
}


// normdata_type
// 

normdata_type::
normdata_type (value v)
: ::xml_schema::string (_xsd_normdata_type_literals_[v])
{
}

normdata_type::
normdata_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

normdata_type::
normdata_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

normdata_type::
normdata_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

normdata_type::
normdata_type (const normdata_type& v,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

normdata_type& normdata_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_normdata_type_literals_[v]);

  return *this;
}


// externalkey_type
// 


// decimal_type
// 


// decimal8_type
// 


// percent_type
// 


// documentviewertype_type
// 

documentviewertype_type::
documentviewertype_type (value v)
: ::xml_schema::string (_xsd_documentviewertype_type_literals_[v])
{
}

documentviewertype_type::
documentviewertype_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

documentviewertype_type::
documentviewertype_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

documentviewertype_type::
documentviewertype_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

documentviewertype_type::
documentviewertype_type (const documentviewertype_type& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

documentviewertype_type& documentviewertype_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_documentviewertype_type_literals_[v]);

  return *this;
}


// matchfieldrange_type
// 

matchfieldrange_type::
matchfieldrange_type (value v)
: ::xml_schema::string (_xsd_matchfieldrange_type_literals_[v])
{
}

matchfieldrange_type::
matchfieldrange_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

matchfieldrange_type::
matchfieldrange_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

matchfieldrange_type::
matchfieldrange_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

matchfieldrange_type::
matchfieldrange_type (const matchfieldrange_type& v,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

matchfieldrange_type& matchfieldrange_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_matchfieldrange_type_literals_[v]);

  return *this;
}


// matchfielduser_type
// 

matchfielduser_type::
matchfielduser_type (value v)
: ::xml_schema::string (_xsd_matchfielduser_type_literals_[v])
{
}

matchfielduser_type::
matchfielduser_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

matchfielduser_type::
matchfielduser_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

matchfielduser_type::
matchfielduser_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

matchfielduser_type::
matchfielduser_type (const matchfielduser_type& v,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

matchfielduser_type& matchfielduser_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_matchfielduser_type_literals_[v]);

  return *this;
}


// matchfieldresponse_type
// 

matchfieldresponse_type::
matchfieldresponse_type (value v)
: ::xml_schema::string (_xsd_matchfieldresponse_type_literals_[v])
{
}

matchfieldresponse_type::
matchfieldresponse_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

matchfieldresponse_type::
matchfieldresponse_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

matchfieldresponse_type::
matchfieldresponse_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

matchfieldresponse_type::
matchfieldresponse_type (const matchfieldresponse_type& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

matchfieldresponse_type& matchfieldresponse_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_matchfieldresponse_type_literals_[v]);

  return *this;
}


// matchfieldcity_type
// 

matchfieldcity_type::
matchfieldcity_type (value v)
: ::xml_schema::string (_xsd_matchfieldcity_type_literals_[v])
{
}

matchfieldcity_type::
matchfieldcity_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

matchfieldcity_type::
matchfieldcity_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

matchfieldcity_type::
matchfieldcity_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

matchfieldcity_type::
matchfieldcity_type (const matchfieldcity_type& v,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

matchfieldcity_type& matchfieldcity_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_matchfieldcity_type_literals_[v]);

  return *this;
}


// matchfielddocument_type
// 

matchfielddocument_type::
matchfielddocument_type (value v)
: ::xml_schema::string (_xsd_matchfielddocument_type_literals_[v])
{
}

matchfielddocument_type::
matchfielddocument_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

matchfielddocument_type::
matchfielddocument_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

matchfielddocument_type::
matchfielddocument_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

matchfielddocument_type::
matchfielddocument_type (const matchfielddocument_type& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

matchfielddocument_type& matchfielddocument_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_matchfielddocument_type_literals_[v]);

  return *this;
}


// matchfieldkeyvalue_type
// 

matchfieldkeyvalue_type::
matchfieldkeyvalue_type (value v)
: ::xml_schema::string (_xsd_matchfieldkeyvalue_type_literals_[v])
{
}

matchfieldkeyvalue_type::
matchfieldkeyvalue_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

matchfieldkeyvalue_type::
matchfieldkeyvalue_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

matchfieldkeyvalue_type::
matchfieldkeyvalue_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

matchfieldkeyvalue_type::
matchfieldkeyvalue_type (const matchfieldkeyvalue_type& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

matchfieldkeyvalue_type& matchfieldkeyvalue_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_matchfieldkeyvalue_type_literals_[v]);

  return *this;
}


// matchfieldparish_type
// 

matchfieldparish_type::
matchfieldparish_type (value v)
: ::xml_schema::string (_xsd_matchfieldparish_type_literals_[v])
{
}

matchfieldparish_type::
matchfieldparish_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

matchfieldparish_type::
matchfieldparish_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

matchfieldparish_type::
matchfieldparish_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

matchfieldparish_type::
matchfieldparish_type (const matchfieldparish_type& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

matchfieldparish_type& matchfieldparish_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_matchfieldparish_type_literals_[v]);

  return *this;
}


// matchfieldcontact_type
// 

matchfieldcontact_type::
matchfieldcontact_type (value v)
: ::xml_schema::string (_xsd_matchfieldcontact_type_literals_[v])
{
}

matchfieldcontact_type::
matchfieldcontact_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

matchfieldcontact_type::
matchfieldcontact_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

matchfieldcontact_type::
matchfieldcontact_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

matchfieldcontact_type::
matchfieldcontact_type (const matchfieldcontact_type& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

matchfieldcontact_type& matchfieldcontact_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_matchfieldcontact_type_literals_[v]);

  return *this;
}


// matchfieldcounterpart_type
// 

matchfieldcounterpart_type::
matchfieldcounterpart_type (value v)
: ::xml_schema::string (_xsd_matchfieldcounterpart_type_literals_[v])
{
}

matchfieldcounterpart_type::
matchfieldcounterpart_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

matchfieldcounterpart_type::
matchfieldcounterpart_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

matchfieldcounterpart_type::
matchfieldcounterpart_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

matchfieldcounterpart_type::
matchfieldcounterpart_type (const matchfieldcounterpart_type& v,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

matchfieldcounterpart_type& matchfieldcounterpart_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_matchfieldcounterpart_type_literals_[v]);

  return *this;
}


// matchfieldproject_type
// 

matchfieldproject_type::
matchfieldproject_type (value v)
: ::xml_schema::string (_xsd_matchfieldproject_type_literals_[v])
{
}

matchfieldproject_type::
matchfieldproject_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

matchfieldproject_type::
matchfieldproject_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

matchfieldproject_type::
matchfieldproject_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

matchfieldproject_type::
matchfieldproject_type (const matchfieldproject_type& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

matchfieldproject_type& matchfieldproject_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_matchfieldproject_type_literals_[v]);

  return *this;
}


// matchfieldpart_type
// 

matchfieldpart_type::
matchfieldpart_type (value v)
: ::xml_schema::string (_xsd_matchfieldpart_type_literals_[v])
{
}

matchfieldpart_type::
matchfieldpart_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

matchfieldpart_type::
matchfieldpart_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

matchfieldpart_type::
matchfieldpart_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

matchfieldpart_type::
matchfieldpart_type (const matchfieldpart_type& v,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

matchfieldpart_type& matchfieldpart_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_matchfieldpart_type_literals_[v]);

  return *this;
}


// matchfieldplacing_type
// 

matchfieldplacing_type::
matchfieldplacing_type (value v)
: ::xml_schema::string (_xsd_matchfieldplacing_type_literals_[v])
{
}

matchfieldplacing_type::
matchfieldplacing_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

matchfieldplacing_type::
matchfieldplacing_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

matchfieldplacing_type::
matchfieldplacing_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

matchfieldplacing_type::
matchfieldplacing_type (const matchfieldplacing_type& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

matchfieldplacing_type& matchfieldplacing_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_matchfieldplacing_type_literals_[v]);

  return *this;
}


// matchfieldrevision_type
// 

matchfieldrevision_type::
matchfieldrevision_type (value v)
: ::xml_schema::string (_xsd_matchfieldrevision_type_literals_[v])
{
}

matchfieldrevision_type::
matchfieldrevision_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

matchfieldrevision_type::
matchfieldrevision_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

matchfieldrevision_type::
matchfieldrevision_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

matchfieldrevision_type::
matchfieldrevision_type (const matchfieldrevision_type& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

matchfieldrevision_type& matchfieldrevision_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_matchfieldrevision_type_literals_[v]);

  return *this;
}


// matchfieldorder_type
// 

matchfieldorder_type::
matchfieldorder_type (value v)
: ::xml_schema::string (_xsd_matchfieldorder_type_literals_[v])
{
}

matchfieldorder_type::
matchfieldorder_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

matchfieldorder_type::
matchfieldorder_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

matchfieldorder_type::
matchfieldorder_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

matchfieldorder_type::
matchfieldorder_type (const matchfieldorder_type& v,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

matchfieldorder_type& matchfieldorder_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_matchfieldorder_type_literals_[v]);

  return *this;
}


// matchfieldaddition_type
// 

matchfieldaddition_type::
matchfieldaddition_type (value v)
: ::xml_schema::string (_xsd_matchfieldaddition_type_literals_[v])
{
}

matchfieldaddition_type::
matchfieldaddition_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

matchfieldaddition_type::
matchfieldaddition_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

matchfieldaddition_type::
matchfieldaddition_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

matchfieldaddition_type::
matchfieldaddition_type (const matchfieldaddition_type& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

matchfieldaddition_type& matchfieldaddition_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_matchfieldaddition_type_literals_[v]);

  return *this;
}


// matchfieldevident_type
// 

matchfieldevident_type::
matchfieldevident_type (value v)
: ::xml_schema::string (_xsd_matchfieldevident_type_literals_[v])
{
}

matchfieldevident_type::
matchfieldevident_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

matchfieldevident_type::
matchfieldevident_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

matchfieldevident_type::
matchfieldevident_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

matchfieldevident_type::
matchfieldevident_type (const matchfieldevident_type& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

matchfieldevident_type& matchfieldevident_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_matchfieldevident_type_literals_[v]);

  return *this;
}


// matchfieldbackup_type
// 

matchfieldbackup_type::
matchfieldbackup_type (value v)
: ::xml_schema::string (_xsd_matchfieldbackup_type_literals_[v])
{
}

matchfieldbackup_type::
matchfieldbackup_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

matchfieldbackup_type::
matchfieldbackup_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

matchfieldbackup_type::
matchfieldbackup_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

matchfieldbackup_type::
matchfieldbackup_type (const matchfieldbackup_type& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

matchfieldbackup_type& matchfieldbackup_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_matchfieldbackup_type_literals_[v]);

  return *this;
}


// matchfieldavaorder_type
// 

matchfieldavaorder_type::
matchfieldavaorder_type (value v)
: ::xml_schema::string (_xsd_matchfieldavaorder_type_literals_[v])
{
}

matchfieldavaorder_type::
matchfieldavaorder_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

matchfieldavaorder_type::
matchfieldavaorder_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

matchfieldavaorder_type::
matchfieldavaorder_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

matchfieldavaorder_type::
matchfieldavaorder_type (const matchfieldavaorder_type& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

matchfieldavaorder_type& matchfieldavaorder_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_matchfieldavaorder_type_literals_[v]);

  return *this;
}


// matchfieldavaunit_type
// 

matchfieldavaunit_type::
matchfieldavaunit_type (value v)
: ::xml_schema::string (_xsd_matchfieldavaunit_type_literals_[v])
{
}

matchfieldavaunit_type::
matchfieldavaunit_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

matchfieldavaunit_type::
matchfieldavaunit_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

matchfieldavaunit_type::
matchfieldavaunit_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

matchfieldavaunit_type::
matchfieldavaunit_type (const matchfieldavaunit_type& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

matchfieldavaunit_type& matchfieldavaunit_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_matchfieldavaunit_type_literals_[v]);

  return *this;
}


// matchfieldinvoice_type
// 

matchfieldinvoice_type::
matchfieldinvoice_type (value v)
: ::xml_schema::string (_xsd_matchfieldinvoice_type_literals_[v])
{
}

matchfieldinvoice_type::
matchfieldinvoice_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

matchfieldinvoice_type::
matchfieldinvoice_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

matchfieldinvoice_type::
matchfieldinvoice_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

matchfieldinvoice_type::
matchfieldinvoice_type (const matchfieldinvoice_type& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

matchfieldinvoice_type& matchfieldinvoice_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_matchfieldinvoice_type_literals_[v]);

  return *this;
}


// matchfieldpayment_type
// 

matchfieldpayment_type::
matchfieldpayment_type (value v)
: ::xml_schema::string (_xsd_matchfieldpayment_type_literals_[v])
{
}

matchfieldpayment_type::
matchfieldpayment_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

matchfieldpayment_type::
matchfieldpayment_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

matchfieldpayment_type::
matchfieldpayment_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

matchfieldpayment_type::
matchfieldpayment_type (const matchfieldpayment_type& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

matchfieldpayment_type& matchfieldpayment_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_matchfieldpayment_type_literals_[v]);

  return *this;
}


// matchfieldbank_type
// 

matchfieldbank_type::
matchfieldbank_type (value v)
: ::xml_schema::string (_xsd_matchfieldbank_type_literals_[v])
{
}

matchfieldbank_type::
matchfieldbank_type (const wchar_t* v)
: ::xml_schema::string (v)
{
}

matchfieldbank_type::
matchfieldbank_type (const ::std::wstring& v)
: ::xml_schema::string (v)
{
}

matchfieldbank_type::
matchfieldbank_type (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

matchfieldbank_type::
matchfieldbank_type (const matchfieldbank_type& v,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

matchfieldbank_type& matchfieldbank_type::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_matchfieldbank_type_literals_[v]);

  return *this;
}


// coordata
// 

const coordata::bkm_response_sequence& coordata::
bkm_response () const
{
  return this->bkm_response_;
}

coordata::bkm_response_sequence& coordata::
bkm_response ()
{
  return this->bkm_response_;
}

void coordata::
bkm_response (const bkm_response_sequence& s)
{
  this->bkm_response_ = s;
}

const coordata::bkm_user_sequence& coordata::
bkm_user () const
{
  return this->bkm_user_;
}

coordata::bkm_user_sequence& coordata::
bkm_user ()
{
  return this->bkm_user_;
}

void coordata::
bkm_user (const bkm_user_sequence& s)
{
  this->bkm_user_ = s;
}

const coordata::bkm_range_optional& coordata::
bkm_range () const
{
  return this->bkm_range_;
}

coordata::bkm_range_optional& coordata::
bkm_range ()
{
  return this->bkm_range_;
}

void coordata::
bkm_range (const bkm_range_type& x)
{
  this->bkm_range_.set (x);
}

void coordata::
bkm_range (const bkm_range_optional& x)
{
  this->bkm_range_ = x;
}

void coordata::
bkm_range (::std::unique_ptr< bkm_range_type > x)
{
  this->bkm_range_.set (std::move (x));
}

const coordata::bkm_bank_sequence& coordata::
bkm_bank () const
{
  return this->bkm_bank_;
}

coordata::bkm_bank_sequence& coordata::
bkm_bank ()
{
  return this->bkm_bank_;
}

void coordata::
bkm_bank (const bkm_bank_sequence& s)
{
  this->bkm_bank_ = s;
}

const coordata::bkm_parish_optional& coordata::
bkm_parish () const
{
  return this->bkm_parish_;
}

coordata::bkm_parish_optional& coordata::
bkm_parish ()
{
  return this->bkm_parish_;
}

void coordata::
bkm_parish (const bkm_parish_type& x)
{
  this->bkm_parish_.set (x);
}

void coordata::
bkm_parish (const bkm_parish_optional& x)
{
  this->bkm_parish_ = x;
}

void coordata::
bkm_parish (::std::unique_ptr< bkm_parish_type > x)
{
  this->bkm_parish_.set (std::move (x));
}

const coordata::bkm_city_sequence& coordata::
bkm_city () const
{
  return this->bkm_city_;
}

coordata::bkm_city_sequence& coordata::
bkm_city ()
{
  return this->bkm_city_;
}

void coordata::
bkm_city (const bkm_city_sequence& s)
{
  this->bkm_city_ = s;
}

const coordata::bkm_contact_sequence& coordata::
bkm_contact () const
{
  return this->bkm_contact_;
}

coordata::bkm_contact_sequence& coordata::
bkm_contact ()
{
  return this->bkm_contact_;
}

void coordata::
bkm_contact (const bkm_contact_sequence& s)
{
  this->bkm_contact_ = s;
}

const coordata::bkm_counterpart_optional& coordata::
bkm_counterpart () const
{
  return this->bkm_counterpart_;
}

coordata::bkm_counterpart_optional& coordata::
bkm_counterpart ()
{
  return this->bkm_counterpart_;
}

void coordata::
bkm_counterpart (const bkm_counterpart_type& x)
{
  this->bkm_counterpart_.set (x);
}

void coordata::
bkm_counterpart (const bkm_counterpart_optional& x)
{
  this->bkm_counterpart_ = x;
}

void coordata::
bkm_counterpart (::std::unique_ptr< bkm_counterpart_type > x)
{
  this->bkm_counterpart_.set (std::move (x));
}

const coordata::bkm_part_optional& coordata::
bkm_part () const
{
  return this->bkm_part_;
}

coordata::bkm_part_optional& coordata::
bkm_part ()
{
  return this->bkm_part_;
}

void coordata::
bkm_part (const bkm_part_type& x)
{
  this->bkm_part_.set (x);
}

void coordata::
bkm_part (const bkm_part_optional& x)
{
  this->bkm_part_ = x;
}

void coordata::
bkm_part (::std::unique_ptr< bkm_part_type > x)
{
  this->bkm_part_.set (std::move (x));
}

const coordata::bkm_placing_optional& coordata::
bkm_placing () const
{
  return this->bkm_placing_;
}

coordata::bkm_placing_optional& coordata::
bkm_placing ()
{
  return this->bkm_placing_;
}

void coordata::
bkm_placing (const bkm_placing_type& x)
{
  this->bkm_placing_.set (x);
}

void coordata::
bkm_placing (const bkm_placing_optional& x)
{
  this->bkm_placing_ = x;
}

void coordata::
bkm_placing (::std::unique_ptr< bkm_placing_type > x)
{
  this->bkm_placing_.set (std::move (x));
}

const coordata::bkm_invoice_sequence& coordata::
bkm_invoice () const
{
  return this->bkm_invoice_;
}

coordata::bkm_invoice_sequence& coordata::
bkm_invoice ()
{
  return this->bkm_invoice_;
}

void coordata::
bkm_invoice (const bkm_invoice_sequence& s)
{
  this->bkm_invoice_ = s;
}

const coordata::bkm_payment_optional& coordata::
bkm_payment () const
{
  return this->bkm_payment_;
}

coordata::bkm_payment_optional& coordata::
bkm_payment ()
{
  return this->bkm_payment_;
}

void coordata::
bkm_payment (const bkm_payment_type& x)
{
  this->bkm_payment_.set (x);
}

void coordata::
bkm_payment (const bkm_payment_optional& x)
{
  this->bkm_payment_ = x;
}

void coordata::
bkm_payment (::std::unique_ptr< bkm_payment_type > x)
{
  this->bkm_payment_.set (std::move (x));
}

const coordata::ava_unit_optional& coordata::
ava_unit () const
{
  return this->ava_unit_;
}

coordata::ava_unit_optional& coordata::
ava_unit ()
{
  return this->ava_unit_;
}

void coordata::
ava_unit (const ava_unit_type& x)
{
  this->ava_unit_.set (x);
}

void coordata::
ava_unit (const ava_unit_optional& x)
{
  this->ava_unit_ = x;
}

void coordata::
ava_unit (::std::unique_ptr< ava_unit_type > x)
{
  this->ava_unit_.set (std::move (x));
}

const coordata::bkm_project_sequence& coordata::
bkm_project () const
{
  return this->bkm_project_;
}

coordata::bkm_project_sequence& coordata::
bkm_project ()
{
  return this->bkm_project_;
}

void coordata::
bkm_project (const bkm_project_sequence& s)
{
  this->bkm_project_ = s;
}

const coordata::name_optional& coordata::
name () const
{
  return this->name_;
}

coordata::name_optional& coordata::
name ()
{
  return this->name_;
}

void coordata::
name (const name_type& x)
{
  this->name_.set (x);
}

void coordata::
name (const name_optional& x)
{
  this->name_ = x;
}

void coordata::
name (::std::unique_ptr< name_type > x)
{
  this->name_.set (std::move (x));
}

const coordata::mandant_optional& coordata::
mandant () const
{
  return this->mandant_;
}

coordata::mandant_optional& coordata::
mandant ()
{
  return this->mandant_;
}

void coordata::
mandant (const mandant_type& x)
{
  this->mandant_.set (x);
}

void coordata::
mandant (const mandant_optional& x)
{
  this->mandant_ = x;
}

void coordata::
mandant (::std::unique_ptr< mandant_type > x)
{
  this->mandant_.set (std::move (x));
}

const coordata::exchangeid_optional& coordata::
exchangeid () const
{
  return this->exchangeid_;
}

coordata::exchangeid_optional& coordata::
exchangeid ()
{
  return this->exchangeid_;
}

void coordata::
exchangeid (const exchangeid_type& x)
{
  this->exchangeid_.set (x);
}

void coordata::
exchangeid (const exchangeid_optional& x)
{
  this->exchangeid_ = x;
}

const coordata::external_type& coordata::
external () const
{
  return this->external_.get ();
}

coordata::external_type& coordata::
external ()
{
  return this->external_.get ();
}

void coordata::
external (const external_type& x)
{
  this->external_.set (x);
}

void coordata::
external (::std::unique_ptr< external_type > x)
{
  this->external_.set (std::move (x));
}

const coordata::external_type& coordata::
external_default_value ()
{
  return external_default_value_;
}

const coordata::version_type& coordata::
version () const
{
  return this->version_.get ();
}

coordata::version_type& coordata::
version ()
{
  return this->version_.get ();
}

void coordata::
version (const version_type& x)
{
  this->version_.set (x);
}

void coordata::
version (::std::unique_ptr< version_type > x)
{
  this->version_.set (std::move (x));
}

const coordata::version_type& coordata::
version_default_value ()
{
  return version_default_value_;
}

const coordata::response_optional& coordata::
response () const
{
  return this->response_;
}

coordata::response_optional& coordata::
response ()
{
  return this->response_;
}

void coordata::
response (const response_type& x)
{
  this->response_.set (x);
}

void coordata::
response (const response_optional& x)
{
  this->response_ = x;
}

void coordata::
response (::std::unique_ptr< response_type > x)
{
  this->response_.set (std::move (x));
}

const coordata::winuser_optional& coordata::
winuser () const
{
  return this->winuser_;
}

coordata::winuser_optional& coordata::
winuser ()
{
  return this->winuser_;
}

void coordata::
winuser (const winuser_type& x)
{
  this->winuser_.set (x);
}

void coordata::
winuser (const winuser_optional& x)
{
  this->winuser_ = x;
}

void coordata::
winuser (::std::unique_ptr< winuser_type > x)
{
  this->winuser_.set (std::move (x));
}

const coordata::winuserkey_optional& coordata::
winuserkey () const
{
  return this->winuserkey_;
}

coordata::winuserkey_optional& coordata::
winuserkey ()
{
  return this->winuserkey_;
}

void coordata::
winuserkey (const winuserkey_type& x)
{
  this->winuserkey_.set (x);
}

void coordata::
winuserkey (const winuserkey_optional& x)
{
  this->winuserkey_ = x;
}

void coordata::
winuserkey (::std::unique_ptr< winuserkey_type > x)
{
  this->winuserkey_.set (std::move (x));
}

const coordata::infodate_optional& coordata::
infodate () const
{
  return this->infodate_;
}

coordata::infodate_optional& coordata::
infodate ()
{
  return this->infodate_;
}

void coordata::
infodate (const infodate_type& x)
{
  this->infodate_.set (x);
}

void coordata::
infodate (const infodate_optional& x)
{
  this->infodate_ = x;
}

void coordata::
infodate (::std::unique_ptr< infodate_type > x)
{
  this->infodate_.set (std::move (x));
}

const coordata::info_optional& coordata::
info () const
{
  return this->info_;
}

coordata::info_optional& coordata::
info ()
{
  return this->info_;
}

void coordata::
info (const info_type& x)
{
  this->info_.set (x);
}

void coordata::
info (const info_optional& x)
{
  this->info_ = x;
}

void coordata::
info (::std::unique_ptr< info_type > x)
{
  this->info_.set (std::move (x));
}

const coordata::infouser_optional& coordata::
infouser () const
{
  return this->infouser_;
}

coordata::infouser_optional& coordata::
infouser ()
{
  return this->infouser_;
}

void coordata::
infouser (const infouser_type& x)
{
  this->infouser_.set (x);
}

void coordata::
infouser (const infouser_optional& x)
{
  this->infouser_ = x;
}

void coordata::
infouser (::std::unique_ptr< infouser_type > x)
{
  this->infouser_.set (std::move (x));
}


// bkm_response
// 

const bkm_response::id_optional& bkm_response::
id () const
{
  return this->id_;
}

bkm_response::id_optional& bkm_response::
id ()
{
  return this->id_;
}

void bkm_response::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_response::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_response::status_type& bkm_response::
status () const
{
  return this->status_.get ();
}

bkm_response::status_type& bkm_response::
status ()
{
  return this->status_.get ();
}

void bkm_response::
status (const status_type& x)
{
  this->status_.set (x);
}

void bkm_response::
status (::std::unique_ptr< status_type > x)
{
  this->status_.set (std::move (x));
}

const bkm_response::externalkey_type& bkm_response::
externalkey () const
{
  return this->externalkey_.get ();
}

bkm_response::externalkey_type& bkm_response::
externalkey ()
{
  return this->externalkey_.get ();
}

void bkm_response::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void bkm_response::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const bkm_response::matchfield_optional& bkm_response::
matchfield () const
{
  return this->matchfield_;
}

bkm_response::matchfield_optional& bkm_response::
matchfield ()
{
  return this->matchfield_;
}

void bkm_response::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void bkm_response::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void bkm_response::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const bkm_response::scope_optional& bkm_response::
scope () const
{
  return this->scope_;
}

bkm_response::scope_optional& bkm_response::
scope ()
{
  return this->scope_;
}

void bkm_response::
scope (const scope_type& x)
{
  this->scope_.set (x);
}

void bkm_response::
scope (const scope_optional& x)
{
  this->scope_ = x;
}

void bkm_response::
scope (::std::unique_ptr< scope_type > x)
{
  this->scope_.set (std::move (x));
}

const bkm_response::name_optional& bkm_response::
name () const
{
  return this->name_;
}

bkm_response::name_optional& bkm_response::
name ()
{
  return this->name_;
}

void bkm_response::
name (const name_type& x)
{
  this->name_.set (x);
}

void bkm_response::
name (const name_optional& x)
{
  this->name_ = x;
}

void bkm_response::
name (::std::unique_ptr< name_type > x)
{
  this->name_.set (std::move (x));
}

const bkm_response::code_optional& bkm_response::
code () const
{
  return this->code_;
}

bkm_response::code_optional& bkm_response::
code ()
{
  return this->code_;
}

void bkm_response::
code (const code_type& x)
{
  this->code_.set (x);
}

void bkm_response::
code (const code_optional& x)
{
  this->code_ = x;
}

void bkm_response::
code (::std::unique_ptr< code_type > x)
{
  this->code_.set (std::move (x));
}

const bkm_response::detail_optional& bkm_response::
detail () const
{
  return this->detail_;
}

bkm_response::detail_optional& bkm_response::
detail ()
{
  return this->detail_;
}

void bkm_response::
detail (const detail_type& x)
{
  this->detail_.set (x);
}

void bkm_response::
detail (const detail_optional& x)
{
  this->detail_ = x;
}

void bkm_response::
detail (::std::unique_ptr< detail_type > x)
{
  this->detail_.set (std::move (x));
}

const bkm_response::message_optional& bkm_response::
message () const
{
  return this->message_;
}

bkm_response::message_optional& bkm_response::
message ()
{
  return this->message_;
}

void bkm_response::
message (const message_type& x)
{
  this->message_.set (x);
}

void bkm_response::
message (const message_optional& x)
{
  this->message_ = x;
}

void bkm_response::
message (::std::unique_ptr< message_type > x)
{
  this->message_.set (std::move (x));
}

const bkm_response::extern3_optional& bkm_response::
extern3 () const
{
  return this->extern3_;
}

bkm_response::extern3_optional& bkm_response::
extern3 ()
{
  return this->extern3_;
}

void bkm_response::
extern3 (const extern3_type& x)
{
  this->extern3_.set (x);
}

void bkm_response::
extern3 (const extern3_optional& x)
{
  this->extern3_ = x;
}

void bkm_response::
extern3 (::std::unique_ptr< extern3_type > x)
{
  this->extern3_.set (std::move (x));
}


// bkm_user
// 

const bkm_user::id_optional& bkm_user::
id () const
{
  return this->id_;
}

bkm_user::id_optional& bkm_user::
id ()
{
  return this->id_;
}

void bkm_user::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_user::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_user::code_optional& bkm_user::
code () const
{
  return this->code_;
}

bkm_user::code_optional& bkm_user::
code ()
{
  return this->code_;
}

void bkm_user::
code (const code_type& x)
{
  this->code_.set (x);
}

void bkm_user::
code (const code_optional& x)
{
  this->code_ = x;
}

void bkm_user::
code (::std::unique_ptr< code_type > x)
{
  this->code_.set (std::move (x));
}

const bkm_user::login_optional& bkm_user::
login () const
{
  return this->login_;
}

bkm_user::login_optional& bkm_user::
login ()
{
  return this->login_;
}

void bkm_user::
login (const login_type& x)
{
  this->login_.set (x);
}

void bkm_user::
login (const login_optional& x)
{
  this->login_ = x;
}

void bkm_user::
login (::std::unique_ptr< login_type > x)
{
  this->login_.set (std::move (x));
}

const bkm_user::firstname_optional& bkm_user::
firstname () const
{
  return this->firstname_;
}

bkm_user::firstname_optional& bkm_user::
firstname ()
{
  return this->firstname_;
}

void bkm_user::
firstname (const firstname_type& x)
{
  this->firstname_.set (x);
}

void bkm_user::
firstname (const firstname_optional& x)
{
  this->firstname_ = x;
}

void bkm_user::
firstname (::std::unique_ptr< firstname_type > x)
{
  this->firstname_.set (std::move (x));
}

const bkm_user::lastname_optional& bkm_user::
lastname () const
{
  return this->lastname_;
}

bkm_user::lastname_optional& bkm_user::
lastname ()
{
  return this->lastname_;
}

void bkm_user::
lastname (const lastname_type& x)
{
  this->lastname_.set (x);
}

void bkm_user::
lastname (const lastname_optional& x)
{
  this->lastname_ = x;
}

void bkm_user::
lastname (::std::unique_ptr< lastname_type > x)
{
  this->lastname_.set (std::move (x));
}

const bkm_user::externalkey_type& bkm_user::
externalkey () const
{
  return this->externalkey_.get ();
}

bkm_user::externalkey_type& bkm_user::
externalkey ()
{
  return this->externalkey_.get ();
}

void bkm_user::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void bkm_user::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const bkm_user::matchfield_optional& bkm_user::
matchfield () const
{
  return this->matchfield_;
}

bkm_user::matchfield_optional& bkm_user::
matchfield ()
{
  return this->matchfield_;
}

void bkm_user::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void bkm_user::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void bkm_user::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const bkm_user::controlcode_optional& bkm_user::
controlcode () const
{
  return this->controlcode_;
}

bkm_user::controlcode_optional& bkm_user::
controlcode ()
{
  return this->controlcode_;
}

void bkm_user::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void bkm_user::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void bkm_user::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const bkm_user::statuscode_optional& bkm_user::
statuscode () const
{
  return this->statuscode_;
}

bkm_user::statuscode_optional& bkm_user::
statuscode ()
{
  return this->statuscode_;
}

void bkm_user::
statuscode (const statuscode_type& x)
{
  this->statuscode_.set (x);
}

void bkm_user::
statuscode (const statuscode_optional& x)
{
  this->statuscode_ = x;
}

void bkm_user::
statuscode (::std::unique_ptr< statuscode_type > x)
{
  this->statuscode_.set (std::move (x));
}

const bkm_user::extern1_optional& bkm_user::
extern1 () const
{
  return this->extern1_;
}

bkm_user::extern1_optional& bkm_user::
extern1 ()
{
  return this->extern1_;
}

void bkm_user::
extern1 (const extern1_type& x)
{
  this->extern1_.set (x);
}

void bkm_user::
extern1 (const extern1_optional& x)
{
  this->extern1_ = x;
}

void bkm_user::
extern1 (::std::unique_ptr< extern1_type > x)
{
  this->extern1_.set (std::move (x));
}

const bkm_user::extern2_optional& bkm_user::
extern2 () const
{
  return this->extern2_;
}

bkm_user::extern2_optional& bkm_user::
extern2 ()
{
  return this->extern2_;
}

void bkm_user::
extern2 (const extern2_type& x)
{
  this->extern2_.set (x);
}

void bkm_user::
extern2 (const extern2_optional& x)
{
  this->extern2_ = x;
}

void bkm_user::
extern2 (::std::unique_ptr< extern2_type > x)
{
  this->extern2_.set (std::move (x));
}

const bkm_user::extern3_optional& bkm_user::
extern3 () const
{
  return this->extern3_;
}

bkm_user::extern3_optional& bkm_user::
extern3 ()
{
  return this->extern3_;
}

void bkm_user::
extern3 (const extern3_type& x)
{
  this->extern3_.set (x);
}

void bkm_user::
extern3 (const extern3_optional& x)
{
  this->extern3_ = x;
}

void bkm_user::
extern3 (::std::unique_ptr< extern3_type > x)
{
  this->extern3_.set (std::move (x));
}

const bkm_user::phone_optional& bkm_user::
phone () const
{
  return this->phone_;
}

bkm_user::phone_optional& bkm_user::
phone ()
{
  return this->phone_;
}

void bkm_user::
phone (const phone_type& x)
{
  this->phone_.set (x);
}

void bkm_user::
phone (const phone_optional& x)
{
  this->phone_ = x;
}

void bkm_user::
phone (::std::unique_ptr< phone_type > x)
{
  this->phone_.set (std::move (x));
}

const bkm_user::direct_optional& bkm_user::
direct () const
{
  return this->direct_;
}

bkm_user::direct_optional& bkm_user::
direct ()
{
  return this->direct_;
}

void bkm_user::
direct (const direct_type& x)
{
  this->direct_.set (x);
}

void bkm_user::
direct (const direct_optional& x)
{
  this->direct_ = x;
}

void bkm_user::
direct (::std::unique_ptr< direct_type > x)
{
  this->direct_.set (std::move (x));
}

const bkm_user::fax_optional& bkm_user::
fax () const
{
  return this->fax_;
}

bkm_user::fax_optional& bkm_user::
fax ()
{
  return this->fax_;
}

void bkm_user::
fax (const fax_type& x)
{
  this->fax_.set (x);
}

void bkm_user::
fax (const fax_optional& x)
{
  this->fax_ = x;
}

void bkm_user::
fax (::std::unique_ptr< fax_type > x)
{
  this->fax_.set (std::move (x));
}

const bkm_user::mobile_optional& bkm_user::
mobile () const
{
  return this->mobile_;
}

bkm_user::mobile_optional& bkm_user::
mobile ()
{
  return this->mobile_;
}

void bkm_user::
mobile (const mobile_type& x)
{
  this->mobile_.set (x);
}

void bkm_user::
mobile (const mobile_optional& x)
{
  this->mobile_ = x;
}

void bkm_user::
mobile (::std::unique_ptr< mobile_type > x)
{
  this->mobile_.set (std::move (x));
}

const bkm_user::email_optional& bkm_user::
email () const
{
  return this->email_;
}

bkm_user::email_optional& bkm_user::
email ()
{
  return this->email_;
}

void bkm_user::
email (const email_type& x)
{
  this->email_.set (x);
}

void bkm_user::
email (const email_optional& x)
{
  this->email_ = x;
}

void bkm_user::
email (::std::unique_ptr< email_type > x)
{
  this->email_.set (std::move (x));
}

const bkm_user::packages_optional& bkm_user::
packages () const
{
  return this->packages_;
}

bkm_user::packages_optional& bkm_user::
packages ()
{
  return this->packages_;
}

void bkm_user::
packages (const packages_type& x)
{
  this->packages_.set (x);
}

void bkm_user::
packages (const packages_optional& x)
{
  this->packages_ = x;
}

void bkm_user::
packages (::std::unique_ptr< packages_type > x)
{
  this->packages_.set (std::move (x));
}

const bkm_user::workplace_optional& bkm_user::
workplace () const
{
  return this->workplace_;
}

bkm_user::workplace_optional& bkm_user::
workplace ()
{
  return this->workplace_;
}

void bkm_user::
workplace (const workplace_type& x)
{
  this->workplace_.set (x);
}

void bkm_user::
workplace (const workplace_optional& x)
{
  this->workplace_ = x;
}

void bkm_user::
workplace (::std::unique_ptr< workplace_type > x)
{
  this->workplace_.set (std::move (x));
}

const bkm_user::workroles_optional& bkm_user::
workroles () const
{
  return this->workroles_;
}

bkm_user::workroles_optional& bkm_user::
workroles ()
{
  return this->workroles_;
}

void bkm_user::
workroles (const workroles_type& x)
{
  this->workroles_.set (x);
}

void bkm_user::
workroles (const workroles_optional& x)
{
  this->workroles_ = x;
}

void bkm_user::
workroles (::std::unique_ptr< workroles_type > x)
{
  this->workroles_.set (std::move (x));
}

const bkm_user::access_optional& bkm_user::
access () const
{
  return this->access_;
}

bkm_user::access_optional& bkm_user::
access ()
{
  return this->access_;
}

void bkm_user::
access (const access_type& x)
{
  this->access_.set (x);
}

void bkm_user::
access (const access_optional& x)
{
  this->access_ = x;
}

void bkm_user::
access (::std::unique_ptr< access_type > x)
{
  this->access_.set (std::move (x));
}

const bkm_user::allowpassword_optional& bkm_user::
allowpassword () const
{
  return this->allowpassword_;
}

bkm_user::allowpassword_optional& bkm_user::
allowpassword ()
{
  return this->allowpassword_;
}

void bkm_user::
allowpassword (const allowpassword_type& x)
{
  this->allowpassword_.set (x);
}

void bkm_user::
allowpassword (const allowpassword_optional& x)
{
  this->allowpassword_ = x;
}

void bkm_user::
allowpassword (::std::unique_ptr< allowpassword_type > x)
{
  this->allowpassword_.set (std::move (x));
}

const bkm_user::desc_optional& bkm_user::
desc () const
{
  return this->desc_;
}

bkm_user::desc_optional& bkm_user::
desc ()
{
  return this->desc_;
}

void bkm_user::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void bkm_user::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void bkm_user::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const bkm_user::remark_optional& bkm_user::
remark () const
{
  return this->remark_;
}

bkm_user::remark_optional& bkm_user::
remark ()
{
  return this->remark_;
}

void bkm_user::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void bkm_user::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void bkm_user::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}

const bkm_user::note_optional& bkm_user::
note () const
{
  return this->note_;
}

bkm_user::note_optional& bkm_user::
note ()
{
  return this->note_;
}

void bkm_user::
note (const note_type& x)
{
  this->note_.set (x);
}

void bkm_user::
note (const note_optional& x)
{
  this->note_ = x;
}

void bkm_user::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}


// bkm_range
// 

const bkm_range::id_optional& bkm_range::
id () const
{
  return this->id_;
}

bkm_range::id_optional& bkm_range::
id ()
{
  return this->id_;
}

void bkm_range::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_range::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_range::rangecode_type& bkm_range::
rangecode () const
{
  return this->rangecode_.get ();
}

bkm_range::rangecode_type& bkm_range::
rangecode ()
{
  return this->rangecode_.get ();
}

void bkm_range::
rangecode (const rangecode_type& x)
{
  this->rangecode_.set (x);
}

void bkm_range::
rangecode (::std::unique_ptr< rangecode_type > x)
{
  this->rangecode_.set (std::move (x));
}

const bkm_range::externalkey_type& bkm_range::
externalkey () const
{
  return this->externalkey_.get ();
}

bkm_range::externalkey_type& bkm_range::
externalkey ()
{
  return this->externalkey_.get ();
}

void bkm_range::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void bkm_range::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const bkm_range::matchfield_optional& bkm_range::
matchfield () const
{
  return this->matchfield_;
}

bkm_range::matchfield_optional& bkm_range::
matchfield ()
{
  return this->matchfield_;
}

void bkm_range::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void bkm_range::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void bkm_range::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const bkm_range::controlcode_optional& bkm_range::
controlcode () const
{
  return this->controlcode_;
}

bkm_range::controlcode_optional& bkm_range::
controlcode ()
{
  return this->controlcode_;
}

void bkm_range::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void bkm_range::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void bkm_range::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const bkm_range::keyid_optional& bkm_range::
keyid () const
{
  return this->keyid_;
}

bkm_range::keyid_optional& bkm_range::
keyid ()
{
  return this->keyid_;
}

void bkm_range::
keyid (const keyid_type& x)
{
  this->keyid_.set (x);
}

void bkm_range::
keyid (const keyid_optional& x)
{
  this->keyid_ = x;
}

void bkm_range::
keyid (::std::unique_ptr< keyid_type > x)
{
  this->keyid_.set (std::move (x));
}

const bkm_range::item_optional& bkm_range::
item () const
{
  return this->item_;
}

bkm_range::item_optional& bkm_range::
item ()
{
  return this->item_;
}

void bkm_range::
item (const item_type& x)
{
  this->item_.set (x);
}

void bkm_range::
item (const item_optional& x)
{
  this->item_ = x;
}

void bkm_range::
item (::std::unique_ptr< item_type > x)
{
  this->item_.set (std::move (x));
}

const bkm_range::code_optional& bkm_range::
code () const
{
  return this->code_;
}

bkm_range::code_optional& bkm_range::
code ()
{
  return this->code_;
}

void bkm_range::
code (const code_type& x)
{
  this->code_.set (x);
}

void bkm_range::
code (const code_optional& x)
{
  this->code_ = x;
}

void bkm_range::
code (::std::unique_ptr< code_type > x)
{
  this->code_.set (std::move (x));
}

const bkm_range::note_optional& bkm_range::
note () const
{
  return this->note_;
}

bkm_range::note_optional& bkm_range::
note ()
{
  return this->note_;
}

void bkm_range::
note (const note_type& x)
{
  this->note_.set (x);
}

void bkm_range::
note (const note_optional& x)
{
  this->note_ = x;
}

void bkm_range::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const bkm_range::remark_optional& bkm_range::
remark () const
{
  return this->remark_;
}

bkm_range::remark_optional& bkm_range::
remark ()
{
  return this->remark_;
}

void bkm_range::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void bkm_range::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void bkm_range::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}


// bkm_city
// 

const bkm_city::id_optional& bkm_city::
id () const
{
  return this->id_;
}

bkm_city::id_optional& bkm_city::
id ()
{
  return this->id_;
}

void bkm_city::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_city::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_city::externalkey_type& bkm_city::
externalkey () const
{
  return this->externalkey_.get ();
}

bkm_city::externalkey_type& bkm_city::
externalkey ()
{
  return this->externalkey_.get ();
}

void bkm_city::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void bkm_city::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const bkm_city::matchfield_optional& bkm_city::
matchfield () const
{
  return this->matchfield_;
}

bkm_city::matchfield_optional& bkm_city::
matchfield ()
{
  return this->matchfield_;
}

void bkm_city::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void bkm_city::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void bkm_city::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const bkm_city::controlcode_optional& bkm_city::
controlcode () const
{
  return this->controlcode_;
}

bkm_city::controlcode_optional& bkm_city::
controlcode ()
{
  return this->controlcode_;
}

void bkm_city::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void bkm_city::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void bkm_city::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const bkm_city::city_optional& bkm_city::
city () const
{
  return this->city_;
}

bkm_city::city_optional& bkm_city::
city ()
{
  return this->city_;
}

void bkm_city::
city (const city_type& x)
{
  this->city_.set (x);
}

void bkm_city::
city (const city_optional& x)
{
  this->city_ = x;
}

void bkm_city::
city (::std::unique_ptr< city_type > x)
{
  this->city_.set (std::move (x));
}

const bkm_city::zipcode_optional& bkm_city::
zipcode () const
{
  return this->zipcode_;
}

bkm_city::zipcode_optional& bkm_city::
zipcode ()
{
  return this->zipcode_;
}

void bkm_city::
zipcode (const zipcode_type& x)
{
  this->zipcode_.set (x);
}

void bkm_city::
zipcode (const zipcode_optional& x)
{
  this->zipcode_ = x;
}

void bkm_city::
zipcode (::std::unique_ptr< zipcode_type > x)
{
  this->zipcode_.set (std::move (x));
}

const bkm_city::statecode_optional& bkm_city::
statecode () const
{
  return this->statecode_;
}

bkm_city::statecode_optional& bkm_city::
statecode ()
{
  return this->statecode_;
}

void bkm_city::
statecode (const statecode_type& x)
{
  this->statecode_.set (x);
}

void bkm_city::
statecode (const statecode_optional& x)
{
  this->statecode_ = x;
}

void bkm_city::
statecode (::std::unique_ptr< statecode_type > x)
{
  this->statecode_.set (std::move (x));
}

const bkm_city::areacode_optional& bkm_city::
areacode () const
{
  return this->areacode_;
}

bkm_city::areacode_optional& bkm_city::
areacode ()
{
  return this->areacode_;
}

void bkm_city::
areacode (const areacode_type& x)
{
  this->areacode_.set (x);
}

void bkm_city::
areacode (const areacode_optional& x)
{
  this->areacode_ = x;
}

void bkm_city::
areacode (::std::unique_ptr< areacode_type > x)
{
  this->areacode_.set (std::move (x));
}

const bkm_city::desc_optional& bkm_city::
desc () const
{
  return this->desc_;
}

bkm_city::desc_optional& bkm_city::
desc ()
{
  return this->desc_;
}

void bkm_city::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void bkm_city::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void bkm_city::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const bkm_city::note_optional& bkm_city::
note () const
{
  return this->note_;
}

bkm_city::note_optional& bkm_city::
note ()
{
  return this->note_;
}

void bkm_city::
note (const note_type& x)
{
  this->note_.set (x);
}

void bkm_city::
note (const note_optional& x)
{
  this->note_ = x;
}

void bkm_city::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const bkm_city::remark_optional& bkm_city::
remark () const
{
  return this->remark_;
}

bkm_city::remark_optional& bkm_city::
remark ()
{
  return this->remark_;
}

void bkm_city::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void bkm_city::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void bkm_city::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}


// bkm_bank
// 

const bkm_bank::id_optional& bkm_bank::
id () const
{
  return this->id_;
}

bkm_bank::id_optional& bkm_bank::
id ()
{
  return this->id_;
}

void bkm_bank::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_bank::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_bank::externalkey_type& bkm_bank::
externalkey () const
{
  return this->externalkey_.get ();
}

bkm_bank::externalkey_type& bkm_bank::
externalkey ()
{
  return this->externalkey_.get ();
}

void bkm_bank::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void bkm_bank::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const bkm_bank::matchfield_optional& bkm_bank::
matchfield () const
{
  return this->matchfield_;
}

bkm_bank::matchfield_optional& bkm_bank::
matchfield ()
{
  return this->matchfield_;
}

void bkm_bank::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void bkm_bank::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void bkm_bank::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const bkm_bank::controlcode_optional& bkm_bank::
controlcode () const
{
  return this->controlcode_;
}

bkm_bank::controlcode_optional& bkm_bank::
controlcode ()
{
  return this->controlcode_;
}

void bkm_bank::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void bkm_bank::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void bkm_bank::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const bkm_bank::blz_optional& bkm_bank::
blz () const
{
  return this->blz_;
}

bkm_bank::blz_optional& bkm_bank::
blz ()
{
  return this->blz_;
}

void bkm_bank::
blz (const blz_type& x)
{
  this->blz_.set (x);
}

void bkm_bank::
blz (const blz_optional& x)
{
  this->blz_ = x;
}

void bkm_bank::
blz (::std::unique_ptr< blz_type > x)
{
  this->blz_.set (std::move (x));
}

const bkm_bank::swift_optional& bkm_bank::
swift () const
{
  return this->swift_;
}

bkm_bank::swift_optional& bkm_bank::
swift ()
{
  return this->swift_;
}

void bkm_bank::
swift (const swift_type& x)
{
  this->swift_.set (x);
}

void bkm_bank::
swift (const swift_optional& x)
{
  this->swift_ = x;
}

void bkm_bank::
swift (::std::unique_ptr< swift_type > x)
{
  this->swift_.set (std::move (x));
}

const bkm_bank::bin_optional& bkm_bank::
bin () const
{
  return this->bin_;
}

bkm_bank::bin_optional& bkm_bank::
bin ()
{
  return this->bin_;
}

void bkm_bank::
bin (const bin_type& x)
{
  this->bin_.set (x);
}

void bkm_bank::
bin (const bin_optional& x)
{
  this->bin_ = x;
}

void bkm_bank::
bin (::std::unique_ptr< bin_type > x)
{
  this->bin_.set (std::move (x));
}

const bkm_bank::bank_optional& bkm_bank::
bank () const
{
  return this->bank_;
}

bkm_bank::bank_optional& bkm_bank::
bank ()
{
  return this->bank_;
}

void bkm_bank::
bank (const bank_type& x)
{
  this->bank_.set (x);
}

void bkm_bank::
bank (const bank_optional& x)
{
  this->bank_ = x;
}

void bkm_bank::
bank (::std::unique_ptr< bank_type > x)
{
  this->bank_.set (std::move (x));
}

const bkm_bank::city_optional& bkm_bank::
city () const
{
  return this->city_;
}

bkm_bank::city_optional& bkm_bank::
city ()
{
  return this->city_;
}

void bkm_bank::
city (const city_type& x)
{
  this->city_.set (x);
}

void bkm_bank::
city (const city_optional& x)
{
  this->city_ = x;
}

void bkm_bank::
city (::std::unique_ptr< city_type > x)
{
  this->city_.set (std::move (x));
}

const bkm_bank::zipcode_optional& bkm_bank::
zipcode () const
{
  return this->zipcode_;
}

bkm_bank::zipcode_optional& bkm_bank::
zipcode ()
{
  return this->zipcode_;
}

void bkm_bank::
zipcode (const zipcode_type& x)
{
  this->zipcode_.set (x);
}

void bkm_bank::
zipcode (const zipcode_optional& x)
{
  this->zipcode_ = x;
}

void bkm_bank::
zipcode (::std::unique_ptr< zipcode_type > x)
{
  this->zipcode_.set (std::move (x));
}

const bkm_bank::street_optional& bkm_bank::
street () const
{
  return this->street_;
}

bkm_bank::street_optional& bkm_bank::
street ()
{
  return this->street_;
}

void bkm_bank::
street (const street_type& x)
{
  this->street_.set (x);
}

void bkm_bank::
street (const street_optional& x)
{
  this->street_ = x;
}

void bkm_bank::
street (::std::unique_ptr< street_type > x)
{
  this->street_.set (std::move (x));
}

const bkm_bank::phone_optional& bkm_bank::
phone () const
{
  return this->phone_;
}

bkm_bank::phone_optional& bkm_bank::
phone ()
{
  return this->phone_;
}

void bkm_bank::
phone (const phone_type& x)
{
  this->phone_.set (x);
}

void bkm_bank::
phone (const phone_optional& x)
{
  this->phone_ = x;
}

void bkm_bank::
phone (::std::unique_ptr< phone_type > x)
{
  this->phone_.set (std::move (x));
}

const bkm_bank::fax_optional& bkm_bank::
fax () const
{
  return this->fax_;
}

bkm_bank::fax_optional& bkm_bank::
fax ()
{
  return this->fax_;
}

void bkm_bank::
fax (const fax_type& x)
{
  this->fax_.set (x);
}

void bkm_bank::
fax (const fax_optional& x)
{
  this->fax_ = x;
}

void bkm_bank::
fax (::std::unique_ptr< fax_type > x)
{
  this->fax_.set (std::move (x));
}

const bkm_bank::email_optional& bkm_bank::
email () const
{
  return this->email_;
}

bkm_bank::email_optional& bkm_bank::
email ()
{
  return this->email_;
}

void bkm_bank::
email (const email_type& x)
{
  this->email_.set (x);
}

void bkm_bank::
email (const email_optional& x)
{
  this->email_ = x;
}

void bkm_bank::
email (::std::unique_ptr< email_type > x)
{
  this->email_.set (std::move (x));
}

const bkm_bank::homepage_optional& bkm_bank::
homepage () const
{
  return this->homepage_;
}

bkm_bank::homepage_optional& bkm_bank::
homepage ()
{
  return this->homepage_;
}

void bkm_bank::
homepage (const homepage_type& x)
{
  this->homepage_.set (x);
}

void bkm_bank::
homepage (const homepage_optional& x)
{
  this->homepage_ = x;
}

void bkm_bank::
homepage (::std::unique_ptr< homepage_type > x)
{
  this->homepage_.set (std::move (x));
}

const bkm_bank::statecode_optional& bkm_bank::
statecode () const
{
  return this->statecode_;
}

bkm_bank::statecode_optional& bkm_bank::
statecode ()
{
  return this->statecode_;
}

void bkm_bank::
statecode (const statecode_type& x)
{
  this->statecode_.set (x);
}

void bkm_bank::
statecode (const statecode_optional& x)
{
  this->statecode_ = x;
}

void bkm_bank::
statecode (::std::unique_ptr< statecode_type > x)
{
  this->statecode_.set (std::move (x));
}

const bkm_bank::desc_optional& bkm_bank::
desc () const
{
  return this->desc_;
}

bkm_bank::desc_optional& bkm_bank::
desc ()
{
  return this->desc_;
}

void bkm_bank::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void bkm_bank::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void bkm_bank::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const bkm_bank::note_optional& bkm_bank::
note () const
{
  return this->note_;
}

bkm_bank::note_optional& bkm_bank::
note ()
{
  return this->note_;
}

void bkm_bank::
note (const note_type& x)
{
  this->note_.set (x);
}

void bkm_bank::
note (const note_optional& x)
{
  this->note_ = x;
}

void bkm_bank::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const bkm_bank::remark_optional& bkm_bank::
remark () const
{
  return this->remark_;
}

bkm_bank::remark_optional& bkm_bank::
remark ()
{
  return this->remark_;
}

void bkm_bank::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void bkm_bank::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void bkm_bank::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}


// bkm_parish
// 

const bkm_parish::id_optional& bkm_parish::
id () const
{
  return this->id_;
}

bkm_parish::id_optional& bkm_parish::
id ()
{
  return this->id_;
}

void bkm_parish::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_parish::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_parish::externalkey_type& bkm_parish::
externalkey () const
{
  return this->externalkey_.get ();
}

bkm_parish::externalkey_type& bkm_parish::
externalkey ()
{
  return this->externalkey_.get ();
}

void bkm_parish::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void bkm_parish::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const bkm_parish::managerkey_optional& bkm_parish::
managerkey () const
{
  return this->managerkey_;
}

bkm_parish::managerkey_optional& bkm_parish::
managerkey ()
{
  return this->managerkey_;
}

void bkm_parish::
managerkey (const managerkey_type& x)
{
  this->managerkey_.set (x);
}

void bkm_parish::
managerkey (const managerkey_optional& x)
{
  this->managerkey_ = x;
}

void bkm_parish::
managerkey (::std::unique_ptr< managerkey_type > x)
{
  this->managerkey_.set (std::move (x));
}

const bkm_parish::parentkey_optional& bkm_parish::
parentkey () const
{
  return this->parentkey_;
}

bkm_parish::parentkey_optional& bkm_parish::
parentkey ()
{
  return this->parentkey_;
}

void bkm_parish::
parentkey (const parentkey_type& x)
{
  this->parentkey_.set (x);
}

void bkm_parish::
parentkey (const parentkey_optional& x)
{
  this->parentkey_ = x;
}

void bkm_parish::
parentkey (::std::unique_ptr< parentkey_type > x)
{
  this->parentkey_.set (std::move (x));
}

const bkm_parish::matchfield_optional& bkm_parish::
matchfield () const
{
  return this->matchfield_;
}

bkm_parish::matchfield_optional& bkm_parish::
matchfield ()
{
  return this->matchfield_;
}

void bkm_parish::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void bkm_parish::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void bkm_parish::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const bkm_parish::controlcode_optional& bkm_parish::
controlcode () const
{
  return this->controlcode_;
}

bkm_parish::controlcode_optional& bkm_parish::
controlcode ()
{
  return this->controlcode_;
}

void bkm_parish::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void bkm_parish::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void bkm_parish::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const bkm_parish::name_optional& bkm_parish::
name () const
{
  return this->name_;
}

bkm_parish::name_optional& bkm_parish::
name ()
{
  return this->name_;
}

void bkm_parish::
name (const name_type& x)
{
  this->name_.set (x);
}

void bkm_parish::
name (const name_optional& x)
{
  this->name_ = x;
}

void bkm_parish::
name (::std::unique_ptr< name_type > x)
{
  this->name_.set (std::move (x));
}

const bkm_parish::parish_optional& bkm_parish::
parish () const
{
  return this->parish_;
}

bkm_parish::parish_optional& bkm_parish::
parish ()
{
  return this->parish_;
}

void bkm_parish::
parish (const parish_type& x)
{
  this->parish_.set (x);
}

void bkm_parish::
parish (const parish_optional& x)
{
  this->parish_ = x;
}

void bkm_parish::
parish (::std::unique_ptr< parish_type > x)
{
  this->parish_.set (std::move (x));
}

const bkm_parish::code_optional& bkm_parish::
code () const
{
  return this->code_;
}

bkm_parish::code_optional& bkm_parish::
code ()
{
  return this->code_;
}

void bkm_parish::
code (const code_type& x)
{
  this->code_.set (x);
}

void bkm_parish::
code (const code_optional& x)
{
  this->code_ = x;
}

void bkm_parish::
code (::std::unique_ptr< code_type > x)
{
  this->code_.set (std::move (x));
}

const bkm_parish::levelcode_optional& bkm_parish::
levelcode () const
{
  return this->levelcode_;
}

bkm_parish::levelcode_optional& bkm_parish::
levelcode ()
{
  return this->levelcode_;
}

void bkm_parish::
levelcode (const levelcode_type& x)
{
  this->levelcode_.set (x);
}

void bkm_parish::
levelcode (const levelcode_optional& x)
{
  this->levelcode_ = x;
}

void bkm_parish::
levelcode (::std::unique_ptr< levelcode_type > x)
{
  this->levelcode_.set (std::move (x));
}

const bkm_parish::city_optional& bkm_parish::
city () const
{
  return this->city_;
}

bkm_parish::city_optional& bkm_parish::
city ()
{
  return this->city_;
}

void bkm_parish::
city (const city_type& x)
{
  this->city_.set (x);
}

void bkm_parish::
city (const city_optional& x)
{
  this->city_ = x;
}

void bkm_parish::
city (::std::unique_ptr< city_type > x)
{
  this->city_.set (std::move (x));
}

const bkm_parish::zipcode_optional& bkm_parish::
zipcode () const
{
  return this->zipcode_;
}

bkm_parish::zipcode_optional& bkm_parish::
zipcode ()
{
  return this->zipcode_;
}

void bkm_parish::
zipcode (const zipcode_type& x)
{
  this->zipcode_.set (x);
}

void bkm_parish::
zipcode (const zipcode_optional& x)
{
  this->zipcode_ = x;
}

void bkm_parish::
zipcode (::std::unique_ptr< zipcode_type > x)
{
  this->zipcode_.set (std::move (x));
}

const bkm_parish::street_optional& bkm_parish::
street () const
{
  return this->street_;
}

bkm_parish::street_optional& bkm_parish::
street ()
{
  return this->street_;
}

void bkm_parish::
street (const street_type& x)
{
  this->street_.set (x);
}

void bkm_parish::
street (const street_optional& x)
{
  this->street_ = x;
}

void bkm_parish::
street (::std::unique_ptr< street_type > x)
{
  this->street_.set (std::move (x));
}

const bkm_parish::phone_optional& bkm_parish::
phone () const
{
  return this->phone_;
}

bkm_parish::phone_optional& bkm_parish::
phone ()
{
  return this->phone_;
}

void bkm_parish::
phone (const phone_type& x)
{
  this->phone_.set (x);
}

void bkm_parish::
phone (const phone_optional& x)
{
  this->phone_ = x;
}

void bkm_parish::
phone (::std::unique_ptr< phone_type > x)
{
  this->phone_.set (std::move (x));
}

const bkm_parish::fax_optional& bkm_parish::
fax () const
{
  return this->fax_;
}

bkm_parish::fax_optional& bkm_parish::
fax ()
{
  return this->fax_;
}

void bkm_parish::
fax (const fax_type& x)
{
  this->fax_.set (x);
}

void bkm_parish::
fax (const fax_optional& x)
{
  this->fax_ = x;
}

void bkm_parish::
fax (::std::unique_ptr< fax_type > x)
{
  this->fax_.set (std::move (x));
}

const bkm_parish::email_optional& bkm_parish::
email () const
{
  return this->email_;
}

bkm_parish::email_optional& bkm_parish::
email ()
{
  return this->email_;
}

void bkm_parish::
email (const email_type& x)
{
  this->email_.set (x);
}

void bkm_parish::
email (const email_optional& x)
{
  this->email_ = x;
}

void bkm_parish::
email (::std::unique_ptr< email_type > x)
{
  this->email_.set (std::move (x));
}

const bkm_parish::homepage_optional& bkm_parish::
homepage () const
{
  return this->homepage_;
}

bkm_parish::homepage_optional& bkm_parish::
homepage ()
{
  return this->homepage_;
}

void bkm_parish::
homepage (const homepage_type& x)
{
  this->homepage_.set (x);
}

void bkm_parish::
homepage (const homepage_optional& x)
{
  this->homepage_ = x;
}

void bkm_parish::
homepage (::std::unique_ptr< homepage_type > x)
{
  this->homepage_.set (std::move (x));
}

const bkm_parish::statecode_optional& bkm_parish::
statecode () const
{
  return this->statecode_;
}

bkm_parish::statecode_optional& bkm_parish::
statecode ()
{
  return this->statecode_;
}

void bkm_parish::
statecode (const statecode_type& x)
{
  this->statecode_.set (x);
}

void bkm_parish::
statecode (const statecode_optional& x)
{
  this->statecode_ = x;
}

void bkm_parish::
statecode (::std::unique_ptr< statecode_type > x)
{
  this->statecode_.set (std::move (x));
}

const bkm_parish::garage_optional& bkm_parish::
garage () const
{
  return this->garage_;
}

bkm_parish::garage_optional& bkm_parish::
garage ()
{
  return this->garage_;
}

void bkm_parish::
garage (const garage_type& x)
{
  this->garage_.set (x);
}

void bkm_parish::
garage (const garage_optional& x)
{
  this->garage_ = x;
}

void bkm_parish::
garage (::std::unique_ptr< garage_type > x)
{
  this->garage_.set (std::move (x));
}

const bkm_parish::parking_optional& bkm_parish::
parking () const
{
  return this->parking_;
}

bkm_parish::parking_optional& bkm_parish::
parking ()
{
  return this->parking_;
}

void bkm_parish::
parking (const parking_type& x)
{
  this->parking_.set (x);
}

void bkm_parish::
parking (const parking_optional& x)
{
  this->parking_ = x;
}

void bkm_parish::
parking (::std::unique_ptr< parking_type > x)
{
  this->parking_.set (std::move (x));
}

const bkm_parish::commercial_optional& bkm_parish::
commercial () const
{
  return this->commercial_;
}

bkm_parish::commercial_optional& bkm_parish::
commercial ()
{
  return this->commercial_;
}

void bkm_parish::
commercial (const commercial_type& x)
{
  this->commercial_.set (x);
}

void bkm_parish::
commercial (const commercial_optional& x)
{
  this->commercial_ = x;
}

void bkm_parish::
commercial (::std::unique_ptr< commercial_type > x)
{
  this->commercial_.set (std::move (x));
}

const bkm_parish::object_optional& bkm_parish::
object () const
{
  return this->object_;
}

bkm_parish::object_optional& bkm_parish::
object ()
{
  return this->object_;
}

void bkm_parish::
object (const object_type& x)
{
  this->object_.set (x);
}

void bkm_parish::
object (const object_optional& x)
{
  this->object_ = x;
}

void bkm_parish::
object (::std::unique_ptr< object_type > x)
{
  this->object_.set (std::move (x));
}

const bkm_parish::area_optional& bkm_parish::
area () const
{
  return this->area_;
}

bkm_parish::area_optional& bkm_parish::
area ()
{
  return this->area_;
}

void bkm_parish::
area (const area_type& x)
{
  this->area_.set (x);
}

void bkm_parish::
area (const area_optional& x)
{
  this->area_ = x;
}

void bkm_parish::
area (::std::unique_ptr< area_type > x)
{
  this->area_.set (std::move (x));
}

const bkm_parish::duplex_optional& bkm_parish::
duplex () const
{
  return this->duplex_;
}

bkm_parish::duplex_optional& bkm_parish::
duplex ()
{
  return this->duplex_;
}

void bkm_parish::
duplex (const duplex_type& x)
{
  this->duplex_.set (x);
}

void bkm_parish::
duplex (const duplex_optional& x)
{
  this->duplex_ = x;
}

void bkm_parish::
duplex (::std::unique_ptr< duplex_type > x)
{
  this->duplex_.set (std::move (x));
}

const bkm_parish::underground_optional& bkm_parish::
underground () const
{
  return this->underground_;
}

bkm_parish::underground_optional& bkm_parish::
underground ()
{
  return this->underground_;
}

void bkm_parish::
underground (const underground_type& x)
{
  this->underground_.set (x);
}

void bkm_parish::
underground (const underground_optional& x)
{
  this->underground_ = x;
}

void bkm_parish::
underground (::std::unique_ptr< underground_type > x)
{
  this->underground_.set (std::move (x));
}

const bkm_parish::statuscode_optional& bkm_parish::
statuscode () const
{
  return this->statuscode_;
}

bkm_parish::statuscode_optional& bkm_parish::
statuscode ()
{
  return this->statuscode_;
}

void bkm_parish::
statuscode (const statuscode_type& x)
{
  this->statuscode_.set (x);
}

void bkm_parish::
statuscode (const statuscode_optional& x)
{
  this->statuscode_ = x;
}

void bkm_parish::
statuscode (::std::unique_ptr< statuscode_type > x)
{
  this->statuscode_.set (std::move (x));
}

const bkm_parish::groupcode_optional& bkm_parish::
groupcode () const
{
  return this->groupcode_;
}

bkm_parish::groupcode_optional& bkm_parish::
groupcode ()
{
  return this->groupcode_;
}

void bkm_parish::
groupcode (const groupcode_type& x)
{
  this->groupcode_.set (x);
}

void bkm_parish::
groupcode (const groupcode_optional& x)
{
  this->groupcode_ = x;
}

void bkm_parish::
groupcode (::std::unique_ptr< groupcode_type > x)
{
  this->groupcode_.set (std::move (x));
}

const bkm_parish::desc_optional& bkm_parish::
desc () const
{
  return this->desc_;
}

bkm_parish::desc_optional& bkm_parish::
desc ()
{
  return this->desc_;
}

void bkm_parish::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void bkm_parish::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void bkm_parish::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const bkm_parish::note_optional& bkm_parish::
note () const
{
  return this->note_;
}

bkm_parish::note_optional& bkm_parish::
note ()
{
  return this->note_;
}

void bkm_parish::
note (const note_type& x)
{
  this->note_.set (x);
}

void bkm_parish::
note (const note_optional& x)
{
  this->note_ = x;
}

void bkm_parish::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const bkm_parish::remark_optional& bkm_parish::
remark () const
{
  return this->remark_;
}

bkm_parish::remark_optional& bkm_parish::
remark ()
{
  return this->remark_;
}

void bkm_parish::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void bkm_parish::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void bkm_parish::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}


// bkm_contact
// 

const bkm_contact::id_optional& bkm_contact::
id () const
{
  return this->id_;
}

bkm_contact::id_optional& bkm_contact::
id ()
{
  return this->id_;
}

void bkm_contact::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_contact::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_contact::externalkey_type& bkm_contact::
externalkey () const
{
  return this->externalkey_.get ();
}

bkm_contact::externalkey_type& bkm_contact::
externalkey ()
{
  return this->externalkey_.get ();
}

void bkm_contact::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void bkm_contact::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const bkm_contact::matchfield_optional& bkm_contact::
matchfield () const
{
  return this->matchfield_;
}

bkm_contact::matchfield_optional& bkm_contact::
matchfield ()
{
  return this->matchfield_;
}

void bkm_contact::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void bkm_contact::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void bkm_contact::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const bkm_contact::controlcode_optional& bkm_contact::
controlcode () const
{
  return this->controlcode_;
}

bkm_contact::controlcode_optional& bkm_contact::
controlcode ()
{
  return this->controlcode_;
}

void bkm_contact::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void bkm_contact::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void bkm_contact::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const bkm_contact::keyid_optional& bkm_contact::
keyid () const
{
  return this->keyid_;
}

bkm_contact::keyid_optional& bkm_contact::
keyid ()
{
  return this->keyid_;
}

void bkm_contact::
keyid (const keyid_type& x)
{
  this->keyid_.set (x);
}

void bkm_contact::
keyid (const keyid_optional& x)
{
  this->keyid_ = x;
}

void bkm_contact::
keyid (::std::unique_ptr< keyid_type > x)
{
  this->keyid_.set (std::move (x));
}

const bkm_contact::taxid_optional& bkm_contact::
taxid () const
{
  return this->taxid_;
}

bkm_contact::taxid_optional& bkm_contact::
taxid ()
{
  return this->taxid_;
}

void bkm_contact::
taxid (const taxid_type& x)
{
  this->taxid_.set (x);
}

void bkm_contact::
taxid (const taxid_optional& x)
{
  this->taxid_ = x;
}

void bkm_contact::
taxid (::std::unique_ptr< taxid_type > x)
{
  this->taxid_.set (std::move (x));
}

const bkm_contact::synonym_optional& bkm_contact::
synonym () const
{
  return this->synonym_;
}

bkm_contact::synonym_optional& bkm_contact::
synonym ()
{
  return this->synonym_;
}

void bkm_contact::
synonym (const synonym_type& x)
{
  this->synonym_.set (x);
}

void bkm_contact::
synonym (const synonym_optional& x)
{
  this->synonym_ = x;
}

void bkm_contact::
synonym (::std::unique_ptr< synonym_type > x)
{
  this->synonym_.set (std::move (x));
}

const bkm_contact::name1_optional& bkm_contact::
name1 () const
{
  return this->name1_;
}

bkm_contact::name1_optional& bkm_contact::
name1 ()
{
  return this->name1_;
}

void bkm_contact::
name1 (const name1_type& x)
{
  this->name1_.set (x);
}

void bkm_contact::
name1 (const name1_optional& x)
{
  this->name1_ = x;
}

void bkm_contact::
name1 (::std::unique_ptr< name1_type > x)
{
  this->name1_.set (std::move (x));
}

const bkm_contact::name2_optional& bkm_contact::
name2 () const
{
  return this->name2_;
}

bkm_contact::name2_optional& bkm_contact::
name2 ()
{
  return this->name2_;
}

void bkm_contact::
name2 (const name2_type& x)
{
  this->name2_.set (x);
}

void bkm_contact::
name2 (const name2_optional& x)
{
  this->name2_ = x;
}

void bkm_contact::
name2 (::std::unique_ptr< name2_type > x)
{
  this->name2_.set (std::move (x));
}

const bkm_contact::name3_optional& bkm_contact::
name3 () const
{
  return this->name3_;
}

bkm_contact::name3_optional& bkm_contact::
name3 ()
{
  return this->name3_;
}

void bkm_contact::
name3 (const name3_type& x)
{
  this->name3_.set (x);
}

void bkm_contact::
name3 (const name3_optional& x)
{
  this->name3_ = x;
}

void bkm_contact::
name3 (::std::unique_ptr< name3_type > x)
{
  this->name3_.set (std::move (x));
}

const bkm_contact::city_optional& bkm_contact::
city () const
{
  return this->city_;
}

bkm_contact::city_optional& bkm_contact::
city ()
{
  return this->city_;
}

void bkm_contact::
city (const city_type& x)
{
  this->city_.set (x);
}

void bkm_contact::
city (const city_optional& x)
{
  this->city_ = x;
}

void bkm_contact::
city (::std::unique_ptr< city_type > x)
{
  this->city_.set (std::move (x));
}

const bkm_contact::zipcode_optional& bkm_contact::
zipcode () const
{
  return this->zipcode_;
}

bkm_contact::zipcode_optional& bkm_contact::
zipcode ()
{
  return this->zipcode_;
}

void bkm_contact::
zipcode (const zipcode_type& x)
{
  this->zipcode_.set (x);
}

void bkm_contact::
zipcode (const zipcode_optional& x)
{
  this->zipcode_ = x;
}

void bkm_contact::
zipcode (::std::unique_ptr< zipcode_type > x)
{
  this->zipcode_.set (std::move (x));
}

const bkm_contact::street_optional& bkm_contact::
street () const
{
  return this->street_;
}

bkm_contact::street_optional& bkm_contact::
street ()
{
  return this->street_;
}

void bkm_contact::
street (const street_type& x)
{
  this->street_.set (x);
}

void bkm_contact::
street (const street_optional& x)
{
  this->street_ = x;
}

void bkm_contact::
street (::std::unique_ptr< street_type > x)
{
  this->street_.set (std::move (x));
}

const bkm_contact::extern1_optional& bkm_contact::
extern1 () const
{
  return this->extern1_;
}

bkm_contact::extern1_optional& bkm_contact::
extern1 ()
{
  return this->extern1_;
}

void bkm_contact::
extern1 (const extern1_type& x)
{
  this->extern1_.set (x);
}

void bkm_contact::
extern1 (const extern1_optional& x)
{
  this->extern1_ = x;
}

void bkm_contact::
extern1 (::std::unique_ptr< extern1_type > x)
{
  this->extern1_.set (std::move (x));
}

const bkm_contact::extern2_optional& bkm_contact::
extern2 () const
{
  return this->extern2_;
}

bkm_contact::extern2_optional& bkm_contact::
extern2 ()
{
  return this->extern2_;
}

void bkm_contact::
extern2 (const extern2_type& x)
{
  this->extern2_.set (x);
}

void bkm_contact::
extern2 (const extern2_optional& x)
{
  this->extern2_ = x;
}

void bkm_contact::
extern2 (::std::unique_ptr< extern2_type > x)
{
  this->extern2_.set (std::move (x));
}

const bkm_contact::extern3_optional& bkm_contact::
extern3 () const
{
  return this->extern3_;
}

bkm_contact::extern3_optional& bkm_contact::
extern3 ()
{
  return this->extern3_;
}

void bkm_contact::
extern3 (const extern3_type& x)
{
  this->extern3_.set (x);
}

void bkm_contact::
extern3 (const extern3_optional& x)
{
  this->extern3_ = x;
}

void bkm_contact::
extern3 (::std::unique_ptr< extern3_type > x)
{
  this->extern3_.set (std::move (x));
}

const bkm_contact::phone_optional& bkm_contact::
phone () const
{
  return this->phone_;
}

bkm_contact::phone_optional& bkm_contact::
phone ()
{
  return this->phone_;
}

void bkm_contact::
phone (const phone_type& x)
{
  this->phone_.set (x);
}

void bkm_contact::
phone (const phone_optional& x)
{
  this->phone_ = x;
}

void bkm_contact::
phone (::std::unique_ptr< phone_type > x)
{
  this->phone_.set (std::move (x));
}

const bkm_contact::phone2_optional& bkm_contact::
phone2 () const
{
  return this->phone2_;
}

bkm_contact::phone2_optional& bkm_contact::
phone2 ()
{
  return this->phone2_;
}

void bkm_contact::
phone2 (const phone2_type& x)
{
  this->phone2_.set (x);
}

void bkm_contact::
phone2 (const phone2_optional& x)
{
  this->phone2_ = x;
}

void bkm_contact::
phone2 (::std::unique_ptr< phone2_type > x)
{
  this->phone2_.set (std::move (x));
}

const bkm_contact::phone3_optional& bkm_contact::
phone3 () const
{
  return this->phone3_;
}

bkm_contact::phone3_optional& bkm_contact::
phone3 ()
{
  return this->phone3_;
}

void bkm_contact::
phone3 (const phone3_type& x)
{
  this->phone3_.set (x);
}

void bkm_contact::
phone3 (const phone3_optional& x)
{
  this->phone3_ = x;
}

void bkm_contact::
phone3 (::std::unique_ptr< phone3_type > x)
{
  this->phone3_.set (std::move (x));
}

const bkm_contact::fax_optional& bkm_contact::
fax () const
{
  return this->fax_;
}

bkm_contact::fax_optional& bkm_contact::
fax ()
{
  return this->fax_;
}

void bkm_contact::
fax (const fax_type& x)
{
  this->fax_.set (x);
}

void bkm_contact::
fax (const fax_optional& x)
{
  this->fax_ = x;
}

void bkm_contact::
fax (::std::unique_ptr< fax_type > x)
{
  this->fax_.set (std::move (x));
}

const bkm_contact::email_optional& bkm_contact::
email () const
{
  return this->email_;
}

bkm_contact::email_optional& bkm_contact::
email ()
{
  return this->email_;
}

void bkm_contact::
email (const email_type& x)
{
  this->email_.set (x);
}

void bkm_contact::
email (const email_optional& x)
{
  this->email_ = x;
}

void bkm_contact::
email (::std::unique_ptr< email_type > x)
{
  this->email_.set (std::move (x));
}

const bkm_contact::homepage_optional& bkm_contact::
homepage () const
{
  return this->homepage_;
}

bkm_contact::homepage_optional& bkm_contact::
homepage ()
{
  return this->homepage_;
}

void bkm_contact::
homepage (const homepage_type& x)
{
  this->homepage_.set (x);
}

void bkm_contact::
homepage (const homepage_optional& x)
{
  this->homepage_ = x;
}

void bkm_contact::
homepage (::std::unique_ptr< homepage_type > x)
{
  this->homepage_.set (std::move (x));
}

const bkm_contact::vatid_optional& bkm_contact::
vatid () const
{
  return this->vatid_;
}

bkm_contact::vatid_optional& bkm_contact::
vatid ()
{
  return this->vatid_;
}

void bkm_contact::
vatid (const vatid_type& x)
{
  this->vatid_.set (x);
}

void bkm_contact::
vatid (const vatid_optional& x)
{
  this->vatid_ = x;
}

void bkm_contact::
vatid (::std::unique_ptr< vatid_type > x)
{
  this->vatid_.set (std::move (x));
}

const bkm_contact::vatexemption_optional& bkm_contact::
vatexemption () const
{
  return this->vatexemption_;
}

bkm_contact::vatexemption_optional& bkm_contact::
vatexemption ()
{
  return this->vatexemption_;
}

void bkm_contact::
vatexemption (const vatexemption_type& x)
{
  this->vatexemption_.set (x);
}

void bkm_contact::
vatexemption (const vatexemption_optional& x)
{
  this->vatexemption_ = x;
}

void bkm_contact::
vatexemption (::std::unique_ptr< vatexemption_type > x)
{
  this->vatexemption_.set (std::move (x));
}

const bkm_contact::statecode_optional& bkm_contact::
statecode () const
{
  return this->statecode_;
}

bkm_contact::statecode_optional& bkm_contact::
statecode ()
{
  return this->statecode_;
}

void bkm_contact::
statecode (const statecode_type& x)
{
  this->statecode_.set (x);
}

void bkm_contact::
statecode (const statecode_optional& x)
{
  this->statecode_ = x;
}

void bkm_contact::
statecode (::std::unique_ptr< statecode_type > x)
{
  this->statecode_.set (std::move (x));
}

const bkm_contact::statuscode_optional& bkm_contact::
statuscode () const
{
  return this->statuscode_;
}

bkm_contact::statuscode_optional& bkm_contact::
statuscode ()
{
  return this->statuscode_;
}

void bkm_contact::
statuscode (const statuscode_type& x)
{
  this->statuscode_.set (x);
}

void bkm_contact::
statuscode (const statuscode_optional& x)
{
  this->statuscode_ = x;
}

void bkm_contact::
statuscode (::std::unique_ptr< statuscode_type > x)
{
  this->statuscode_.set (std::move (x));
}

const bkm_contact::groupcode_optional& bkm_contact::
groupcode () const
{
  return this->groupcode_;
}

bkm_contact::groupcode_optional& bkm_contact::
groupcode ()
{
  return this->groupcode_;
}

void bkm_contact::
groupcode (const groupcode_type& x)
{
  this->groupcode_.set (x);
}

void bkm_contact::
groupcode (const groupcode_optional& x)
{
  this->groupcode_ = x;
}

void bkm_contact::
groupcode (::std::unique_ptr< groupcode_type > x)
{
  this->groupcode_.set (std::move (x));
}

const bkm_contact::business_optional& bkm_contact::
business () const
{
  return this->business_;
}

bkm_contact::business_optional& bkm_contact::
business ()
{
  return this->business_;
}

void bkm_contact::
business (const business_type& x)
{
  this->business_.set (x);
}

void bkm_contact::
business (const business_optional& x)
{
  this->business_ = x;
}

void bkm_contact::
business (::std::unique_ptr< business_type > x)
{
  this->business_.set (std::move (x));
}

const bkm_contact::desc_optional& bkm_contact::
desc () const
{
  return this->desc_;
}

bkm_contact::desc_optional& bkm_contact::
desc ()
{
  return this->desc_;
}

void bkm_contact::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void bkm_contact::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void bkm_contact::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const bkm_contact::note_optional& bkm_contact::
note () const
{
  return this->note_;
}

bkm_contact::note_optional& bkm_contact::
note ()
{
  return this->note_;
}

void bkm_contact::
note (const note_type& x)
{
  this->note_.set (x);
}

void bkm_contact::
note (const note_optional& x)
{
  this->note_ = x;
}

void bkm_contact::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const bkm_contact::remark_optional& bkm_contact::
remark () const
{
  return this->remark_;
}

bkm_contact::remark_optional& bkm_contact::
remark ()
{
  return this->remark_;
}

void bkm_contact::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void bkm_contact::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void bkm_contact::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}


// bkm_counterpart
// 

const bkm_counterpart::id_optional& bkm_counterpart::
id () const
{
  return this->id_;
}

bkm_counterpart::id_optional& bkm_counterpart::
id ()
{
  return this->id_;
}

void bkm_counterpart::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_counterpart::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_counterpart::externalkey_type& bkm_counterpart::
externalkey () const
{
  return this->externalkey_.get ();
}

bkm_counterpart::externalkey_type& bkm_counterpart::
externalkey ()
{
  return this->externalkey_.get ();
}

void bkm_counterpart::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void bkm_counterpart::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const bkm_counterpart::contactkey_type& bkm_counterpart::
contactkey () const
{
  return this->contactkey_.get ();
}

bkm_counterpart::contactkey_type& bkm_counterpart::
contactkey ()
{
  return this->contactkey_.get ();
}

void bkm_counterpart::
contactkey (const contactkey_type& x)
{
  this->contactkey_.set (x);
}

void bkm_counterpart::
contactkey (::std::unique_ptr< contactkey_type > x)
{
  this->contactkey_.set (std::move (x));
}

const bkm_counterpart::matchfield_optional& bkm_counterpart::
matchfield () const
{
  return this->matchfield_;
}

bkm_counterpart::matchfield_optional& bkm_counterpart::
matchfield ()
{
  return this->matchfield_;
}

void bkm_counterpart::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void bkm_counterpart::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void bkm_counterpart::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const bkm_counterpart::controlcode_optional& bkm_counterpart::
controlcode () const
{
  return this->controlcode_;
}

bkm_counterpart::controlcode_optional& bkm_counterpart::
controlcode ()
{
  return this->controlcode_;
}

void bkm_counterpart::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void bkm_counterpart::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void bkm_counterpart::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const bkm_counterpart::lastname_type& bkm_counterpart::
lastname () const
{
  return this->lastname_.get ();
}

bkm_counterpart::lastname_type& bkm_counterpart::
lastname ()
{
  return this->lastname_.get ();
}

void bkm_counterpart::
lastname (const lastname_type& x)
{
  this->lastname_.set (x);
}

void bkm_counterpart::
lastname (::std::unique_ptr< lastname_type > x)
{
  this->lastname_.set (std::move (x));
}

const bkm_counterpart::firstname_optional& bkm_counterpart::
firstname () const
{
  return this->firstname_;
}

bkm_counterpart::firstname_optional& bkm_counterpart::
firstname ()
{
  return this->firstname_;
}

void bkm_counterpart::
firstname (const firstname_type& x)
{
  this->firstname_.set (x);
}

void bkm_counterpart::
firstname (const firstname_optional& x)
{
  this->firstname_ = x;
}

void bkm_counterpart::
firstname (::std::unique_ptr< firstname_type > x)
{
  this->firstname_.set (std::move (x));
}

const bkm_counterpart::code_optional& bkm_counterpart::
code () const
{
  return this->code_;
}

bkm_counterpart::code_optional& bkm_counterpart::
code ()
{
  return this->code_;
}

void bkm_counterpart::
code (const code_type& x)
{
  this->code_.set (x);
}

void bkm_counterpart::
code (const code_optional& x)
{
  this->code_ = x;
}

void bkm_counterpart::
code (::std::unique_ptr< code_type > x)
{
  this->code_.set (std::move (x));
}

const bkm_counterpart::role_optional& bkm_counterpart::
role () const
{
  return this->role_;
}

bkm_counterpart::role_optional& bkm_counterpart::
role ()
{
  return this->role_;
}

void bkm_counterpart::
role (const role_type& x)
{
  this->role_.set (x);
}

void bkm_counterpart::
role (const role_optional& x)
{
  this->role_ = x;
}

void bkm_counterpart::
role (::std::unique_ptr< role_type > x)
{
  this->role_.set (std::move (x));
}

const bkm_counterpart::department_optional& bkm_counterpart::
department () const
{
  return this->department_;
}

bkm_counterpart::department_optional& bkm_counterpart::
department ()
{
  return this->department_;
}

void bkm_counterpart::
department (const department_type& x)
{
  this->department_.set (x);
}

void bkm_counterpart::
department (const department_optional& x)
{
  this->department_ = x;
}

void bkm_counterpart::
department (::std::unique_ptr< department_type > x)
{
  this->department_.set (std::move (x));
}

const bkm_counterpart::phone1_optional& bkm_counterpart::
phone1 () const
{
  return this->phone1_;
}

bkm_counterpart::phone1_optional& bkm_counterpart::
phone1 ()
{
  return this->phone1_;
}

void bkm_counterpart::
phone1 (const phone1_type& x)
{
  this->phone1_.set (x);
}

void bkm_counterpart::
phone1 (const phone1_optional& x)
{
  this->phone1_ = x;
}

void bkm_counterpart::
phone1 (::std::unique_ptr< phone1_type > x)
{
  this->phone1_.set (std::move (x));
}

const bkm_counterpart::phone2_optional& bkm_counterpart::
phone2 () const
{
  return this->phone2_;
}

bkm_counterpart::phone2_optional& bkm_counterpart::
phone2 ()
{
  return this->phone2_;
}

void bkm_counterpart::
phone2 (const phone2_type& x)
{
  this->phone2_.set (x);
}

void bkm_counterpart::
phone2 (const phone2_optional& x)
{
  this->phone2_ = x;
}

void bkm_counterpart::
phone2 (::std::unique_ptr< phone2_type > x)
{
  this->phone2_.set (std::move (x));
}

const bkm_counterpart::mobile_optional& bkm_counterpart::
mobile () const
{
  return this->mobile_;
}

bkm_counterpart::mobile_optional& bkm_counterpart::
mobile ()
{
  return this->mobile_;
}

void bkm_counterpart::
mobile (const mobile_type& x)
{
  this->mobile_.set (x);
}

void bkm_counterpart::
mobile (const mobile_optional& x)
{
  this->mobile_ = x;
}

void bkm_counterpart::
mobile (::std::unique_ptr< mobile_type > x)
{
  this->mobile_.set (std::move (x));
}

const bkm_counterpart::fax_optional& bkm_counterpart::
fax () const
{
  return this->fax_;
}

bkm_counterpart::fax_optional& bkm_counterpart::
fax ()
{
  return this->fax_;
}

void bkm_counterpart::
fax (const fax_type& x)
{
  this->fax_.set (x);
}

void bkm_counterpart::
fax (const fax_optional& x)
{
  this->fax_ = x;
}

void bkm_counterpart::
fax (::std::unique_ptr< fax_type > x)
{
  this->fax_.set (std::move (x));
}

const bkm_counterpart::mail_optional& bkm_counterpart::
mail () const
{
  return this->mail_;
}

bkm_counterpart::mail_optional& bkm_counterpart::
mail ()
{
  return this->mail_;
}

void bkm_counterpart::
mail (const mail_type& x)
{
  this->mail_.set (x);
}

void bkm_counterpart::
mail (const mail_optional& x)
{
  this->mail_ = x;
}

void bkm_counterpart::
mail (::std::unique_ptr< mail_type > x)
{
  this->mail_.set (std::move (x));
}

const bkm_counterpart::titlecode_optional& bkm_counterpart::
titlecode () const
{
  return this->titlecode_;
}

bkm_counterpart::titlecode_optional& bkm_counterpart::
titlecode ()
{
  return this->titlecode_;
}

void bkm_counterpart::
titlecode (const titlecode_type& x)
{
  this->titlecode_.set (x);
}

void bkm_counterpart::
titlecode (const titlecode_optional& x)
{
  this->titlecode_ = x;
}

void bkm_counterpart::
titlecode (::std::unique_ptr< titlecode_type > x)
{
  this->titlecode_.set (std::move (x));
}

const bkm_counterpart::salutecode_optional& bkm_counterpart::
salutecode () const
{
  return this->salutecode_;
}

bkm_counterpart::salutecode_optional& bkm_counterpart::
salutecode ()
{
  return this->salutecode_;
}

void bkm_counterpart::
salutecode (const salutecode_type& x)
{
  this->salutecode_.set (x);
}

void bkm_counterpart::
salutecode (const salutecode_optional& x)
{
  this->salutecode_ = x;
}

void bkm_counterpart::
salutecode (::std::unique_ptr< salutecode_type > x)
{
  this->salutecode_.set (std::move (x));
}

const bkm_counterpart::statuscode_optional& bkm_counterpart::
statuscode () const
{
  return this->statuscode_;
}

bkm_counterpart::statuscode_optional& bkm_counterpart::
statuscode ()
{
  return this->statuscode_;
}

void bkm_counterpart::
statuscode (const statuscode_type& x)
{
  this->statuscode_.set (x);
}

void bkm_counterpart::
statuscode (const statuscode_optional& x)
{
  this->statuscode_ = x;
}

void bkm_counterpart::
statuscode (::std::unique_ptr< statuscode_type > x)
{
  this->statuscode_.set (std::move (x));
}

const bkm_counterpart::desc_optional& bkm_counterpart::
desc () const
{
  return this->desc_;
}

bkm_counterpart::desc_optional& bkm_counterpart::
desc ()
{
  return this->desc_;
}

void bkm_counterpart::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void bkm_counterpart::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void bkm_counterpart::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const bkm_counterpart::note_optional& bkm_counterpart::
note () const
{
  return this->note_;
}

bkm_counterpart::note_optional& bkm_counterpart::
note ()
{
  return this->note_;
}

void bkm_counterpart::
note (const note_type& x)
{
  this->note_.set (x);
}

void bkm_counterpart::
note (const note_optional& x)
{
  this->note_ = x;
}

void bkm_counterpart::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const bkm_counterpart::remark_optional& bkm_counterpart::
remark () const
{
  return this->remark_;
}

bkm_counterpart::remark_optional& bkm_counterpart::
remark ()
{
  return this->remark_;
}

void bkm_counterpart::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void bkm_counterpart::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void bkm_counterpart::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}


// bkm_project
// 

const bkm_project::bkm_part_sequence& bkm_project::
bkm_part () const
{
  return this->bkm_part_;
}

bkm_project::bkm_part_sequence& bkm_project::
bkm_part ()
{
  return this->bkm_part_;
}

void bkm_project::
bkm_part (const bkm_part_sequence& s)
{
  this->bkm_part_ = s;
}

const bkm_project::bkm_splititem_sequence& bkm_project::
bkm_splititem () const
{
  return this->bkm_splititem_;
}

bkm_project::bkm_splititem_sequence& bkm_project::
bkm_splititem ()
{
  return this->bkm_splititem_;
}

void bkm_project::
bkm_splititem (const bkm_splititem_sequence& s)
{
  this->bkm_splititem_ = s;
}

const bkm_project::bkm_placing_sequence& bkm_project::
bkm_placing () const
{
  return this->bkm_placing_;
}

bkm_project::bkm_placing_sequence& bkm_project::
bkm_placing ()
{
  return this->bkm_placing_;
}

void bkm_project::
bkm_placing (const bkm_placing_sequence& s)
{
  this->bkm_placing_ = s;
}

const bkm_project::bkm_revision_sequence& bkm_project::
bkm_revision () const
{
  return this->bkm_revision_;
}

bkm_project::bkm_revision_sequence& bkm_project::
bkm_revision ()
{
  return this->bkm_revision_;
}

void bkm_project::
bkm_revision (const bkm_revision_sequence& s)
{
  this->bkm_revision_ = s;
}

const bkm_project::bkm_order_sequence& bkm_project::
bkm_order () const
{
  return this->bkm_order_;
}

bkm_project::bkm_order_sequence& bkm_project::
bkm_order ()
{
  return this->bkm_order_;
}

void bkm_project::
bkm_order (const bkm_order_sequence& s)
{
  this->bkm_order_ = s;
}

const bkm_project::bkm_addition_sequence& bkm_project::
bkm_addition () const
{
  return this->bkm_addition_;
}

bkm_project::bkm_addition_sequence& bkm_project::
bkm_addition ()
{
  return this->bkm_addition_;
}

void bkm_project::
bkm_addition (const bkm_addition_sequence& s)
{
  this->bkm_addition_ = s;
}

const bkm_project::bkm_evident_sequence& bkm_project::
bkm_evident () const
{
  return this->bkm_evident_;
}

bkm_project::bkm_evident_sequence& bkm_project::
bkm_evident ()
{
  return this->bkm_evident_;
}

void bkm_project::
bkm_evident (const bkm_evident_sequence& s)
{
  this->bkm_evident_ = s;
}

const bkm_project::bkm_invoice_sequence& bkm_project::
bkm_invoice () const
{
  return this->bkm_invoice_;
}

bkm_project::bkm_invoice_sequence& bkm_project::
bkm_invoice ()
{
  return this->bkm_invoice_;
}

void bkm_project::
bkm_invoice (const bkm_invoice_sequence& s)
{
  this->bkm_invoice_ = s;
}

const bkm_project::bkm_payment_sequence& bkm_project::
bkm_payment () const
{
  return this->bkm_payment_;
}

bkm_project::bkm_payment_sequence& bkm_project::
bkm_payment ()
{
  return this->bkm_payment_;
}

void bkm_project::
bkm_payment (const bkm_payment_sequence& s)
{
  this->bkm_payment_ = s;
}

const bkm_project::bkm_backup_sequence& bkm_project::
bkm_backup () const
{
  return this->bkm_backup_;
}

bkm_project::bkm_backup_sequence& bkm_project::
bkm_backup ()
{
  return this->bkm_backup_;
}

void bkm_project::
bkm_backup (const bkm_backup_sequence& s)
{
  this->bkm_backup_ = s;
}

const bkm_project::ava_order_sequence& bkm_project::
ava_order () const
{
  return this->ava_order_;
}

bkm_project::ava_order_sequence& bkm_project::
ava_order ()
{
  return this->ava_order_;
}

void bkm_project::
ava_order (const ava_order_sequence& s)
{
  this->ava_order_ = s;
}

const bkm_project::ret_order_sequence& bkm_project::
ret_order () const
{
  return this->ret_order_;
}

bkm_project::ret_order_sequence& bkm_project::
ret_order ()
{
  return this->ret_order_;
}

void bkm_project::
ret_order (const ret_order_sequence& s)
{
  this->ret_order_ = s;
}

const bkm_project::ret_invoice_sequence& bkm_project::
ret_invoice () const
{
  return this->ret_invoice_;
}

bkm_project::ret_invoice_sequence& bkm_project::
ret_invoice ()
{
  return this->ret_invoice_;
}

void bkm_project::
ret_invoice (const ret_invoice_sequence& s)
{
  this->ret_invoice_ = s;
}

const bkm_project::ret_payment_sequence& bkm_project::
ret_payment () const
{
  return this->ret_payment_;
}

bkm_project::ret_payment_sequence& bkm_project::
ret_payment ()
{
  return this->ret_payment_;
}

void bkm_project::
ret_payment (const ret_payment_sequence& s)
{
  this->ret_payment_ = s;
}

const bkm_project::bkm_document_sequence& bkm_project::
bkm_document () const
{
  return this->bkm_document_;
}

bkm_project::bkm_document_sequence& bkm_project::
bkm_document ()
{
  return this->bkm_document_;
}

void bkm_project::
bkm_document (const bkm_document_sequence& s)
{
  this->bkm_document_ = s;
}

const bkm_project::bkm_keyvalue_sequence& bkm_project::
bkm_keyvalue () const
{
  return this->bkm_keyvalue_;
}

bkm_project::bkm_keyvalue_sequence& bkm_project::
bkm_keyvalue ()
{
  return this->bkm_keyvalue_;
}

void bkm_project::
bkm_keyvalue (const bkm_keyvalue_sequence& s)
{
  this->bkm_keyvalue_ = s;
}

const bkm_project::id_optional& bkm_project::
id () const
{
  return this->id_;
}

bkm_project::id_optional& bkm_project::
id ()
{
  return this->id_;
}

void bkm_project::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_project::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_project::external_optional& bkm_project::
external () const
{
  return this->external_;
}

bkm_project::external_optional& bkm_project::
external ()
{
  return this->external_;
}

void bkm_project::
external (const external_type& x)
{
  this->external_.set (x);
}

void bkm_project::
external (const external_optional& x)
{
  this->external_ = x;
}

void bkm_project::
external (::std::unique_ptr< external_type > x)
{
  this->external_.set (std::move (x));
}

const bkm_project::externalkey_type& bkm_project::
externalkey () const
{
  return this->externalkey_.get ();
}

bkm_project::externalkey_type& bkm_project::
externalkey ()
{
  return this->externalkey_.get ();
}

void bkm_project::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void bkm_project::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const bkm_project::matchfield_optional& bkm_project::
matchfield () const
{
  return this->matchfield_;
}

bkm_project::matchfield_optional& bkm_project::
matchfield ()
{
  return this->matchfield_;
}

void bkm_project::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void bkm_project::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void bkm_project::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const bkm_project::controlcode_optional& bkm_project::
controlcode () const
{
  return this->controlcode_;
}

bkm_project::controlcode_optional& bkm_project::
controlcode ()
{
  return this->controlcode_;
}

void bkm_project::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void bkm_project::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void bkm_project::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const bkm_project::managerkey_optional& bkm_project::
managerkey () const
{
  return this->managerkey_;
}

bkm_project::managerkey_optional& bkm_project::
managerkey ()
{
  return this->managerkey_;
}

void bkm_project::
managerkey (const managerkey_type& x)
{
  this->managerkey_.set (x);
}

void bkm_project::
managerkey (const managerkey_optional& x)
{
  this->managerkey_ = x;
}

void bkm_project::
managerkey (::std::unique_ptr< managerkey_type > x)
{
  this->managerkey_.set (std::move (x));
}

const bkm_project::code_optional& bkm_project::
code () const
{
  return this->code_;
}

bkm_project::code_optional& bkm_project::
code ()
{
  return this->code_;
}

void bkm_project::
code (const code_type& x)
{
  this->code_.set (x);
}

void bkm_project::
code (const code_optional& x)
{
  this->code_ = x;
}

void bkm_project::
code (::std::unique_ptr< code_type > x)
{
  this->code_.set (std::move (x));
}

const bkm_project::part_optional& bkm_project::
part () const
{
  return this->part_;
}

bkm_project::part_optional& bkm_project::
part ()
{
  return this->part_;
}

void bkm_project::
part (const part_type& x)
{
  this->part_.set (x);
}

void bkm_project::
part (const part_optional& x)
{
  this->part_ = x;
}

void bkm_project::
part (::std::unique_ptr< part_type > x)
{
  this->part_.set (std::move (x));
}

const bkm_project::number_optional& bkm_project::
number () const
{
  return this->number_;
}

bkm_project::number_optional& bkm_project::
number ()
{
  return this->number_;
}

void bkm_project::
number (const number_type& x)
{
  this->number_.set (x);
}

void bkm_project::
number (const number_optional& x)
{
  this->number_ = x;
}

void bkm_project::
number (::std::unique_ptr< number_type > x)
{
  this->number_.set (std::move (x));
}

const bkm_project::projectstart_optional& bkm_project::
projectstart () const
{
  return this->projectstart_;
}

bkm_project::projectstart_optional& bkm_project::
projectstart ()
{
  return this->projectstart_;
}

void bkm_project::
projectstart (const projectstart_type& x)
{
  this->projectstart_.set (x);
}

void bkm_project::
projectstart (const projectstart_optional& x)
{
  this->projectstart_ = x;
}

void bkm_project::
projectstart (::std::unique_ptr< projectstart_type > x)
{
  this->projectstart_.set (std::move (x));
}

const bkm_project::projectend_optional& bkm_project::
projectend () const
{
  return this->projectend_;
}

bkm_project::projectend_optional& bkm_project::
projectend ()
{
  return this->projectend_;
}

void bkm_project::
projectend (const projectend_type& x)
{
  this->projectend_.set (x);
}

void bkm_project::
projectend (const projectend_optional& x)
{
  this->projectend_ = x;
}

void bkm_project::
projectend (::std::unique_ptr< projectend_type > x)
{
  this->projectend_.set (std::move (x));
}

const bkm_project::currency_optional& bkm_project::
currency () const
{
  return this->currency_;
}

bkm_project::currency_optional& bkm_project::
currency ()
{
  return this->currency_;
}

void bkm_project::
currency (const currency_type& x)
{
  this->currency_.set (x);
}

void bkm_project::
currency (const currency_optional& x)
{
  this->currency_ = x;
}

void bkm_project::
currency (::std::unique_ptr< currency_type > x)
{
  this->currency_.set (std::move (x));
}

const bkm_project::currencykey_optional& bkm_project::
currencykey () const
{
  return this->currencykey_;
}

bkm_project::currencykey_optional& bkm_project::
currencykey ()
{
  return this->currencykey_;
}

void bkm_project::
currencykey (const currencykey_type& x)
{
  this->currencykey_.set (x);
}

void bkm_project::
currencykey (const currencykey_optional& x)
{
  this->currencykey_ = x;
}

void bkm_project::
currencykey (::std::unique_ptr< currencykey_type > x)
{
  this->currencykey_.set (std::move (x));
}

const bkm_project::orderercode_optional& bkm_project::
orderercode () const
{
  return this->orderercode_;
}

bkm_project::orderercode_optional& bkm_project::
orderercode ()
{
  return this->orderercode_;
}

void bkm_project::
orderercode (const orderercode_type& x)
{
  this->orderercode_.set (x);
}

void bkm_project::
orderercode (const orderercode_optional& x)
{
  this->orderercode_ = x;
}

void bkm_project::
orderercode (::std::unique_ptr< orderercode_type > x)
{
  this->orderercode_.set (std::move (x));
}

const bkm_project::ordererkey_optional& bkm_project::
ordererkey () const
{
  return this->ordererkey_;
}

bkm_project::ordererkey_optional& bkm_project::
ordererkey ()
{
  return this->ordererkey_;
}

void bkm_project::
ordererkey (const ordererkey_type& x)
{
  this->ordererkey_.set (x);
}

void bkm_project::
ordererkey (const ordererkey_optional& x)
{
  this->ordererkey_ = x;
}

void bkm_project::
ordererkey (::std::unique_ptr< ordererkey_type > x)
{
  this->ordererkey_.set (std::move (x));
}

const bkm_project::ordererkeyid_optional& bkm_project::
ordererkeyid () const
{
  return this->ordererkeyid_;
}

bkm_project::ordererkeyid_optional& bkm_project::
ordererkeyid ()
{
  return this->ordererkeyid_;
}

void bkm_project::
ordererkeyid (const ordererkeyid_type& x)
{
  this->ordererkeyid_.set (x);
}

void bkm_project::
ordererkeyid (const ordererkeyid_optional& x)
{
  this->ordererkeyid_ = x;
}

void bkm_project::
ordererkeyid (::std::unique_ptr< ordererkeyid_type > x)
{
  this->ordererkeyid_.set (std::move (x));
}

const bkm_project::city_optional& bkm_project::
city () const
{
  return this->city_;
}

bkm_project::city_optional& bkm_project::
city ()
{
  return this->city_;
}

void bkm_project::
city (const city_type& x)
{
  this->city_.set (x);
}

void bkm_project::
city (const city_optional& x)
{
  this->city_ = x;
}

void bkm_project::
city (::std::unique_ptr< city_type > x)
{
  this->city_.set (std::move (x));
}

const bkm_project::zipcode_optional& bkm_project::
zipcode () const
{
  return this->zipcode_;
}

bkm_project::zipcode_optional& bkm_project::
zipcode ()
{
  return this->zipcode_;
}

void bkm_project::
zipcode (const zipcode_type& x)
{
  this->zipcode_.set (x);
}

void bkm_project::
zipcode (const zipcode_optional& x)
{
  this->zipcode_ = x;
}

void bkm_project::
zipcode (::std::unique_ptr< zipcode_type > x)
{
  this->zipcode_.set (std::move (x));
}

const bkm_project::street_optional& bkm_project::
street () const
{
  return this->street_;
}

bkm_project::street_optional& bkm_project::
street ()
{
  return this->street_;
}

void bkm_project::
street (const street_type& x)
{
  this->street_.set (x);
}

void bkm_project::
street (const street_optional& x)
{
  this->street_ = x;
}

void bkm_project::
street (::std::unique_ptr< street_type > x)
{
  this->street_.set (std::move (x));
}

const bkm_project::statecode_optional& bkm_project::
statecode () const
{
  return this->statecode_;
}

bkm_project::statecode_optional& bkm_project::
statecode ()
{
  return this->statecode_;
}

void bkm_project::
statecode (const statecode_type& x)
{
  this->statecode_.set (x);
}

void bkm_project::
statecode (const statecode_optional& x)
{
  this->statecode_ = x;
}

void bkm_project::
statecode (::std::unique_ptr< statecode_type > x)
{
  this->statecode_.set (std::move (x));
}

const bkm_project::statuscode_optional& bkm_project::
statuscode () const
{
  return this->statuscode_;
}

bkm_project::statuscode_optional& bkm_project::
statuscode ()
{
  return this->statuscode_;
}

void bkm_project::
statuscode (const statuscode_type& x)
{
  this->statuscode_.set (x);
}

void bkm_project::
statuscode (const statuscode_optional& x)
{
  this->statuscode_ = x;
}

void bkm_project::
statuscode (::std::unique_ptr< statuscode_type > x)
{
  this->statuscode_.set (std::move (x));
}

const bkm_project::groupcode_optional& bkm_project::
groupcode () const
{
  return this->groupcode_;
}

bkm_project::groupcode_optional& bkm_project::
groupcode ()
{
  return this->groupcode_;
}

void bkm_project::
groupcode (const groupcode_type& x)
{
  this->groupcode_.set (x);
}

void bkm_project::
groupcode (const groupcode_optional& x)
{
  this->groupcode_ = x;
}

void bkm_project::
groupcode (::std::unique_ptr< groupcode_type > x)
{
  this->groupcode_.set (std::move (x));
}

const bkm_project::parishcode_optional& bkm_project::
parishcode () const
{
  return this->parishcode_;
}

bkm_project::parishcode_optional& bkm_project::
parishcode ()
{
  return this->parishcode_;
}

void bkm_project::
parishcode (const parishcode_type& x)
{
  this->parishcode_.set (x);
}

void bkm_project::
parishcode (const parishcode_optional& x)
{
  this->parishcode_ = x;
}

void bkm_project::
parishcode (::std::unique_ptr< parishcode_type > x)
{
  this->parishcode_.set (std::move (x));
}

const bkm_project::parishcode1_optional& bkm_project::
parishcode1 () const
{
  return this->parishcode1_;
}

bkm_project::parishcode1_optional& bkm_project::
parishcode1 ()
{
  return this->parishcode1_;
}

void bkm_project::
parishcode1 (const parishcode1_type& x)
{
  this->parishcode1_.set (x);
}

void bkm_project::
parishcode1 (const parishcode1_optional& x)
{
  this->parishcode1_ = x;
}

void bkm_project::
parishcode1 (::std::unique_ptr< parishcode1_type > x)
{
  this->parishcode1_.set (std::move (x));
}

const bkm_project::parishcode2_optional& bkm_project::
parishcode2 () const
{
  return this->parishcode2_;
}

bkm_project::parishcode2_optional& bkm_project::
parishcode2 ()
{
  return this->parishcode2_;
}

void bkm_project::
parishcode2 (const parishcode2_type& x)
{
  this->parishcode2_.set (x);
}

void bkm_project::
parishcode2 (const parishcode2_optional& x)
{
  this->parishcode2_ = x;
}

void bkm_project::
parishcode2 (::std::unique_ptr< parishcode2_type > x)
{
  this->parishcode2_.set (std::move (x));
}

const bkm_project::parishcode3_optional& bkm_project::
parishcode3 () const
{
  return this->parishcode3_;
}

bkm_project::parishcode3_optional& bkm_project::
parishcode3 ()
{
  return this->parishcode3_;
}

void bkm_project::
parishcode3 (const parishcode3_type& x)
{
  this->parishcode3_.set (x);
}

void bkm_project::
parishcode3 (const parishcode3_optional& x)
{
  this->parishcode3_ = x;
}

void bkm_project::
parishcode3 (::std::unique_ptr< parishcode3_type > x)
{
  this->parishcode3_.set (std::move (x));
}

const bkm_project::parishcode4_optional& bkm_project::
parishcode4 () const
{
  return this->parishcode4_;
}

bkm_project::parishcode4_optional& bkm_project::
parishcode4 ()
{
  return this->parishcode4_;
}

void bkm_project::
parishcode4 (const parishcode4_type& x)
{
  this->parishcode4_.set (x);
}

void bkm_project::
parishcode4 (const parishcode4_optional& x)
{
  this->parishcode4_ = x;
}

void bkm_project::
parishcode4 (::std::unique_ptr< parishcode4_type > x)
{
  this->parishcode4_.set (std::move (x));
}

const bkm_project::returnreal_optional& bkm_project::
returnreal () const
{
  return this->returnreal_;
}

bkm_project::returnreal_optional& bkm_project::
returnreal ()
{
  return this->returnreal_;
}

void bkm_project::
returnreal (const returnreal_type& x)
{
  this->returnreal_.set (x);
}

void bkm_project::
returnreal (const returnreal_optional& x)
{
  this->returnreal_ = x;
}

void bkm_project::
returnreal (::std::unique_ptr< returnreal_type > x)
{
  this->returnreal_.set (std::move (x));
}

const bkm_project::returnsold_optional& bkm_project::
returnsold () const
{
  return this->returnsold_;
}

bkm_project::returnsold_optional& bkm_project::
returnsold ()
{
  return this->returnsold_;
}

void bkm_project::
returnsold (const returnsold_type& x)
{
  this->returnsold_.set (x);
}

void bkm_project::
returnsold (const returnsold_optional& x)
{
  this->returnsold_ = x;
}

void bkm_project::
returnsold (::std::unique_ptr< returnsold_type > x)
{
  this->returnsold_.set (std::move (x));
}

const bkm_project::vatprz_optional& bkm_project::
vatprz () const
{
  return this->vatprz_;
}

bkm_project::vatprz_optional& bkm_project::
vatprz ()
{
  return this->vatprz_;
}

void bkm_project::
vatprz (const vatprz_type& x)
{
  this->vatprz_.set (x);
}

void bkm_project::
vatprz (const vatprz_optional& x)
{
  this->vatprz_ = x;
}

void bkm_project::
vatprz (::std::unique_ptr< vatprz_type > x)
{
  this->vatprz_.set (std::move (x));
}

const bkm_project::extern1_optional& bkm_project::
extern1 () const
{
  return this->extern1_;
}

bkm_project::extern1_optional& bkm_project::
extern1 ()
{
  return this->extern1_;
}

void bkm_project::
extern1 (const extern1_type& x)
{
  this->extern1_.set (x);
}

void bkm_project::
extern1 (const extern1_optional& x)
{
  this->extern1_ = x;
}

void bkm_project::
extern1 (::std::unique_ptr< extern1_type > x)
{
  this->extern1_.set (std::move (x));
}

const bkm_project::extern2_optional& bkm_project::
extern2 () const
{
  return this->extern2_;
}

bkm_project::extern2_optional& bkm_project::
extern2 ()
{
  return this->extern2_;
}

void bkm_project::
extern2 (const extern2_type& x)
{
  this->extern2_.set (x);
}

void bkm_project::
extern2 (const extern2_optional& x)
{
  this->extern2_ = x;
}

void bkm_project::
extern2 (::std::unique_ptr< extern2_type > x)
{
  this->extern2_.set (std::move (x));
}

const bkm_project::extern3_optional& bkm_project::
extern3 () const
{
  return this->extern3_;
}

bkm_project::extern3_optional& bkm_project::
extern3 ()
{
  return this->extern3_;
}

void bkm_project::
extern3 (const extern3_type& x)
{
  this->extern3_.set (x);
}

void bkm_project::
extern3 (const extern3_optional& x)
{
  this->extern3_ = x;
}

void bkm_project::
extern3 (::std::unique_ptr< extern3_type > x)
{
  this->extern3_.set (std::move (x));
}

const bkm_project::userfield1_optional& bkm_project::
userfield1 () const
{
  return this->userfield1_;
}

bkm_project::userfield1_optional& bkm_project::
userfield1 ()
{
  return this->userfield1_;
}

void bkm_project::
userfield1 (const userfield1_type& x)
{
  this->userfield1_.set (x);
}

void bkm_project::
userfield1 (const userfield1_optional& x)
{
  this->userfield1_ = x;
}

void bkm_project::
userfield1 (::std::unique_ptr< userfield1_type > x)
{
  this->userfield1_.set (std::move (x));
}

const bkm_project::userfield2_optional& bkm_project::
userfield2 () const
{
  return this->userfield2_;
}

bkm_project::userfield2_optional& bkm_project::
userfield2 ()
{
  return this->userfield2_;
}

void bkm_project::
userfield2 (const userfield2_type& x)
{
  this->userfield2_.set (x);
}

void bkm_project::
userfield2 (const userfield2_optional& x)
{
  this->userfield2_ = x;
}

void bkm_project::
userfield2 (::std::unique_ptr< userfield2_type > x)
{
  this->userfield2_.set (std::move (x));
}

const bkm_project::userfield3_optional& bkm_project::
userfield3 () const
{
  return this->userfield3_;
}

bkm_project::userfield3_optional& bkm_project::
userfield3 ()
{
  return this->userfield3_;
}

void bkm_project::
userfield3 (const userfield3_type& x)
{
  this->userfield3_.set (x);
}

void bkm_project::
userfield3 (const userfield3_optional& x)
{
  this->userfield3_ = x;
}

void bkm_project::
userfield3 (::std::unique_ptr< userfield3_type > x)
{
  this->userfield3_.set (std::move (x));
}

const bkm_project::user_optional& bkm_project::
user () const
{
  return this->user_;
}

bkm_project::user_optional& bkm_project::
user ()
{
  return this->user_;
}

void bkm_project::
user (const user_type& x)
{
  this->user_.set (x);
}

void bkm_project::
user (const user_optional& x)
{
  this->user_ = x;
}

void bkm_project::
user (::std::unique_ptr< user_type > x)
{
  this->user_.set (std::move (x));
}

const bkm_project::desc_optional& bkm_project::
desc () const
{
  return this->desc_;
}

bkm_project::desc_optional& bkm_project::
desc ()
{
  return this->desc_;
}

void bkm_project::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void bkm_project::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void bkm_project::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const bkm_project::note_optional& bkm_project::
note () const
{
  return this->note_;
}

bkm_project::note_optional& bkm_project::
note ()
{
  return this->note_;
}

void bkm_project::
note (const note_type& x)
{
  this->note_.set (x);
}

void bkm_project::
note (const note_optional& x)
{
  this->note_ = x;
}

void bkm_project::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const bkm_project::remark_optional& bkm_project::
remark () const
{
  return this->remark_;
}

bkm_project::remark_optional& bkm_project::
remark ()
{
  return this->remark_;
}

void bkm_project::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void bkm_project::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void bkm_project::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}


// bkm_part
// 

const bkm_part::id_optional& bkm_part::
id () const
{
  return this->id_;
}

bkm_part::id_optional& bkm_part::
id ()
{
  return this->id_;
}

void bkm_part::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_part::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_part::externalkey_type& bkm_part::
externalkey () const
{
  return this->externalkey_.get ();
}

bkm_part::externalkey_type& bkm_part::
externalkey ()
{
  return this->externalkey_.get ();
}

void bkm_part::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void bkm_part::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const bkm_part::projectkey_optional& bkm_part::
projectkey () const
{
  return this->projectkey_;
}

bkm_part::projectkey_optional& bkm_part::
projectkey ()
{
  return this->projectkey_;
}

void bkm_part::
projectkey (const projectkey_type& x)
{
  this->projectkey_.set (x);
}

void bkm_part::
projectkey (const projectkey_optional& x)
{
  this->projectkey_ = x;
}

void bkm_part::
projectkey (::std::unique_ptr< projectkey_type > x)
{
  this->projectkey_.set (std::move (x));
}

const bkm_part::parishkey1_optional& bkm_part::
parishkey1 () const
{
  return this->parishkey1_;
}

bkm_part::parishkey1_optional& bkm_part::
parishkey1 ()
{
  return this->parishkey1_;
}

void bkm_part::
parishkey1 (const parishkey1_type& x)
{
  this->parishkey1_.set (x);
}

void bkm_part::
parishkey1 (const parishkey1_optional& x)
{
  this->parishkey1_ = x;
}

void bkm_part::
parishkey1 (::std::unique_ptr< parishkey1_type > x)
{
  this->parishkey1_.set (std::move (x));
}

const bkm_part::parishkey2_optional& bkm_part::
parishkey2 () const
{
  return this->parishkey2_;
}

bkm_part::parishkey2_optional& bkm_part::
parishkey2 ()
{
  return this->parishkey2_;
}

void bkm_part::
parishkey2 (const parishkey2_type& x)
{
  this->parishkey2_.set (x);
}

void bkm_part::
parishkey2 (const parishkey2_optional& x)
{
  this->parishkey2_ = x;
}

void bkm_part::
parishkey2 (::std::unique_ptr< parishkey2_type > x)
{
  this->parishkey2_.set (std::move (x));
}

const bkm_part::returnreal_optional& bkm_part::
returnreal () const
{
  return this->returnreal_;
}

bkm_part::returnreal_optional& bkm_part::
returnreal ()
{
  return this->returnreal_;
}

void bkm_part::
returnreal (const returnreal_type& x)
{
  this->returnreal_.set (x);
}

void bkm_part::
returnreal (const returnreal_optional& x)
{
  this->returnreal_ = x;
}

void bkm_part::
returnreal (::std::unique_ptr< returnreal_type > x)
{
  this->returnreal_.set (std::move (x));
}

const bkm_part::returnsold_optional& bkm_part::
returnsold () const
{
  return this->returnsold_;
}

bkm_part::returnsold_optional& bkm_part::
returnsold ()
{
  return this->returnsold_;
}

void bkm_part::
returnsold (const returnsold_type& x)
{
  this->returnsold_.set (x);
}

void bkm_part::
returnsold (const returnsold_optional& x)
{
  this->returnsold_ = x;
}

void bkm_part::
returnsold (::std::unique_ptr< returnsold_type > x)
{
  this->returnsold_.set (std::move (x));
}

const bkm_part::matchfield_optional& bkm_part::
matchfield () const
{
  return this->matchfield_;
}

bkm_part::matchfield_optional& bkm_part::
matchfield ()
{
  return this->matchfield_;
}

void bkm_part::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void bkm_part::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void bkm_part::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const bkm_part::controlcode_optional& bkm_part::
controlcode () const
{
  return this->controlcode_;
}

bkm_part::controlcode_optional& bkm_part::
controlcode ()
{
  return this->controlcode_;
}

void bkm_part::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void bkm_part::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void bkm_part::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const bkm_part::code_optional& bkm_part::
code () const
{
  return this->code_;
}

bkm_part::code_optional& bkm_part::
code ()
{
  return this->code_;
}

void bkm_part::
code (const code_type& x)
{
  this->code_.set (x);
}

void bkm_part::
code (const code_optional& x)
{
  this->code_ = x;
}

void bkm_part::
code (::std::unique_ptr< code_type > x)
{
  this->code_.set (std::move (x));
}

const bkm_part::part_optional& bkm_part::
part () const
{
  return this->part_;
}

bkm_part::part_optional& bkm_part::
part ()
{
  return this->part_;
}

void bkm_part::
part (const part_type& x)
{
  this->part_.set (x);
}

void bkm_part::
part (const part_optional& x)
{
  this->part_ = x;
}

void bkm_part::
part (::std::unique_ptr< part_type > x)
{
  this->part_.set (std::move (x));
}

const bkm_part::partstart_optional& bkm_part::
partstart () const
{
  return this->partstart_;
}

bkm_part::partstart_optional& bkm_part::
partstart ()
{
  return this->partstart_;
}

void bkm_part::
partstart (const partstart_type& x)
{
  this->partstart_.set (x);
}

void bkm_part::
partstart (const partstart_optional& x)
{
  this->partstart_ = x;
}

void bkm_part::
partstart (::std::unique_ptr< partstart_type > x)
{
  this->partstart_.set (std::move (x));
}

const bkm_part::partend_optional& bkm_part::
partend () const
{
  return this->partend_;
}

bkm_part::partend_optional& bkm_part::
partend ()
{
  return this->partend_;
}

void bkm_part::
partend (const partend_type& x)
{
  this->partend_.set (x);
}

void bkm_part::
partend (const partend_optional& x)
{
  this->partend_ = x;
}

void bkm_part::
partend (::std::unique_ptr< partend_type > x)
{
  this->partend_.set (std::move (x));
}

const bkm_part::currency_optional& bkm_part::
currency () const
{
  return this->currency_;
}

bkm_part::currency_optional& bkm_part::
currency ()
{
  return this->currency_;
}

void bkm_part::
currency (const currency_type& x)
{
  this->currency_.set (x);
}

void bkm_part::
currency (const currency_optional& x)
{
  this->currency_ = x;
}

void bkm_part::
currency (::std::unique_ptr< currency_type > x)
{
  this->currency_.set (std::move (x));
}

const bkm_part::number_optional& bkm_part::
number () const
{
  return this->number_;
}

bkm_part::number_optional& bkm_part::
number ()
{
  return this->number_;
}

void bkm_part::
number (const number_type& x)
{
  this->number_.set (x);
}

void bkm_part::
number (const number_optional& x)
{
  this->number_ = x;
}

void bkm_part::
number (::std::unique_ptr< number_type > x)
{
  this->number_.set (std::move (x));
}

const bkm_part::city_optional& bkm_part::
city () const
{
  return this->city_;
}

bkm_part::city_optional& bkm_part::
city ()
{
  return this->city_;
}

void bkm_part::
city (const city_type& x)
{
  this->city_.set (x);
}

void bkm_part::
city (const city_optional& x)
{
  this->city_ = x;
}

void bkm_part::
city (::std::unique_ptr< city_type > x)
{
  this->city_.set (std::move (x));
}

const bkm_part::zipcode_optional& bkm_part::
zipcode () const
{
  return this->zipcode_;
}

bkm_part::zipcode_optional& bkm_part::
zipcode ()
{
  return this->zipcode_;
}

void bkm_part::
zipcode (const zipcode_type& x)
{
  this->zipcode_.set (x);
}

void bkm_part::
zipcode (const zipcode_optional& x)
{
  this->zipcode_ = x;
}

void bkm_part::
zipcode (::std::unique_ptr< zipcode_type > x)
{
  this->zipcode_.set (std::move (x));
}

const bkm_part::street_optional& bkm_part::
street () const
{
  return this->street_;
}

bkm_part::street_optional& bkm_part::
street ()
{
  return this->street_;
}

void bkm_part::
street (const street_type& x)
{
  this->street_.set (x);
}

void bkm_part::
street (const street_optional& x)
{
  this->street_ = x;
}

void bkm_part::
street (::std::unique_ptr< street_type > x)
{
  this->street_.set (std::move (x));
}

const bkm_part::statecode_optional& bkm_part::
statecode () const
{
  return this->statecode_;
}

bkm_part::statecode_optional& bkm_part::
statecode ()
{
  return this->statecode_;
}

void bkm_part::
statecode (const statecode_type& x)
{
  this->statecode_.set (x);
}

void bkm_part::
statecode (const statecode_optional& x)
{
  this->statecode_ = x;
}

void bkm_part::
statecode (::std::unique_ptr< statecode_type > x)
{
  this->statecode_.set (std::move (x));
}

const bkm_part::deliverycode_optional& bkm_part::
deliverycode () const
{
  return this->deliverycode_;
}

bkm_part::deliverycode_optional& bkm_part::
deliverycode ()
{
  return this->deliverycode_;
}

void bkm_part::
deliverycode (const deliverycode_type& x)
{
  this->deliverycode_.set (x);
}

void bkm_part::
deliverycode (const deliverycode_optional& x)
{
  this->deliverycode_ = x;
}

void bkm_part::
deliverycode (::std::unique_ptr< deliverycode_type > x)
{
  this->deliverycode_.set (std::move (x));
}

const bkm_part::typecode_optional& bkm_part::
typecode () const
{
  return this->typecode_;
}

bkm_part::typecode_optional& bkm_part::
typecode ()
{
  return this->typecode_;
}

void bkm_part::
typecode (const typecode_type& x)
{
  this->typecode_.set (x);
}

void bkm_part::
typecode (const typecode_optional& x)
{
  this->typecode_ = x;
}

void bkm_part::
typecode (::std::unique_ptr< typecode_type > x)
{
  this->typecode_.set (std::move (x));
}

const bkm_part::statuscode_optional& bkm_part::
statuscode () const
{
  return this->statuscode_;
}

bkm_part::statuscode_optional& bkm_part::
statuscode ()
{
  return this->statuscode_;
}

void bkm_part::
statuscode (const statuscode_type& x)
{
  this->statuscode_.set (x);
}

void bkm_part::
statuscode (const statuscode_optional& x)
{
  this->statuscode_ = x;
}

void bkm_part::
statuscode (::std::unique_ptr< statuscode_type > x)
{
  this->statuscode_.set (std::move (x));
}

const bkm_part::groupcode_optional& bkm_part::
groupcode () const
{
  return this->groupcode_;
}

bkm_part::groupcode_optional& bkm_part::
groupcode ()
{
  return this->groupcode_;
}

void bkm_part::
groupcode (const groupcode_type& x)
{
  this->groupcode_.set (x);
}

void bkm_part::
groupcode (const groupcode_optional& x)
{
  this->groupcode_ = x;
}

void bkm_part::
groupcode (::std::unique_ptr< groupcode_type > x)
{
  this->groupcode_.set (std::move (x));
}

const bkm_part::vatprz_optional& bkm_part::
vatprz () const
{
  return this->vatprz_;
}

bkm_part::vatprz_optional& bkm_part::
vatprz ()
{
  return this->vatprz_;
}

void bkm_part::
vatprz (const vatprz_type& x)
{
  this->vatprz_.set (x);
}

void bkm_part::
vatprz (const vatprz_optional& x)
{
  this->vatprz_ = x;
}

void bkm_part::
vatprz (::std::unique_ptr< vatprz_type > x)
{
  this->vatprz_.set (std::move (x));
}

const bkm_part::extern1_optional& bkm_part::
extern1 () const
{
  return this->extern1_;
}

bkm_part::extern1_optional& bkm_part::
extern1 ()
{
  return this->extern1_;
}

void bkm_part::
extern1 (const extern1_type& x)
{
  this->extern1_.set (x);
}

void bkm_part::
extern1 (const extern1_optional& x)
{
  this->extern1_ = x;
}

void bkm_part::
extern1 (::std::unique_ptr< extern1_type > x)
{
  this->extern1_.set (std::move (x));
}

const bkm_part::extern2_optional& bkm_part::
extern2 () const
{
  return this->extern2_;
}

bkm_part::extern2_optional& bkm_part::
extern2 ()
{
  return this->extern2_;
}

void bkm_part::
extern2 (const extern2_type& x)
{
  this->extern2_.set (x);
}

void bkm_part::
extern2 (const extern2_optional& x)
{
  this->extern2_ = x;
}

void bkm_part::
extern2 (::std::unique_ptr< extern2_type > x)
{
  this->extern2_.set (std::move (x));
}

const bkm_part::extern3_optional& bkm_part::
extern3 () const
{
  return this->extern3_;
}

bkm_part::extern3_optional& bkm_part::
extern3 ()
{
  return this->extern3_;
}

void bkm_part::
extern3 (const extern3_type& x)
{
  this->extern3_.set (x);
}

void bkm_part::
extern3 (const extern3_optional& x)
{
  this->extern3_ = x;
}

void bkm_part::
extern3 (::std::unique_ptr< extern3_type > x)
{
  this->extern3_.set (std::move (x));
}

const bkm_part::userfield1_optional& bkm_part::
userfield1 () const
{
  return this->userfield1_;
}

bkm_part::userfield1_optional& bkm_part::
userfield1 ()
{
  return this->userfield1_;
}

void bkm_part::
userfield1 (const userfield1_type& x)
{
  this->userfield1_.set (x);
}

void bkm_part::
userfield1 (const userfield1_optional& x)
{
  this->userfield1_ = x;
}

void bkm_part::
userfield1 (::std::unique_ptr< userfield1_type > x)
{
  this->userfield1_.set (std::move (x));
}

const bkm_part::userfield2_optional& bkm_part::
userfield2 () const
{
  return this->userfield2_;
}

bkm_part::userfield2_optional& bkm_part::
userfield2 ()
{
  return this->userfield2_;
}

void bkm_part::
userfield2 (const userfield2_type& x)
{
  this->userfield2_.set (x);
}

void bkm_part::
userfield2 (const userfield2_optional& x)
{
  this->userfield2_ = x;
}

void bkm_part::
userfield2 (::std::unique_ptr< userfield2_type > x)
{
  this->userfield2_.set (std::move (x));
}

const bkm_part::userfield3_optional& bkm_part::
userfield3 () const
{
  return this->userfield3_;
}

bkm_part::userfield3_optional& bkm_part::
userfield3 ()
{
  return this->userfield3_;
}

void bkm_part::
userfield3 (const userfield3_type& x)
{
  this->userfield3_.set (x);
}

void bkm_part::
userfield3 (const userfield3_optional& x)
{
  this->userfield3_ = x;
}

void bkm_part::
userfield3 (::std::unique_ptr< userfield3_type > x)
{
  this->userfield3_.set (std::move (x));
}

const bkm_part::user_optional& bkm_part::
user () const
{
  return this->user_;
}

bkm_part::user_optional& bkm_part::
user ()
{
  return this->user_;
}

void bkm_part::
user (const user_type& x)
{
  this->user_.set (x);
}

void bkm_part::
user (const user_optional& x)
{
  this->user_ = x;
}

void bkm_part::
user (::std::unique_ptr< user_type > x)
{
  this->user_.set (std::move (x));
}

const bkm_part::desc_optional& bkm_part::
desc () const
{
  return this->desc_;
}

bkm_part::desc_optional& bkm_part::
desc ()
{
  return this->desc_;
}

void bkm_part::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void bkm_part::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void bkm_part::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const bkm_part::note_optional& bkm_part::
note () const
{
  return this->note_;
}

bkm_part::note_optional& bkm_part::
note ()
{
  return this->note_;
}

void bkm_part::
note (const note_type& x)
{
  this->note_.set (x);
}

void bkm_part::
note (const note_optional& x)
{
  this->note_ = x;
}

void bkm_part::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const bkm_part::remark_optional& bkm_part::
remark () const
{
  return this->remark_;
}

bkm_part::remark_optional& bkm_part::
remark ()
{
  return this->remark_;
}

void bkm_part::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void bkm_part::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void bkm_part::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}


// bkm_splititem
// 

const bkm_splititem::id_optional& bkm_splititem::
id () const
{
  return this->id_;
}

bkm_splititem::id_optional& bkm_splititem::
id ()
{
  return this->id_;
}

void bkm_splititem::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_splititem::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_splititem::code_optional& bkm_splititem::
code () const
{
  return this->code_;
}

bkm_splititem::code_optional& bkm_splititem::
code ()
{
  return this->code_;
}

void bkm_splititem::
code (const code_type& x)
{
  this->code_.set (x);
}

void bkm_splititem::
code (const code_optional& x)
{
  this->code_ = x;
}

void bkm_splititem::
code (::std::unique_ptr< code_type > x)
{
  this->code_.set (std::move (x));
}

const bkm_splititem::name_optional& bkm_splititem::
name () const
{
  return this->name_;
}

bkm_splititem::name_optional& bkm_splititem::
name ()
{
  return this->name_;
}

void bkm_splititem::
name (const name_type& x)
{
  this->name_.set (x);
}

void bkm_splititem::
name (const name_optional& x)
{
  this->name_ = x;
}

void bkm_splititem::
name (::std::unique_ptr< name_type > x)
{
  this->name_.set (std::move (x));
}

const bkm_splititem::splitcode_optional& bkm_splititem::
splitcode () const
{
  return this->splitcode_;
}

bkm_splititem::splitcode_optional& bkm_splititem::
splitcode ()
{
  return this->splitcode_;
}

void bkm_splititem::
splitcode (const splitcode_type& x)
{
  this->splitcode_.set (x);
}

void bkm_splititem::
splitcode (const splitcode_optional& x)
{
  this->splitcode_ = x;
}

void bkm_splititem::
splitcode (::std::unique_ptr< splitcode_type > x)
{
  this->splitcode_.set (std::move (x));
}


// bkm_placing
// 

const bkm_placing::id_optional& bkm_placing::
id () const
{
  return this->id_;
}

bkm_placing::id_optional& bkm_placing::
id ()
{
  return this->id_;
}

void bkm_placing::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_placing::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_placing::externalkey_type& bkm_placing::
externalkey () const
{
  return this->externalkey_.get ();
}

bkm_placing::externalkey_type& bkm_placing::
externalkey ()
{
  return this->externalkey_.get ();
}

void bkm_placing::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void bkm_placing::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const bkm_placing::projectkey_optional& bkm_placing::
projectkey () const
{
  return this->projectkey_;
}

bkm_placing::projectkey_optional& bkm_placing::
projectkey ()
{
  return this->projectkey_;
}

void bkm_placing::
projectkey (const projectkey_type& x)
{
  this->projectkey_.set (x);
}

void bkm_placing::
projectkey (const projectkey_optional& x)
{
  this->projectkey_ = x;
}

void bkm_placing::
projectkey (::std::unique_ptr< projectkey_type > x)
{
  this->projectkey_.set (std::move (x));
}

const bkm_placing::partcode_optional& bkm_placing::
partcode () const
{
  return this->partcode_;
}

bkm_placing::partcode_optional& bkm_placing::
partcode ()
{
  return this->partcode_;
}

void bkm_placing::
partcode (const partcode_type& x)
{
  this->partcode_.set (x);
}

void bkm_placing::
partcode (const partcode_optional& x)
{
  this->partcode_ = x;
}

void bkm_placing::
partcode (::std::unique_ptr< partcode_type > x)
{
  this->partcode_.set (std::move (x));
}

const bkm_placing::partcode1_optional& bkm_placing::
partcode1 () const
{
  return this->partcode1_;
}

bkm_placing::partcode1_optional& bkm_placing::
partcode1 ()
{
  return this->partcode1_;
}

void bkm_placing::
partcode1 (const partcode1_type& x)
{
  this->partcode1_.set (x);
}

void bkm_placing::
partcode1 (const partcode1_optional& x)
{
  this->partcode1_ = x;
}

void bkm_placing::
partcode1 (::std::unique_ptr< partcode1_type > x)
{
  this->partcode1_.set (std::move (x));
}

const bkm_placing::matchfield_optional& bkm_placing::
matchfield () const
{
  return this->matchfield_;
}

bkm_placing::matchfield_optional& bkm_placing::
matchfield ()
{
  return this->matchfield_;
}

void bkm_placing::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void bkm_placing::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void bkm_placing::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const bkm_placing::controlcode_optional& bkm_placing::
controlcode () const
{
  return this->controlcode_;
}

bkm_placing::controlcode_optional& bkm_placing::
controlcode ()
{
  return this->controlcode_;
}

void bkm_placing::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void bkm_placing::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void bkm_placing::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const bkm_placing::code_optional& bkm_placing::
code () const
{
  return this->code_;
}

bkm_placing::code_optional& bkm_placing::
code ()
{
  return this->code_;
}

void bkm_placing::
code (const code_type& x)
{
  this->code_.set (x);
}

void bkm_placing::
code (const code_optional& x)
{
  this->code_ = x;
}

void bkm_placing::
code (::std::unique_ptr< code_type > x)
{
  this->code_.set (std::move (x));
}

const bkm_placing::placing_optional& bkm_placing::
placing () const
{
  return this->placing_;
}

bkm_placing::placing_optional& bkm_placing::
placing ()
{
  return this->placing_;
}

void bkm_placing::
placing (const placing_type& x)
{
  this->placing_.set (x);
}

void bkm_placing::
placing (const placing_optional& x)
{
  this->placing_ = x;
}

void bkm_placing::
placing (::std::unique_ptr< placing_type > x)
{
  this->placing_.set (std::move (x));
}

const bkm_placing::extern1_optional& bkm_placing::
extern1 () const
{
  return this->extern1_;
}

bkm_placing::extern1_optional& bkm_placing::
extern1 ()
{
  return this->extern1_;
}

void bkm_placing::
extern1 (const extern1_type& x)
{
  this->extern1_.set (x);
}

void bkm_placing::
extern1 (const extern1_optional& x)
{
  this->extern1_ = x;
}

void bkm_placing::
extern1 (::std::unique_ptr< extern1_type > x)
{
  this->extern1_.set (std::move (x));
}

const bkm_placing::extern2_optional& bkm_placing::
extern2 () const
{
  return this->extern2_;
}

bkm_placing::extern2_optional& bkm_placing::
extern2 ()
{
  return this->extern2_;
}

void bkm_placing::
extern2 (const extern2_type& x)
{
  this->extern2_.set (x);
}

void bkm_placing::
extern2 (const extern2_optional& x)
{
  this->extern2_ = x;
}

void bkm_placing::
extern2 (::std::unique_ptr< extern2_type > x)
{
  this->extern2_.set (std::move (x));
}

const bkm_placing::extern3_optional& bkm_placing::
extern3 () const
{
  return this->extern3_;
}

bkm_placing::extern3_optional& bkm_placing::
extern3 ()
{
  return this->extern3_;
}

void bkm_placing::
extern3 (const extern3_type& x)
{
  this->extern3_.set (x);
}

void bkm_placing::
extern3 (const extern3_optional& x)
{
  this->extern3_ = x;
}

void bkm_placing::
extern3 (::std::unique_ptr< extern3_type > x)
{
  this->extern3_.set (std::move (x));
}

const bkm_placing::budget_optional& bkm_placing::
budget () const
{
  return this->budget_;
}

bkm_placing::budget_optional& bkm_placing::
budget ()
{
  return this->budget_;
}

void bkm_placing::
budget (const budget_type& x)
{
  this->budget_.set (x);
}

void bkm_placing::
budget (const budget_optional& x)
{
  this->budget_ = x;
}

void bkm_placing::
budget (::std::unique_ptr< budget_type > x)
{
  this->budget_.set (std::move (x));
}

const bkm_placing::budgetcustom_optional& bkm_placing::
budgetcustom () const
{
  return this->budgetcustom_;
}

bkm_placing::budgetcustom_optional& bkm_placing::
budgetcustom ()
{
  return this->budgetcustom_;
}

void bkm_placing::
budgetcustom (const budgetcustom_type& x)
{
  this->budgetcustom_.set (x);
}

void bkm_placing::
budgetcustom (const budgetcustom_optional& x)
{
  this->budgetcustom_ = x;
}

void bkm_placing::
budgetcustom (::std::unique_ptr< budgetcustom_type > x)
{
  this->budgetcustom_.set (std::move (x));
}

const bkm_placing::lstgstart_optional& bkm_placing::
lstgstart () const
{
  return this->lstgstart_;
}

bkm_placing::lstgstart_optional& bkm_placing::
lstgstart ()
{
  return this->lstgstart_;
}

void bkm_placing::
lstgstart (const lstgstart_type& x)
{
  this->lstgstart_.set (x);
}

void bkm_placing::
lstgstart (const lstgstart_optional& x)
{
  this->lstgstart_ = x;
}

void bkm_placing::
lstgstart (::std::unique_ptr< lstgstart_type > x)
{
  this->lstgstart_.set (std::move (x));
}

const bkm_placing::lstgend_optional& bkm_placing::
lstgend () const
{
  return this->lstgend_;
}

bkm_placing::lstgend_optional& bkm_placing::
lstgend ()
{
  return this->lstgend_;
}

void bkm_placing::
lstgend (const lstgend_type& x)
{
  this->lstgend_.set (x);
}

void bkm_placing::
lstgend (const lstgend_optional& x)
{
  this->lstgend_ = x;
}

void bkm_placing::
lstgend (::std::unique_ptr< lstgend_type > x)
{
  this->lstgend_.set (std::move (x));
}

const bkm_placing::vatprz_optional& bkm_placing::
vatprz () const
{
  return this->vatprz_;
}

bkm_placing::vatprz_optional& bkm_placing::
vatprz ()
{
  return this->vatprz_;
}

void bkm_placing::
vatprz (const vatprz_type& x)
{
  this->vatprz_.set (x);
}

void bkm_placing::
vatprz (const vatprz_optional& x)
{
  this->vatprz_ = x;
}

void bkm_placing::
vatprz (::std::unique_ptr< vatprz_type > x)
{
  this->vatprz_.set (std::move (x));
}

const bkm_placing::costobjectcode_optional& bkm_placing::
costobjectcode () const
{
  return this->costobjectcode_;
}

bkm_placing::costobjectcode_optional& bkm_placing::
costobjectcode ()
{
  return this->costobjectcode_;
}

void bkm_placing::
costobjectcode (const costobjectcode_type& x)
{
  this->costobjectcode_.set (x);
}

void bkm_placing::
costobjectcode (const costobjectcode_optional& x)
{
  this->costobjectcode_ = x;
}

void bkm_placing::
costobjectcode (::std::unique_ptr< costobjectcode_type > x)
{
  this->costobjectcode_.set (std::move (x));
}

const bkm_placing::costobjectname_optional& bkm_placing::
costobjectname () const
{
  return this->costobjectname_;
}

bkm_placing::costobjectname_optional& bkm_placing::
costobjectname ()
{
  return this->costobjectname_;
}

void bkm_placing::
costobjectname (const costobjectname_type& x)
{
  this->costobjectname_.set (x);
}

void bkm_placing::
costobjectname (const costobjectname_optional& x)
{
  this->costobjectname_ = x;
}

void bkm_placing::
costobjectname (::std::unique_ptr< costobjectname_type > x)
{
  this->costobjectname_.set (std::move (x));
}

const bkm_placing::costunitcode1_optional& bkm_placing::
costunitcode1 () const
{
  return this->costunitcode1_;
}

bkm_placing::costunitcode1_optional& bkm_placing::
costunitcode1 ()
{
  return this->costunitcode1_;
}

void bkm_placing::
costunitcode1 (const costunitcode1_type& x)
{
  this->costunitcode1_.set (x);
}

void bkm_placing::
costunitcode1 (const costunitcode1_optional& x)
{
  this->costunitcode1_ = x;
}

void bkm_placing::
costunitcode1 (::std::unique_ptr< costunitcode1_type > x)
{
  this->costunitcode1_.set (std::move (x));
}

const bkm_placing::costunitname1_optional& bkm_placing::
costunitname1 () const
{
  return this->costunitname1_;
}

bkm_placing::costunitname1_optional& bkm_placing::
costunitname1 ()
{
  return this->costunitname1_;
}

void bkm_placing::
costunitname1 (const costunitname1_type& x)
{
  this->costunitname1_.set (x);
}

void bkm_placing::
costunitname1 (const costunitname1_optional& x)
{
  this->costunitname1_ = x;
}

void bkm_placing::
costunitname1 (::std::unique_ptr< costunitname1_type > x)
{
  this->costunitname1_.set (std::move (x));
}

const bkm_placing::costunitcode2_optional& bkm_placing::
costunitcode2 () const
{
  return this->costunitcode2_;
}

bkm_placing::costunitcode2_optional& bkm_placing::
costunitcode2 ()
{
  return this->costunitcode2_;
}

void bkm_placing::
costunitcode2 (const costunitcode2_type& x)
{
  this->costunitcode2_.set (x);
}

void bkm_placing::
costunitcode2 (const costunitcode2_optional& x)
{
  this->costunitcode2_ = x;
}

void bkm_placing::
costunitcode2 (::std::unique_ptr< costunitcode2_type > x)
{
  this->costunitcode2_.set (std::move (x));
}

const bkm_placing::costunitname2_optional& bkm_placing::
costunitname2 () const
{
  return this->costunitname2_;
}

bkm_placing::costunitname2_optional& bkm_placing::
costunitname2 ()
{
  return this->costunitname2_;
}

void bkm_placing::
costunitname2 (const costunitname2_type& x)
{
  this->costunitname2_.set (x);
}

void bkm_placing::
costunitname2 (const costunitname2_optional& x)
{
  this->costunitname2_ = x;
}

void bkm_placing::
costunitname2 (::std::unique_ptr< costunitname2_type > x)
{
  this->costunitname2_.set (std::move (x));
}

const bkm_placing::statuscode_optional& bkm_placing::
statuscode () const
{
  return this->statuscode_;
}

bkm_placing::statuscode_optional& bkm_placing::
statuscode ()
{
  return this->statuscode_;
}

void bkm_placing::
statuscode (const statuscode_type& x)
{
  this->statuscode_.set (x);
}

void bkm_placing::
statuscode (const statuscode_optional& x)
{
  this->statuscode_ = x;
}

void bkm_placing::
statuscode (::std::unique_ptr< statuscode_type > x)
{
  this->statuscode_.set (std::move (x));
}

const bkm_placing::statusname_optional& bkm_placing::
statusname () const
{
  return this->statusname_;
}

bkm_placing::statusname_optional& bkm_placing::
statusname ()
{
  return this->statusname_;
}

void bkm_placing::
statusname (const statusname_type& x)
{
  this->statusname_.set (x);
}

void bkm_placing::
statusname (const statusname_optional& x)
{
  this->statusname_ = x;
}

void bkm_placing::
statusname (::std::unique_ptr< statusname_type > x)
{
  this->statusname_.set (std::move (x));
}

const bkm_placing::groupcode_optional& bkm_placing::
groupcode () const
{
  return this->groupcode_;
}

bkm_placing::groupcode_optional& bkm_placing::
groupcode ()
{
  return this->groupcode_;
}

void bkm_placing::
groupcode (const groupcode_type& x)
{
  this->groupcode_.set (x);
}

void bkm_placing::
groupcode (const groupcode_optional& x)
{
  this->groupcode_ = x;
}

void bkm_placing::
groupcode (::std::unique_ptr< groupcode_type > x)
{
  this->groupcode_.set (std::move (x));
}

const bkm_placing::groupname_optional& bkm_placing::
groupname () const
{
  return this->groupname_;
}

bkm_placing::groupname_optional& bkm_placing::
groupname ()
{
  return this->groupname_;
}

void bkm_placing::
groupname (const groupname_type& x)
{
  this->groupname_.set (x);
}

void bkm_placing::
groupname (const groupname_optional& x)
{
  this->groupname_ = x;
}

void bkm_placing::
groupname (::std::unique_ptr< groupname_type > x)
{
  this->groupname_.set (std::move (x));
}

const bkm_placing::userfield1_optional& bkm_placing::
userfield1 () const
{
  return this->userfield1_;
}

bkm_placing::userfield1_optional& bkm_placing::
userfield1 ()
{
  return this->userfield1_;
}

void bkm_placing::
userfield1 (const userfield1_type& x)
{
  this->userfield1_.set (x);
}

void bkm_placing::
userfield1 (const userfield1_optional& x)
{
  this->userfield1_ = x;
}

void bkm_placing::
userfield1 (::std::unique_ptr< userfield1_type > x)
{
  this->userfield1_.set (std::move (x));
}

const bkm_placing::userfield2_optional& bkm_placing::
userfield2 () const
{
  return this->userfield2_;
}

bkm_placing::userfield2_optional& bkm_placing::
userfield2 ()
{
  return this->userfield2_;
}

void bkm_placing::
userfield2 (const userfield2_type& x)
{
  this->userfield2_.set (x);
}

void bkm_placing::
userfield2 (const userfield2_optional& x)
{
  this->userfield2_ = x;
}

void bkm_placing::
userfield2 (::std::unique_ptr< userfield2_type > x)
{
  this->userfield2_.set (std::move (x));
}

const bkm_placing::userfield3_optional& bkm_placing::
userfield3 () const
{
  return this->userfield3_;
}

bkm_placing::userfield3_optional& bkm_placing::
userfield3 ()
{
  return this->userfield3_;
}

void bkm_placing::
userfield3 (const userfield3_type& x)
{
  this->userfield3_.set (x);
}

void bkm_placing::
userfield3 (const userfield3_optional& x)
{
  this->userfield3_ = x;
}

void bkm_placing::
userfield3 (::std::unique_ptr< userfield3_type > x)
{
  this->userfield3_.set (std::move (x));
}

const bkm_placing::desc_optional& bkm_placing::
desc () const
{
  return this->desc_;
}

bkm_placing::desc_optional& bkm_placing::
desc ()
{
  return this->desc_;
}

void bkm_placing::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void bkm_placing::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void bkm_placing::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const bkm_placing::note_optional& bkm_placing::
note () const
{
  return this->note_;
}

bkm_placing::note_optional& bkm_placing::
note ()
{
  return this->note_;
}

void bkm_placing::
note (const note_type& x)
{
  this->note_.set (x);
}

void bkm_placing::
note (const note_optional& x)
{
  this->note_ = x;
}

void bkm_placing::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const bkm_placing::remark_optional& bkm_placing::
remark () const
{
  return this->remark_;
}

bkm_placing::remark_optional& bkm_placing::
remark ()
{
  return this->remark_;
}

void bkm_placing::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void bkm_placing::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void bkm_placing::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}


// bkm_revision
// 

const bkm_revision::bkm_revisionitem_sequence& bkm_revision::
bkm_revisionitem () const
{
  return this->bkm_revisionitem_;
}

bkm_revision::bkm_revisionitem_sequence& bkm_revision::
bkm_revisionitem ()
{
  return this->bkm_revisionitem_;
}

void bkm_revision::
bkm_revisionitem (const bkm_revisionitem_sequence& s)
{
  this->bkm_revisionitem_ = s;
}

const bkm_revision::ret_revisionitem_sequence& bkm_revision::
ret_revisionitem () const
{
  return this->ret_revisionitem_;
}

bkm_revision::ret_revisionitem_sequence& bkm_revision::
ret_revisionitem ()
{
  return this->ret_revisionitem_;
}

void bkm_revision::
ret_revisionitem (const ret_revisionitem_sequence& s)
{
  this->ret_revisionitem_ = s;
}

const bkm_revision::id_optional& bkm_revision::
id () const
{
  return this->id_;
}

bkm_revision::id_optional& bkm_revision::
id ()
{
  return this->id_;
}

void bkm_revision::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_revision::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_revision::externalkey_type& bkm_revision::
externalkey () const
{
  return this->externalkey_.get ();
}

bkm_revision::externalkey_type& bkm_revision::
externalkey ()
{
  return this->externalkey_.get ();
}

void bkm_revision::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void bkm_revision::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const bkm_revision::projectkey_optional& bkm_revision::
projectkey () const
{
  return this->projectkey_;
}

bkm_revision::projectkey_optional& bkm_revision::
projectkey ()
{
  return this->projectkey_;
}

void bkm_revision::
projectkey (const projectkey_type& x)
{
  this->projectkey_.set (x);
}

void bkm_revision::
projectkey (const projectkey_optional& x)
{
  this->projectkey_ = x;
}

void bkm_revision::
projectkey (::std::unique_ptr< projectkey_type > x)
{
  this->projectkey_.set (std::move (x));
}

const bkm_revision::matchfield_optional& bkm_revision::
matchfield () const
{
  return this->matchfield_;
}

bkm_revision::matchfield_optional& bkm_revision::
matchfield ()
{
  return this->matchfield_;
}

void bkm_revision::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void bkm_revision::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void bkm_revision::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const bkm_revision::controlcode_optional& bkm_revision::
controlcode () const
{
  return this->controlcode_;
}

bkm_revision::controlcode_optional& bkm_revision::
controlcode ()
{
  return this->controlcode_;
}

void bkm_revision::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void bkm_revision::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void bkm_revision::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const bkm_revision::number_optional& bkm_revision::
number () const
{
  return this->number_;
}

bkm_revision::number_optional& bkm_revision::
number ()
{
  return this->number_;
}

void bkm_revision::
number (const number_type& x)
{
  this->number_.set (x);
}

void bkm_revision::
number (const number_optional& x)
{
  this->number_ = x;
}

void bkm_revision::
number (::std::unique_ptr< number_type > x)
{
  this->number_.set (std::move (x));
}

const bkm_revision::releasenumber_optional& bkm_revision::
releasenumber () const
{
  return this->releasenumber_;
}

bkm_revision::releasenumber_optional& bkm_revision::
releasenumber ()
{
  return this->releasenumber_;
}

void bkm_revision::
releasenumber (const releasenumber_type& x)
{
  this->releasenumber_.set (x);
}

void bkm_revision::
releasenumber (const releasenumber_optional& x)
{
  this->releasenumber_ = x;
}

void bkm_revision::
releasenumber (::std::unique_ptr< releasenumber_type > x)
{
  this->releasenumber_.set (std::move (x));
}

const bkm_revision::extern1_optional& bkm_revision::
extern1 () const
{
  return this->extern1_;
}

bkm_revision::extern1_optional& bkm_revision::
extern1 ()
{
  return this->extern1_;
}

void bkm_revision::
extern1 (const extern1_type& x)
{
  this->extern1_.set (x);
}

void bkm_revision::
extern1 (const extern1_optional& x)
{
  this->extern1_ = x;
}

void bkm_revision::
extern1 (::std::unique_ptr< extern1_type > x)
{
  this->extern1_.set (std::move (x));
}

const bkm_revision::extern2_optional& bkm_revision::
extern2 () const
{
  return this->extern2_;
}

bkm_revision::extern2_optional& bkm_revision::
extern2 ()
{
  return this->extern2_;
}

void bkm_revision::
extern2 (const extern2_type& x)
{
  this->extern2_.set (x);
}

void bkm_revision::
extern2 (const extern2_optional& x)
{
  this->extern2_ = x;
}

void bkm_revision::
extern2 (::std::unique_ptr< extern2_type > x)
{
  this->extern2_.set (std::move (x));
}

const bkm_revision::extern3_optional& bkm_revision::
extern3 () const
{
  return this->extern3_;
}

bkm_revision::extern3_optional& bkm_revision::
extern3 ()
{
  return this->extern3_;
}

void bkm_revision::
extern3 (const extern3_type& x)
{
  this->extern3_.set (x);
}

void bkm_revision::
extern3 (const extern3_optional& x)
{
  this->extern3_ = x;
}

void bkm_revision::
extern3 (::std::unique_ptr< extern3_type > x)
{
  this->extern3_.set (std::move (x));
}

const bkm_revision::revision_optional& bkm_revision::
revision () const
{
  return this->revision_;
}

bkm_revision::revision_optional& bkm_revision::
revision ()
{
  return this->revision_;
}

void bkm_revision::
revision (const revision_type& x)
{
  this->revision_.set (x);
}

void bkm_revision::
revision (const revision_optional& x)
{
  this->revision_ = x;
}

void bkm_revision::
revision (::std::unique_ptr< revision_type > x)
{
  this->revision_.set (std::move (x));
}

const bkm_revision::dateeffect_optional& bkm_revision::
dateeffect () const
{
  return this->dateeffect_;
}

bkm_revision::dateeffect_optional& bkm_revision::
dateeffect ()
{
  return this->dateeffect_;
}

void bkm_revision::
dateeffect (const dateeffect_type& x)
{
  this->dateeffect_.set (x);
}

void bkm_revision::
dateeffect (const dateeffect_optional& x)
{
  this->dateeffect_ = x;
}

void bkm_revision::
dateeffect (::std::unique_ptr< dateeffect_type > x)
{
  this->dateeffect_.set (std::move (x));
}

const bkm_revision::releasedby_optional& bkm_revision::
releasedby () const
{
  return this->releasedby_;
}

bkm_revision::releasedby_optional& bkm_revision::
releasedby ()
{
  return this->releasedby_;
}

void bkm_revision::
releasedby (const releasedby_type& x)
{
  this->releasedby_.set (x);
}

void bkm_revision::
releasedby (const releasedby_optional& x)
{
  this->releasedby_ = x;
}

void bkm_revision::
releasedby (::std::unique_ptr< releasedby_type > x)
{
  this->releasedby_.set (std::move (x));
}

const bkm_revision::revisionbtr_optional& bkm_revision::
revisionbtr () const
{
  return this->revisionbtr_;
}

bkm_revision::revisionbtr_optional& bkm_revision::
revisionbtr ()
{
  return this->revisionbtr_;
}

void bkm_revision::
revisionbtr (const revisionbtr_type& x)
{
  this->revisionbtr_.set (x);
}

void bkm_revision::
revisionbtr (const revisionbtr_optional& x)
{
  this->revisionbtr_ = x;
}

void bkm_revision::
revisionbtr (::std::unique_ptr< revisionbtr_type > x)
{
  this->revisionbtr_.set (std::move (x));
}

const bkm_revision::releasedbtr_optional& bkm_revision::
releasedbtr () const
{
  return this->releasedbtr_;
}

bkm_revision::releasedbtr_optional& bkm_revision::
releasedbtr ()
{
  return this->releasedbtr_;
}

void bkm_revision::
releasedbtr (const releasedbtr_type& x)
{
  this->releasedbtr_.set (x);
}

void bkm_revision::
releasedbtr (const releasedbtr_optional& x)
{
  this->releasedbtr_ = x;
}

void bkm_revision::
releasedbtr (::std::unique_ptr< releasedbtr_type > x)
{
  this->releasedbtr_.set (std::move (x));
}

const bkm_revision::requestdate_optional& bkm_revision::
requestdate () const
{
  return this->requestdate_;
}

bkm_revision::requestdate_optional& bkm_revision::
requestdate ()
{
  return this->requestdate_;
}

void bkm_revision::
requestdate (const requestdate_type& x)
{
  this->requestdate_.set (x);
}

void bkm_revision::
requestdate (const requestdate_optional& x)
{
  this->requestdate_ = x;
}

void bkm_revision::
requestdate (::std::unique_ptr< requestdate_type > x)
{
  this->requestdate_.set (std::move (x));
}

const bkm_revision::releasedate_optional& bkm_revision::
releasedate () const
{
  return this->releasedate_;
}

bkm_revision::releasedate_optional& bkm_revision::
releasedate ()
{
  return this->releasedate_;
}

void bkm_revision::
releasedate (const releasedate_type& x)
{
  this->releasedate_.set (x);
}

void bkm_revision::
releasedate (const releasedate_optional& x)
{
  this->releasedate_ = x;
}

void bkm_revision::
releasedate (::std::unique_ptr< releasedate_type > x)
{
  this->releasedate_.set (std::move (x));
}

const bkm_revision::vatprz_optional& bkm_revision::
vatprz () const
{
  return this->vatprz_;
}

bkm_revision::vatprz_optional& bkm_revision::
vatprz ()
{
  return this->vatprz_;
}

void bkm_revision::
vatprz (const vatprz_type& x)
{
  this->vatprz_.set (x);
}

void bkm_revision::
vatprz (const vatprz_optional& x)
{
  this->vatprz_ = x;
}

void bkm_revision::
vatprz (::std::unique_ptr< vatprz_type > x)
{
  this->vatprz_.set (std::move (x));
}

const bkm_revision::statuscode_optional& bkm_revision::
statuscode () const
{
  return this->statuscode_;
}

bkm_revision::statuscode_optional& bkm_revision::
statuscode ()
{
  return this->statuscode_;
}

void bkm_revision::
statuscode (const statuscode_type& x)
{
  this->statuscode_.set (x);
}

void bkm_revision::
statuscode (const statuscode_optional& x)
{
  this->statuscode_ = x;
}

void bkm_revision::
statuscode (::std::unique_ptr< statuscode_type > x)
{
  this->statuscode_.set (std::move (x));
}

const bkm_revision::statusname_optional& bkm_revision::
statusname () const
{
  return this->statusname_;
}

bkm_revision::statusname_optional& bkm_revision::
statusname ()
{
  return this->statusname_;
}

void bkm_revision::
statusname (const statusname_type& x)
{
  this->statusname_.set (x);
}

void bkm_revision::
statusname (const statusname_optional& x)
{
  this->statusname_ = x;
}

void bkm_revision::
statusname (::std::unique_ptr< statusname_type > x)
{
  this->statusname_.set (std::move (x));
}

const bkm_revision::statusinfo_optional& bkm_revision::
statusinfo () const
{
  return this->statusinfo_;
}

bkm_revision::statusinfo_optional& bkm_revision::
statusinfo ()
{
  return this->statusinfo_;
}

void bkm_revision::
statusinfo (const statusinfo_type& x)
{
  this->statusinfo_.set (x);
}

void bkm_revision::
statusinfo (const statusinfo_optional& x)
{
  this->statusinfo_ = x;
}

void bkm_revision::
statusinfo (::std::unique_ptr< statusinfo_type > x)
{
  this->statusinfo_.set (std::move (x));
}

const bkm_revision::statusinfodate_optional& bkm_revision::
statusinfodate () const
{
  return this->statusinfodate_;
}

bkm_revision::statusinfodate_optional& bkm_revision::
statusinfodate ()
{
  return this->statusinfodate_;
}

void bkm_revision::
statusinfodate (const statusinfodate_type& x)
{
  this->statusinfodate_.set (x);
}

void bkm_revision::
statusinfodate (const statusinfodate_optional& x)
{
  this->statusinfodate_ = x;
}

void bkm_revision::
statusinfodate (::std::unique_ptr< statusinfodate_type > x)
{
  this->statusinfodate_.set (std::move (x));
}

const bkm_revision::statusinfouser_optional& bkm_revision::
statusinfouser () const
{
  return this->statusinfouser_;
}

bkm_revision::statusinfouser_optional& bkm_revision::
statusinfouser ()
{
  return this->statusinfouser_;
}

void bkm_revision::
statusinfouser (const statusinfouser_type& x)
{
  this->statusinfouser_.set (x);
}

void bkm_revision::
statusinfouser (const statusinfouser_optional& x)
{
  this->statusinfouser_ = x;
}

void bkm_revision::
statusinfouser (::std::unique_ptr< statusinfouser_type > x)
{
  this->statusinfouser_.set (std::move (x));
}

const bkm_revision::groupcode_optional& bkm_revision::
groupcode () const
{
  return this->groupcode_;
}

bkm_revision::groupcode_optional& bkm_revision::
groupcode ()
{
  return this->groupcode_;
}

void bkm_revision::
groupcode (const groupcode_type& x)
{
  this->groupcode_.set (x);
}

void bkm_revision::
groupcode (const groupcode_optional& x)
{
  this->groupcode_ = x;
}

void bkm_revision::
groupcode (::std::unique_ptr< groupcode_type > x)
{
  this->groupcode_.set (std::move (x));
}

const bkm_revision::groupname_optional& bkm_revision::
groupname () const
{
  return this->groupname_;
}

bkm_revision::groupname_optional& bkm_revision::
groupname ()
{
  return this->groupname_;
}

void bkm_revision::
groupname (const groupname_type& x)
{
  this->groupname_.set (x);
}

void bkm_revision::
groupname (const groupname_optional& x)
{
  this->groupname_ = x;
}

void bkm_revision::
groupname (::std::unique_ptr< groupname_type > x)
{
  this->groupname_.set (std::move (x));
}

const bkm_revision::categorycode_optional& bkm_revision::
categorycode () const
{
  return this->categorycode_;
}

bkm_revision::categorycode_optional& bkm_revision::
categorycode ()
{
  return this->categorycode_;
}

void bkm_revision::
categorycode (const categorycode_type& x)
{
  this->categorycode_.set (x);
}

void bkm_revision::
categorycode (const categorycode_optional& x)
{
  this->categorycode_ = x;
}

void bkm_revision::
categorycode (::std::unique_ptr< categorycode_type > x)
{
  this->categorycode_.set (std::move (x));
}

const bkm_revision::categoryname_optional& bkm_revision::
categoryname () const
{
  return this->categoryname_;
}

bkm_revision::categoryname_optional& bkm_revision::
categoryname ()
{
  return this->categoryname_;
}

void bkm_revision::
categoryname (const categoryname_type& x)
{
  this->categoryname_.set (x);
}

void bkm_revision::
categoryname (const categoryname_optional& x)
{
  this->categoryname_ = x;
}

void bkm_revision::
categoryname (::std::unique_ptr< categoryname_type > x)
{
  this->categoryname_.set (std::move (x));
}

const bkm_revision::requestercode_optional& bkm_revision::
requestercode () const
{
  return this->requestercode_;
}

bkm_revision::requestercode_optional& bkm_revision::
requestercode ()
{
  return this->requestercode_;
}

void bkm_revision::
requestercode (const requestercode_type& x)
{
  this->requestercode_.set (x);
}

void bkm_revision::
requestercode (const requestercode_optional& x)
{
  this->requestercode_ = x;
}

void bkm_revision::
requestercode (::std::unique_ptr< requestercode_type > x)
{
  this->requestercode_.set (std::move (x));
}

const bkm_revision::requesterkey_optional& bkm_revision::
requesterkey () const
{
  return this->requesterkey_;
}

bkm_revision::requesterkey_optional& bkm_revision::
requesterkey ()
{
  return this->requesterkey_;
}

void bkm_revision::
requesterkey (const requesterkey_type& x)
{
  this->requesterkey_.set (x);
}

void bkm_revision::
requesterkey (const requesterkey_optional& x)
{
  this->requesterkey_ = x;
}

void bkm_revision::
requesterkey (::std::unique_ptr< requesterkey_type > x)
{
  this->requesterkey_.set (std::move (x));
}

const bkm_revision::requesterkeyid_optional& bkm_revision::
requesterkeyid () const
{
  return this->requesterkeyid_;
}

bkm_revision::requesterkeyid_optional& bkm_revision::
requesterkeyid ()
{
  return this->requesterkeyid_;
}

void bkm_revision::
requesterkeyid (const requesterkeyid_type& x)
{
  this->requesterkeyid_.set (x);
}

void bkm_revision::
requesterkeyid (const requesterkeyid_optional& x)
{
  this->requesterkeyid_ = x;
}

void bkm_revision::
requesterkeyid (::std::unique_ptr< requesterkeyid_type > x)
{
  this->requesterkeyid_.set (std::move (x));
}

const bkm_revision::causercode_optional& bkm_revision::
causercode () const
{
  return this->causercode_;
}

bkm_revision::causercode_optional& bkm_revision::
causercode ()
{
  return this->causercode_;
}

void bkm_revision::
causercode (const causercode_type& x)
{
  this->causercode_.set (x);
}

void bkm_revision::
causercode (const causercode_optional& x)
{
  this->causercode_ = x;
}

void bkm_revision::
causercode (::std::unique_ptr< causercode_type > x)
{
  this->causercode_.set (std::move (x));
}

const bkm_revision::causerkey_optional& bkm_revision::
causerkey () const
{
  return this->causerkey_;
}

bkm_revision::causerkey_optional& bkm_revision::
causerkey ()
{
  return this->causerkey_;
}

void bkm_revision::
causerkey (const causerkey_type& x)
{
  this->causerkey_.set (x);
}

void bkm_revision::
causerkey (const causerkey_optional& x)
{
  this->causerkey_ = x;
}

void bkm_revision::
causerkey (::std::unique_ptr< causerkey_type > x)
{
  this->causerkey_.set (std::move (x));
}

const bkm_revision::causerkeyid_optional& bkm_revision::
causerkeyid () const
{
  return this->causerkeyid_;
}

bkm_revision::causerkeyid_optional& bkm_revision::
causerkeyid ()
{
  return this->causerkeyid_;
}

void bkm_revision::
causerkeyid (const causerkeyid_type& x)
{
  this->causerkeyid_.set (x);
}

void bkm_revision::
causerkeyid (const causerkeyid_optional& x)
{
  this->causerkeyid_ = x;
}

void bkm_revision::
causerkeyid (::std::unique_ptr< causerkeyid_type > x)
{
  this->causerkeyid_.set (std::move (x));
}

const bkm_revision::desc_optional& bkm_revision::
desc () const
{
  return this->desc_;
}

bkm_revision::desc_optional& bkm_revision::
desc ()
{
  return this->desc_;
}

void bkm_revision::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void bkm_revision::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void bkm_revision::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const bkm_revision::note_optional& bkm_revision::
note () const
{
  return this->note_;
}

bkm_revision::note_optional& bkm_revision::
note ()
{
  return this->note_;
}

void bkm_revision::
note (const note_type& x)
{
  this->note_.set (x);
}

void bkm_revision::
note (const note_optional& x)
{
  this->note_ = x;
}

void bkm_revision::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const bkm_revision::remark_optional& bkm_revision::
remark () const
{
  return this->remark_;
}

bkm_revision::remark_optional& bkm_revision::
remark ()
{
  return this->remark_;
}

void bkm_revision::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void bkm_revision::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void bkm_revision::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}


// bkm_revisionitem
// 

const bkm_revisionitem::id_optional& bkm_revisionitem::
id () const
{
  return this->id_;
}

bkm_revisionitem::id_optional& bkm_revisionitem::
id ()
{
  return this->id_;
}

void bkm_revisionitem::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_revisionitem::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_revisionitem::externalkey_type& bkm_revisionitem::
externalkey () const
{
  return this->externalkey_.get ();
}

bkm_revisionitem::externalkey_type& bkm_revisionitem::
externalkey ()
{
  return this->externalkey_.get ();
}

void bkm_revisionitem::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void bkm_revisionitem::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const bkm_revisionitem::placingkey_optional& bkm_revisionitem::
placingkey () const
{
  return this->placingkey_;
}

bkm_revisionitem::placingkey_optional& bkm_revisionitem::
placingkey ()
{
  return this->placingkey_;
}

void bkm_revisionitem::
placingkey (const placingkey_type& x)
{
  this->placingkey_.set (x);
}

void bkm_revisionitem::
placingkey (const placingkey_optional& x)
{
  this->placingkey_ = x;
}

void bkm_revisionitem::
placingkey (::std::unique_ptr< placingkey_type > x)
{
  this->placingkey_.set (std::move (x));
}

const bkm_revisionitem::placingcode_optional& bkm_revisionitem::
placingcode () const
{
  return this->placingcode_;
}

bkm_revisionitem::placingcode_optional& bkm_revisionitem::
placingcode ()
{
  return this->placingcode_;
}

void bkm_revisionitem::
placingcode (const placingcode_type& x)
{
  this->placingcode_.set (x);
}

void bkm_revisionitem::
placingcode (const placingcode_optional& x)
{
  this->placingcode_ = x;
}

void bkm_revisionitem::
placingcode (::std::unique_ptr< placingcode_type > x)
{
  this->placingcode_.set (std::move (x));
}

const bkm_revisionitem::placingname_optional& bkm_revisionitem::
placingname () const
{
  return this->placingname_;
}

bkm_revisionitem::placingname_optional& bkm_revisionitem::
placingname ()
{
  return this->placingname_;
}

void bkm_revisionitem::
placingname (const placingname_type& x)
{
  this->placingname_.set (x);
}

void bkm_revisionitem::
placingname (const placingname_optional& x)
{
  this->placingname_ = x;
}

void bkm_revisionitem::
placingname (::std::unique_ptr< placingname_type > x)
{
  this->placingname_.set (std::move (x));
}

const bkm_revisionitem::code_optional& bkm_revisionitem::
code () const
{
  return this->code_;
}

bkm_revisionitem::code_optional& bkm_revisionitem::
code ()
{
  return this->code_;
}

void bkm_revisionitem::
code (const code_type& x)
{
  this->code_.set (x);
}

void bkm_revisionitem::
code (const code_optional& x)
{
  this->code_ = x;
}

void bkm_revisionitem::
code (::std::unique_ptr< code_type > x)
{
  this->code_.set (std::move (x));
}

const bkm_revisionitem::revisionbtr_optional& bkm_revisionitem::
revisionbtr () const
{
  return this->revisionbtr_;
}

bkm_revisionitem::revisionbtr_optional& bkm_revisionitem::
revisionbtr ()
{
  return this->revisionbtr_;
}

void bkm_revisionitem::
revisionbtr (const revisionbtr_type& x)
{
  this->revisionbtr_.set (x);
}

void bkm_revisionitem::
revisionbtr (const revisionbtr_optional& x)
{
  this->revisionbtr_ = x;
}

void bkm_revisionitem::
revisionbtr (::std::unique_ptr< revisionbtr_type > x)
{
  this->revisionbtr_.set (std::move (x));
}

const bkm_revisionitem::releasedbtr_optional& bkm_revisionitem::
releasedbtr () const
{
  return this->releasedbtr_;
}

bkm_revisionitem::releasedbtr_optional& bkm_revisionitem::
releasedbtr ()
{
  return this->releasedbtr_;
}

void bkm_revisionitem::
releasedbtr (const releasedbtr_type& x)
{
  this->releasedbtr_.set (x);
}

void bkm_revisionitem::
releasedbtr (const releasedbtr_optional& x)
{
  this->releasedbtr_ = x;
}

void bkm_revisionitem::
releasedbtr (::std::unique_ptr< releasedbtr_type > x)
{
  this->releasedbtr_.set (std::move (x));
}

const bkm_revisionitem::vatprz_optional& bkm_revisionitem::
vatprz () const
{
  return this->vatprz_;
}

bkm_revisionitem::vatprz_optional& bkm_revisionitem::
vatprz ()
{
  return this->vatprz_;
}

void bkm_revisionitem::
vatprz (const vatprz_type& x)
{
  this->vatprz_.set (x);
}

void bkm_revisionitem::
vatprz (const vatprz_optional& x)
{
  this->vatprz_ = x;
}

void bkm_revisionitem::
vatprz (::std::unique_ptr< vatprz_type > x)
{
  this->vatprz_.set (std::move (x));
}

const bkm_revisionitem::ratingprz_optional& bkm_revisionitem::
ratingprz () const
{
  return this->ratingprz_;
}

bkm_revisionitem::ratingprz_optional& bkm_revisionitem::
ratingprz ()
{
  return this->ratingprz_;
}

void bkm_revisionitem::
ratingprz (const ratingprz_type& x)
{
  this->ratingprz_.set (x);
}

void bkm_revisionitem::
ratingprz (const ratingprz_optional& x)
{
  this->ratingprz_ = x;
}

void bkm_revisionitem::
ratingprz (::std::unique_ptr< ratingprz_type > x)
{
  this->ratingprz_.set (std::move (x));
}

const bkm_revisionitem::desc_optional& bkm_revisionitem::
desc () const
{
  return this->desc_;
}

bkm_revisionitem::desc_optional& bkm_revisionitem::
desc ()
{
  return this->desc_;
}

void bkm_revisionitem::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void bkm_revisionitem::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void bkm_revisionitem::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const bkm_revisionitem::note_optional& bkm_revisionitem::
note () const
{
  return this->note_;
}

bkm_revisionitem::note_optional& bkm_revisionitem::
note ()
{
  return this->note_;
}

void bkm_revisionitem::
note (const note_type& x)
{
  this->note_.set (x);
}

void bkm_revisionitem::
note (const note_optional& x)
{
  this->note_ = x;
}

void bkm_revisionitem::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const bkm_revisionitem::remark_optional& bkm_revisionitem::
remark () const
{
  return this->remark_;
}

bkm_revisionitem::remark_optional& bkm_revisionitem::
remark ()
{
  return this->remark_;
}

void bkm_revisionitem::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void bkm_revisionitem::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void bkm_revisionitem::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}


// ret_revisionitem
// 

const ret_revisionitem::id_optional& ret_revisionitem::
id () const
{
  return this->id_;
}

ret_revisionitem::id_optional& ret_revisionitem::
id ()
{
  return this->id_;
}

void ret_revisionitem::
id (const id_type& x)
{
  this->id_.set (x);
}

void ret_revisionitem::
id (const id_optional& x)
{
  this->id_ = x;
}

const ret_revisionitem::orderkey_optional& ret_revisionitem::
orderkey () const
{
  return this->orderkey_;
}

ret_revisionitem::orderkey_optional& ret_revisionitem::
orderkey ()
{
  return this->orderkey_;
}

void ret_revisionitem::
orderkey (const orderkey_type& x)
{
  this->orderkey_.set (x);
}

void ret_revisionitem::
orderkey (const orderkey_optional& x)
{
  this->orderkey_ = x;
}

void ret_revisionitem::
orderkey (::std::unique_ptr< orderkey_type > x)
{
  this->orderkey_.set (std::move (x));
}

const ret_revisionitem::ordercode_optional& ret_revisionitem::
ordercode () const
{
  return this->ordercode_;
}

ret_revisionitem::ordercode_optional& ret_revisionitem::
ordercode ()
{
  return this->ordercode_;
}

void ret_revisionitem::
ordercode (const ordercode_type& x)
{
  this->ordercode_.set (x);
}

void ret_revisionitem::
ordercode (const ordercode_optional& x)
{
  this->ordercode_ = x;
}

void ret_revisionitem::
ordercode (::std::unique_ptr< ordercode_type > x)
{
  this->ordercode_.set (std::move (x));
}

const ret_revisionitem::ordername_optional& ret_revisionitem::
ordername () const
{
  return this->ordername_;
}

ret_revisionitem::ordername_optional& ret_revisionitem::
ordername ()
{
  return this->ordername_;
}

void ret_revisionitem::
ordername (const ordername_type& x)
{
  this->ordername_.set (x);
}

void ret_revisionitem::
ordername (const ordername_optional& x)
{
  this->ordername_ = x;
}

void ret_revisionitem::
ordername (::std::unique_ptr< ordername_type > x)
{
  this->ordername_.set (std::move (x));
}

const ret_revisionitem::code_optional& ret_revisionitem::
code () const
{
  return this->code_;
}

ret_revisionitem::code_optional& ret_revisionitem::
code ()
{
  return this->code_;
}

void ret_revisionitem::
code (const code_type& x)
{
  this->code_.set (x);
}

void ret_revisionitem::
code (const code_optional& x)
{
  this->code_ = x;
}

void ret_revisionitem::
code (::std::unique_ptr< code_type > x)
{
  this->code_.set (std::move (x));
}

const ret_revisionitem::budget_optional& ret_revisionitem::
budget () const
{
  return this->budget_;
}

ret_revisionitem::budget_optional& ret_revisionitem::
budget ()
{
  return this->budget_;
}

void ret_revisionitem::
budget (const budget_type& x)
{
  this->budget_.set (x);
}

void ret_revisionitem::
budget (const budget_optional& x)
{
  this->budget_ = x;
}

void ret_revisionitem::
budget (::std::unique_ptr< budget_type > x)
{
  this->budget_.set (std::move (x));
}

const ret_revisionitem::vatprz_optional& ret_revisionitem::
vatprz () const
{
  return this->vatprz_;
}

ret_revisionitem::vatprz_optional& ret_revisionitem::
vatprz ()
{
  return this->vatprz_;
}

void ret_revisionitem::
vatprz (const vatprz_type& x)
{
  this->vatprz_.set (x);
}

void ret_revisionitem::
vatprz (const vatprz_optional& x)
{
  this->vatprz_ = x;
}

void ret_revisionitem::
vatprz (::std::unique_ptr< vatprz_type > x)
{
  this->vatprz_.set (std::move (x));
}

const ret_revisionitem::desc_optional& ret_revisionitem::
desc () const
{
  return this->desc_;
}

ret_revisionitem::desc_optional& ret_revisionitem::
desc ()
{
  return this->desc_;
}

void ret_revisionitem::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void ret_revisionitem::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void ret_revisionitem::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const ret_revisionitem::note_optional& ret_revisionitem::
note () const
{
  return this->note_;
}

ret_revisionitem::note_optional& ret_revisionitem::
note ()
{
  return this->note_;
}

void ret_revisionitem::
note (const note_type& x)
{
  this->note_.set (x);
}

void ret_revisionitem::
note (const note_optional& x)
{
  this->note_ = x;
}

void ret_revisionitem::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const ret_revisionitem::remark_optional& ret_revisionitem::
remark () const
{
  return this->remark_;
}

ret_revisionitem::remark_optional& ret_revisionitem::
remark ()
{
  return this->remark_;
}

void ret_revisionitem::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void ret_revisionitem::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void ret_revisionitem::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}


// bkm_order
// 

const bkm_order::bkm_invoicedef_sequence& bkm_order::
bkm_invoicedef () const
{
  return this->bkm_invoicedef_;
}

bkm_order::bkm_invoicedef_sequence& bkm_order::
bkm_invoicedef ()
{
  return this->bkm_invoicedef_;
}

void bkm_order::
bkm_invoicedef (const bkm_invoicedef_sequence& s)
{
  this->bkm_invoicedef_ = s;
}

const bkm_order::bkm_keyvalue_sequence& bkm_order::
bkm_keyvalue () const
{
  return this->bkm_keyvalue_;
}

bkm_order::bkm_keyvalue_sequence& bkm_order::
bkm_keyvalue ()
{
  return this->bkm_keyvalue_;
}

void bkm_order::
bkm_keyvalue (const bkm_keyvalue_sequence& s)
{
  this->bkm_keyvalue_ = s;
}

const bkm_order::id_optional& bkm_order::
id () const
{
  return this->id_;
}

bkm_order::id_optional& bkm_order::
id ()
{
  return this->id_;
}

void bkm_order::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_order::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_order::external_optional& bkm_order::
external () const
{
  return this->external_;
}

bkm_order::external_optional& bkm_order::
external ()
{
  return this->external_;
}

void bkm_order::
external (const external_type& x)
{
  this->external_.set (x);
}

void bkm_order::
external (const external_optional& x)
{
  this->external_ = x;
}

void bkm_order::
external (::std::unique_ptr< external_type > x)
{
  this->external_.set (std::move (x));
}

const bkm_order::externalkey_type& bkm_order::
externalkey () const
{
  return this->externalkey_.get ();
}

bkm_order::externalkey_type& bkm_order::
externalkey ()
{
  return this->externalkey_.get ();
}

void bkm_order::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void bkm_order::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const bkm_order::projectkey_optional& bkm_order::
projectkey () const
{
  return this->projectkey_;
}

bkm_order::projectkey_optional& bkm_order::
projectkey ()
{
  return this->projectkey_;
}

void bkm_order::
projectkey (const projectkey_type& x)
{
  this->projectkey_.set (x);
}

void bkm_order::
projectkey (const projectkey_optional& x)
{
  this->projectkey_ = x;
}

void bkm_order::
projectkey (::std::unique_ptr< projectkey_type > x)
{
  this->projectkey_.set (std::move (x));
}

const bkm_order::matchfield_optional& bkm_order::
matchfield () const
{
  return this->matchfield_;
}

bkm_order::matchfield_optional& bkm_order::
matchfield ()
{
  return this->matchfield_;
}

void bkm_order::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void bkm_order::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void bkm_order::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const bkm_order::partcode_optional& bkm_order::
partcode () const
{
  return this->partcode_;
}

bkm_order::partcode_optional& bkm_order::
partcode ()
{
  return this->partcode_;
}

void bkm_order::
partcode (const partcode_type& x)
{
  this->partcode_.set (x);
}

void bkm_order::
partcode (const partcode_optional& x)
{
  this->partcode_ = x;
}

void bkm_order::
partcode (::std::unique_ptr< partcode_type > x)
{
  this->partcode_.set (std::move (x));
}

const bkm_order::controlcode_optional& bkm_order::
controlcode () const
{
  return this->controlcode_;
}

bkm_order::controlcode_optional& bkm_order::
controlcode ()
{
  return this->controlcode_;
}

void bkm_order::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void bkm_order::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void bkm_order::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const bkm_order::vendorcode_optional& bkm_order::
vendorcode () const
{
  return this->vendorcode_;
}

bkm_order::vendorcode_optional& bkm_order::
vendorcode ()
{
  return this->vendorcode_;
}

void bkm_order::
vendorcode (const vendorcode_type& x)
{
  this->vendorcode_.set (x);
}

void bkm_order::
vendorcode (const vendorcode_optional& x)
{
  this->vendorcode_ = x;
}

void bkm_order::
vendorcode (::std::unique_ptr< vendorcode_type > x)
{
  this->vendorcode_.set (std::move (x));
}

const bkm_order::vendorkey_optional& bkm_order::
vendorkey () const
{
  return this->vendorkey_;
}

bkm_order::vendorkey_optional& bkm_order::
vendorkey ()
{
  return this->vendorkey_;
}

void bkm_order::
vendorkey (const vendorkey_type& x)
{
  this->vendorkey_.set (x);
}

void bkm_order::
vendorkey (const vendorkey_optional& x)
{
  this->vendorkey_ = x;
}

void bkm_order::
vendorkey (::std::unique_ptr< vendorkey_type > x)
{
  this->vendorkey_.set (std::move (x));
}

const bkm_order::vendorname_optional& bkm_order::
vendorname () const
{
  return this->vendorname_;
}

bkm_order::vendorname_optional& bkm_order::
vendorname ()
{
  return this->vendorname_;
}

void bkm_order::
vendorname (const vendorname_type& x)
{
  this->vendorname_.set (x);
}

void bkm_order::
vendorname (const vendorname_optional& x)
{
  this->vendorname_ = x;
}

void bkm_order::
vendorname (::std::unique_ptr< vendorname_type > x)
{
  this->vendorname_.set (std::move (x));
}

const bkm_order::vendorname2_optional& bkm_order::
vendorname2 () const
{
  return this->vendorname2_;
}

bkm_order::vendorname2_optional& bkm_order::
vendorname2 ()
{
  return this->vendorname2_;
}

void bkm_order::
vendorname2 (const vendorname2_type& x)
{
  this->vendorname2_.set (x);
}

void bkm_order::
vendorname2 (const vendorname2_optional& x)
{
  this->vendorname2_ = x;
}

void bkm_order::
vendorname2 (::std::unique_ptr< vendorname2_type > x)
{
  this->vendorname2_.set (std::move (x));
}

const bkm_order::vendorname3_optional& bkm_order::
vendorname3 () const
{
  return this->vendorname3_;
}

bkm_order::vendorname3_optional& bkm_order::
vendorname3 ()
{
  return this->vendorname3_;
}

void bkm_order::
vendorname3 (const vendorname3_type& x)
{
  this->vendorname3_.set (x);
}

void bkm_order::
vendorname3 (const vendorname3_optional& x)
{
  this->vendorname3_ = x;
}

void bkm_order::
vendorname3 (::std::unique_ptr< vendorname3_type > x)
{
  this->vendorname3_.set (std::move (x));
}

const bkm_order::vendorkeyid_optional& bkm_order::
vendorkeyid () const
{
  return this->vendorkeyid_;
}

bkm_order::vendorkeyid_optional& bkm_order::
vendorkeyid ()
{
  return this->vendorkeyid_;
}

void bkm_order::
vendorkeyid (const vendorkeyid_type& x)
{
  this->vendorkeyid_.set (x);
}

void bkm_order::
vendorkeyid (const vendorkeyid_optional& x)
{
  this->vendorkeyid_ = x;
}

void bkm_order::
vendorkeyid (::std::unique_ptr< vendorkeyid_type > x)
{
  this->vendorkeyid_.set (std::move (x));
}

const bkm_order::placingkey_optional& bkm_order::
placingkey () const
{
  return this->placingkey_;
}

bkm_order::placingkey_optional& bkm_order::
placingkey ()
{
  return this->placingkey_;
}

void bkm_order::
placingkey (const placingkey_type& x)
{
  this->placingkey_.set (x);
}

void bkm_order::
placingkey (const placingkey_optional& x)
{
  this->placingkey_ = x;
}

void bkm_order::
placingkey (::std::unique_ptr< placingkey_type > x)
{
  this->placingkey_.set (std::move (x));
}

const bkm_order::placingcode_optional& bkm_order::
placingcode () const
{
  return this->placingcode_;
}

bkm_order::placingcode_optional& bkm_order::
placingcode ()
{
  return this->placingcode_;
}

void bkm_order::
placingcode (const placingcode_type& x)
{
  this->placingcode_.set (x);
}

void bkm_order::
placingcode (const placingcode_optional& x)
{
  this->placingcode_ = x;
}

void bkm_order::
placingcode (::std::unique_ptr< placingcode_type > x)
{
  this->placingcode_.set (std::move (x));
}

const bkm_order::placingname_optional& bkm_order::
placingname () const
{
  return this->placingname_;
}

bkm_order::placingname_optional& bkm_order::
placingname ()
{
  return this->placingname_;
}

void bkm_order::
placingname (const placingname_type& x)
{
  this->placingname_.set (x);
}

void bkm_order::
placingname (const placingname_optional& x)
{
  this->placingname_ = x;
}

void bkm_order::
placingname (::std::unique_ptr< placingname_type > x)
{
  this->placingname_.set (std::move (x));
}

const bkm_order::number_optional& bkm_order::
number () const
{
  return this->number_;
}

bkm_order::number_optional& bkm_order::
number ()
{
  return this->number_;
}

void bkm_order::
number (const number_type& x)
{
  this->number_.set (x);
}

void bkm_order::
number (const number_optional& x)
{
  this->number_ = x;
}

void bkm_order::
number (::std::unique_ptr< number_type > x)
{
  this->number_.set (std::move (x));
}

const bkm_order::numbercol_optional& bkm_order::
numbercol () const
{
  return this->numbercol_;
}

bkm_order::numbercol_optional& bkm_order::
numbercol ()
{
  return this->numbercol_;
}

void bkm_order::
numbercol (const numbercol_type& x)
{
  this->numbercol_.set (x);
}

void bkm_order::
numbercol (const numbercol_optional& x)
{
  this->numbercol_ = x;
}

void bkm_order::
numbercol (::std::unique_ptr< numbercol_type > x)
{
  this->numbercol_.set (std::move (x));
}

const bkm_order::order_optional& bkm_order::
order () const
{
  return this->order_;
}

bkm_order::order_optional& bkm_order::
order ()
{
  return this->order_;
}

void bkm_order::
order (const order_type& x)
{
  this->order_.set (x);
}

void bkm_order::
order (const order_optional& x)
{
  this->order_ = x;
}

void bkm_order::
order (::std::unique_ptr< order_type > x)
{
  this->order_.set (std::move (x));
}

const bkm_order::contract_optional& bkm_order::
contract () const
{
  return this->contract_;
}

bkm_order::contract_optional& bkm_order::
contract ()
{
  return this->contract_;
}

void bkm_order::
contract (const contract_type& x)
{
  this->contract_.set (x);
}

void bkm_order::
contract (const contract_optional& x)
{
  this->contract_ = x;
}

void bkm_order::
contract (::std::unique_ptr< contract_type > x)
{
  this->contract_.set (std::move (x));
}

const bkm_order::extern1_optional& bkm_order::
extern1 () const
{
  return this->extern1_;
}

bkm_order::extern1_optional& bkm_order::
extern1 ()
{
  return this->extern1_;
}

void bkm_order::
extern1 (const extern1_type& x)
{
  this->extern1_.set (x);
}

void bkm_order::
extern1 (const extern1_optional& x)
{
  this->extern1_ = x;
}

void bkm_order::
extern1 (::std::unique_ptr< extern1_type > x)
{
  this->extern1_.set (std::move (x));
}

const bkm_order::extern2_optional& bkm_order::
extern2 () const
{
  return this->extern2_;
}

bkm_order::extern2_optional& bkm_order::
extern2 ()
{
  return this->extern2_;
}

void bkm_order::
extern2 (const extern2_type& x)
{
  this->extern2_.set (x);
}

void bkm_order::
extern2 (const extern2_optional& x)
{
  this->extern2_ = x;
}

void bkm_order::
extern2 (::std::unique_ptr< extern2_type > x)
{
  this->extern2_.set (std::move (x));
}

const bkm_order::extern3_optional& bkm_order::
extern3 () const
{
  return this->extern3_;
}

bkm_order::extern3_optional& bkm_order::
extern3 ()
{
  return this->extern3_;
}

void bkm_order::
extern3 (const extern3_type& x)
{
  this->extern3_.set (x);
}

void bkm_order::
extern3 (const extern3_optional& x)
{
  this->extern3_ = x;
}

void bkm_order::
extern3 (::std::unique_ptr< extern3_type > x)
{
  this->extern3_.set (std::move (x));
}

const bkm_order::currency_optional& bkm_order::
currency () const
{
  return this->currency_;
}

bkm_order::currency_optional& bkm_order::
currency ()
{
  return this->currency_;
}

void bkm_order::
currency (const currency_type& x)
{
  this->currency_.set (x);
}

void bkm_order::
currency (const currency_optional& x)
{
  this->currency_ = x;
}

void bkm_order::
currency (::std::unique_ptr< currency_type > x)
{
  this->currency_.set (std::move (x));
}

const bkm_order::orderbtr_optional& bkm_order::
orderbtr () const
{
  return this->orderbtr_;
}

bkm_order::orderbtr_optional& bkm_order::
orderbtr ()
{
  return this->orderbtr_;
}

void bkm_order::
orderbtr (const orderbtr_type& x)
{
  this->orderbtr_.set (x);
}

void bkm_order::
orderbtr (const orderbtr_optional& x)
{
  this->orderbtr_ = x;
}

void bkm_order::
orderbtr (::std::unique_ptr< orderbtr_type > x)
{
  this->orderbtr_.set (std::move (x));
}

const bkm_order::rebatebtr_optional& bkm_order::
rebatebtr () const
{
  return this->rebatebtr_;
}

bkm_order::rebatebtr_optional& bkm_order::
rebatebtr ()
{
  return this->rebatebtr_;
}

void bkm_order::
rebatebtr (const rebatebtr_type& x)
{
  this->rebatebtr_.set (x);
}

void bkm_order::
rebatebtr (const rebatebtr_optional& x)
{
  this->rebatebtr_ = x;
}

void bkm_order::
rebatebtr (::std::unique_ptr< rebatebtr_type > x)
{
  this->rebatebtr_.set (std::move (x));
}

const bkm_order::orderdate_optional& bkm_order::
orderdate () const
{
  return this->orderdate_;
}

bkm_order::orderdate_optional& bkm_order::
orderdate ()
{
  return this->orderdate_;
}

void bkm_order::
orderdate (const orderdate_type& x)
{
  this->orderdate_.set (x);
}

void bkm_order::
orderdate (const orderdate_optional& x)
{
  this->orderdate_ = x;
}

void bkm_order::
orderdate (::std::unique_ptr< orderdate_type > x)
{
  this->orderdate_.set (std::move (x));
}

const bkm_order::indexdate_optional& bkm_order::
indexdate () const
{
  return this->indexdate_;
}

bkm_order::indexdate_optional& bkm_order::
indexdate ()
{
  return this->indexdate_;
}

void bkm_order::
indexdate (const indexdate_type& x)
{
  this->indexdate_.set (x);
}

void bkm_order::
indexdate (const indexdate_optional& x)
{
  this->indexdate_ = x;
}

void bkm_order::
indexdate (::std::unique_ptr< indexdate_type > x)
{
  this->indexdate_.set (std::move (x));
}

const bkm_order::lstgstart_optional& bkm_order::
lstgstart () const
{
  return this->lstgstart_;
}

bkm_order::lstgstart_optional& bkm_order::
lstgstart ()
{
  return this->lstgstart_;
}

void bkm_order::
lstgstart (const lstgstart_type& x)
{
  this->lstgstart_.set (x);
}

void bkm_order::
lstgstart (const lstgstart_optional& x)
{
  this->lstgstart_ = x;
}

void bkm_order::
lstgstart (::std::unique_ptr< lstgstart_type > x)
{
  this->lstgstart_.set (std::move (x));
}

const bkm_order::lstgend_optional& bkm_order::
lstgend () const
{
  return this->lstgend_;
}

bkm_order::lstgend_optional& bkm_order::
lstgend ()
{
  return this->lstgend_;
}

void bkm_order::
lstgend (const lstgend_type& x)
{
  this->lstgend_.set (x);
}

void bkm_order::
lstgend (const lstgend_optional& x)
{
  this->lstgend_ = x;
}

void bkm_order::
lstgend (::std::unique_ptr< lstgend_type > x)
{
  this->lstgend_.set (std::move (x));
}

const bkm_order::offerdate_optional& bkm_order::
offerdate () const
{
  return this->offerdate_;
}

bkm_order::offerdate_optional& bkm_order::
offerdate ()
{
  return this->offerdate_;
}

void bkm_order::
offerdate (const offerdate_type& x)
{
  this->offerdate_.set (x);
}

void bkm_order::
offerdate (const offerdate_optional& x)
{
  this->offerdate_ = x;
}

void bkm_order::
offerdate (::std::unique_ptr< offerdate_type > x)
{
  this->offerdate_.set (std::move (x));
}

const bkm_order::liabilityperiod_optional& bkm_order::
liabilityperiod () const
{
  return this->liabilityperiod_;
}

bkm_order::liabilityperiod_optional& bkm_order::
liabilityperiod ()
{
  return this->liabilityperiod_;
}

void bkm_order::
liabilityperiod (const liabilityperiod_type& x)
{
  this->liabilityperiod_.set (x);
}

void bkm_order::
liabilityperiod (const liabilityperiod_optional& x)
{
  this->liabilityperiod_ = x;
}

const bkm_order::discountprz_optional& bkm_order::
discountprz () const
{
  return this->discountprz_;
}

bkm_order::discountprz_optional& bkm_order::
discountprz ()
{
  return this->discountprz_;
}

void bkm_order::
discountprz (const discountprz_type& x)
{
  this->discountprz_.set (x);
}

void bkm_order::
discountprz (const discountprz_optional& x)
{
  this->discountprz_ = x;
}

void bkm_order::
discountprz (::std::unique_ptr< discountprz_type > x)
{
  this->discountprz_.set (std::move (x));
}

const bkm_order::skontoprz_optional& bkm_order::
skontoprz () const
{
  return this->skontoprz_;
}

bkm_order::skontoprz_optional& bkm_order::
skontoprz ()
{
  return this->skontoprz_;
}

void bkm_order::
skontoprz (const skontoprz_type& x)
{
  this->skontoprz_.set (x);
}

void bkm_order::
skontoprz (const skontoprz_optional& x)
{
  this->skontoprz_ = x;
}

void bkm_order::
skontoprz (::std::unique_ptr< skontoprz_type > x)
{
  this->skontoprz_.set (std::move (x));
}

const bkm_order::vatprz_optional& bkm_order::
vatprz () const
{
  return this->vatprz_;
}

bkm_order::vatprz_optional& bkm_order::
vatprz ()
{
  return this->vatprz_;
}

void bkm_order::
vatprz (const vatprz_type& x)
{
  this->vatprz_.set (x);
}

void bkm_order::
vatprz (const vatprz_optional& x)
{
  this->vatprz_ = x;
}

void bkm_order::
vatprz (::std::unique_ptr< vatprz_type > x)
{
  this->vatprz_.set (std::move (x));
}

const bkm_order::statuscode_optional& bkm_order::
statuscode () const
{
  return this->statuscode_;
}

bkm_order::statuscode_optional& bkm_order::
statuscode ()
{
  return this->statuscode_;
}

void bkm_order::
statuscode (const statuscode_type& x)
{
  this->statuscode_.set (x);
}

void bkm_order::
statuscode (const statuscode_optional& x)
{
  this->statuscode_ = x;
}

void bkm_order::
statuscode (::std::unique_ptr< statuscode_type > x)
{
  this->statuscode_.set (std::move (x));
}

const bkm_order::statusname_optional& bkm_order::
statusname () const
{
  return this->statusname_;
}

bkm_order::statusname_optional& bkm_order::
statusname ()
{
  return this->statusname_;
}

void bkm_order::
statusname (const statusname_type& x)
{
  this->statusname_.set (x);
}

void bkm_order::
statusname (const statusname_optional& x)
{
  this->statusname_ = x;
}

void bkm_order::
statusname (::std::unique_ptr< statusname_type > x)
{
  this->statusname_.set (std::move (x));
}

const bkm_order::groupcode_optional& bkm_order::
groupcode () const
{
  return this->groupcode_;
}

bkm_order::groupcode_optional& bkm_order::
groupcode ()
{
  return this->groupcode_;
}

void bkm_order::
groupcode (const groupcode_type& x)
{
  this->groupcode_.set (x);
}

void bkm_order::
groupcode (const groupcode_optional& x)
{
  this->groupcode_ = x;
}

void bkm_order::
groupcode (::std::unique_ptr< groupcode_type > x)
{
  this->groupcode_.set (std::move (x));
}

const bkm_order::groupname_optional& bkm_order::
groupname () const
{
  return this->groupname_;
}

bkm_order::groupname_optional& bkm_order::
groupname ()
{
  return this->groupname_;
}

void bkm_order::
groupname (const groupname_type& x)
{
  this->groupname_.set (x);
}

void bkm_order::
groupname (const groupname_optional& x)
{
  this->groupname_ = x;
}

void bkm_order::
groupname (::std::unique_ptr< groupname_type > x)
{
  this->groupname_.set (std::move (x));
}

const bkm_order::ordertypecode_optional& bkm_order::
ordertypecode () const
{
  return this->ordertypecode_;
}

bkm_order::ordertypecode_optional& bkm_order::
ordertypecode ()
{
  return this->ordertypecode_;
}

void bkm_order::
ordertypecode (const ordertypecode_type& x)
{
  this->ordertypecode_.set (x);
}

void bkm_order::
ordertypecode (const ordertypecode_optional& x)
{
  this->ordertypecode_ = x;
}

void bkm_order::
ordertypecode (::std::unique_ptr< ordertypecode_type > x)
{
  this->ordertypecode_.set (std::move (x));
}

const bkm_order::ordertypename_optional& bkm_order::
ordertypename () const
{
  return this->ordertypename_;
}

bkm_order::ordertypename_optional& bkm_order::
ordertypename ()
{
  return this->ordertypename_;
}

void bkm_order::
ordertypename (const ordertypename_type& x)
{
  this->ordertypename_.set (x);
}

void bkm_order::
ordertypename (const ordertypename_optional& x)
{
  this->ordertypename_ = x;
}

void bkm_order::
ordertypename (::std::unique_ptr< ordertypename_type > x)
{
  this->ordertypename_.set (std::move (x));
}

const bkm_order::userfield1_optional& bkm_order::
userfield1 () const
{
  return this->userfield1_;
}

bkm_order::userfield1_optional& bkm_order::
userfield1 ()
{
  return this->userfield1_;
}

void bkm_order::
userfield1 (const userfield1_type& x)
{
  this->userfield1_.set (x);
}

void bkm_order::
userfield1 (const userfield1_optional& x)
{
  this->userfield1_ = x;
}

void bkm_order::
userfield1 (::std::unique_ptr< userfield1_type > x)
{
  this->userfield1_.set (std::move (x));
}

const bkm_order::userfield2_optional& bkm_order::
userfield2 () const
{
  return this->userfield2_;
}

bkm_order::userfield2_optional& bkm_order::
userfield2 ()
{
  return this->userfield2_;
}

void bkm_order::
userfield2 (const userfield2_type& x)
{
  this->userfield2_.set (x);
}

void bkm_order::
userfield2 (const userfield2_optional& x)
{
  this->userfield2_ = x;
}

void bkm_order::
userfield2 (::std::unique_ptr< userfield2_type > x)
{
  this->userfield2_.set (std::move (x));
}

const bkm_order::userfield3_optional& bkm_order::
userfield3 () const
{
  return this->userfield3_;
}

bkm_order::userfield3_optional& bkm_order::
userfield3 ()
{
  return this->userfield3_;
}

void bkm_order::
userfield3 (const userfield3_type& x)
{
  this->userfield3_.set (x);
}

void bkm_order::
userfield3 (const userfield3_optional& x)
{
  this->userfield3_ = x;
}

void bkm_order::
userfield3 (::std::unique_ptr< userfield3_type > x)
{
  this->userfield3_.set (std::move (x));
}

const bkm_order::desc_optional& bkm_order::
desc () const
{
  return this->desc_;
}

bkm_order::desc_optional& bkm_order::
desc ()
{
  return this->desc_;
}

void bkm_order::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void bkm_order::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void bkm_order::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const bkm_order::note_optional& bkm_order::
note () const
{
  return this->note_;
}

bkm_order::note_optional& bkm_order::
note ()
{
  return this->note_;
}

void bkm_order::
note (const note_type& x)
{
  this->note_.set (x);
}

void bkm_order::
note (const note_optional& x)
{
  this->note_ = x;
}

void bkm_order::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const bkm_order::remark_optional& bkm_order::
remark () const
{
  return this->remark_;
}

bkm_order::remark_optional& bkm_order::
remark ()
{
  return this->remark_;
}

void bkm_order::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void bkm_order::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void bkm_order::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}

const bkm_order::vatopt_optional& bkm_order::
vatopt () const
{
  return this->vatopt_;
}

bkm_order::vatopt_optional& bkm_order::
vatopt ()
{
  return this->vatopt_;
}

void bkm_order::
vatopt (const vatopt_type& x)
{
  this->vatopt_.set (x);
}

void bkm_order::
vatopt (const vatopt_optional& x)
{
  this->vatopt_ = x;
}

void bkm_order::
vatopt (::std::unique_ptr< vatopt_type > x)
{
  this->vatopt_.set (std::move (x));
}

const bkm_order::collect_optional& bkm_order::
collect () const
{
  return this->collect_;
}

bkm_order::collect_optional& bkm_order::
collect ()
{
  return this->collect_;
}

void bkm_order::
collect (const collect_type& x)
{
  this->collect_.set (x);
}

void bkm_order::
collect (const collect_optional& x)
{
  this->collect_ = x;
}

void bkm_order::
collect (::std::unique_ptr< collect_type > x)
{
  this->collect_.set (std::move (x));
}

const bkm_order::parentkey_optional& bkm_order::
parentkey () const
{
  return this->parentkey_;
}

bkm_order::parentkey_optional& bkm_order::
parentkey ()
{
  return this->parentkey_;
}

void bkm_order::
parentkey (const parentkey_type& x)
{
  this->parentkey_.set (x);
}

void bkm_order::
parentkey (const parentkey_optional& x)
{
  this->parentkey_ = x;
}

void bkm_order::
parentkey (::std::unique_ptr< parentkey_type > x)
{
  this->parentkey_.set (std::move (x));
}


// bkm_addition
// 

const bkm_addition::id_optional& bkm_addition::
id () const
{
  return this->id_;
}

bkm_addition::id_optional& bkm_addition::
id ()
{
  return this->id_;
}

void bkm_addition::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_addition::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_addition::externalkey_type& bkm_addition::
externalkey () const
{
  return this->externalkey_.get ();
}

bkm_addition::externalkey_type& bkm_addition::
externalkey ()
{
  return this->externalkey_.get ();
}

void bkm_addition::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void bkm_addition::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const bkm_addition::controlcode_optional& bkm_addition::
controlcode () const
{
  return this->controlcode_;
}

bkm_addition::controlcode_optional& bkm_addition::
controlcode ()
{
  return this->controlcode_;
}

void bkm_addition::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void bkm_addition::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void bkm_addition::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const bkm_addition::matchfield_optional& bkm_addition::
matchfield () const
{
  return this->matchfield_;
}

bkm_addition::matchfield_optional& bkm_addition::
matchfield ()
{
  return this->matchfield_;
}

void bkm_addition::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void bkm_addition::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void bkm_addition::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const bkm_addition::projectkey_optional& bkm_addition::
projectkey () const
{
  return this->projectkey_;
}

bkm_addition::projectkey_optional& bkm_addition::
projectkey ()
{
  return this->projectkey_;
}

void bkm_addition::
projectkey (const projectkey_type& x)
{
  this->projectkey_.set (x);
}

void bkm_addition::
projectkey (const projectkey_optional& x)
{
  this->projectkey_ = x;
}

void bkm_addition::
projectkey (::std::unique_ptr< projectkey_type > x)
{
  this->projectkey_.set (std::move (x));
}

const bkm_addition::orderkey_optional& bkm_addition::
orderkey () const
{
  return this->orderkey_;
}

bkm_addition::orderkey_optional& bkm_addition::
orderkey ()
{
  return this->orderkey_;
}

void bkm_addition::
orderkey (const orderkey_type& x)
{
  this->orderkey_.set (x);
}

void bkm_addition::
orderkey (const orderkey_optional& x)
{
  this->orderkey_ = x;
}

void bkm_addition::
orderkey (::std::unique_ptr< orderkey_type > x)
{
  this->orderkey_.set (std::move (x));
}

const bkm_addition::number_optional& bkm_addition::
number () const
{
  return this->number_;
}

bkm_addition::number_optional& bkm_addition::
number ()
{
  return this->number_;
}

void bkm_addition::
number (const number_type& x)
{
  this->number_.set (x);
}

void bkm_addition::
number (const number_optional& x)
{
  this->number_ = x;
}

void bkm_addition::
number (::std::unique_ptr< number_type > x)
{
  this->number_.set (std::move (x));
}

const bkm_addition::numberproject_optional& bkm_addition::
numberproject () const
{
  return this->numberproject_;
}

bkm_addition::numberproject_optional& bkm_addition::
numberproject ()
{
  return this->numberproject_;
}

void bkm_addition::
numberproject (const numberproject_type& x)
{
  this->numberproject_.set (x);
}

void bkm_addition::
numberproject (const numberproject_optional& x)
{
  this->numberproject_ = x;
}

void bkm_addition::
numberproject (::std::unique_ptr< numberproject_type > x)
{
  this->numberproject_.set (std::move (x));
}

const bkm_addition::addition_optional& bkm_addition::
addition () const
{
  return this->addition_;
}

bkm_addition::addition_optional& bkm_addition::
addition ()
{
  return this->addition_;
}

void bkm_addition::
addition (const addition_type& x)
{
  this->addition_.set (x);
}

void bkm_addition::
addition (const addition_optional& x)
{
  this->addition_ = x;
}

void bkm_addition::
addition (::std::unique_ptr< addition_type > x)
{
  this->addition_.set (std::move (x));
}

const bkm_addition::extern1_optional& bkm_addition::
extern1 () const
{
  return this->extern1_;
}

bkm_addition::extern1_optional& bkm_addition::
extern1 ()
{
  return this->extern1_;
}

void bkm_addition::
extern1 (const extern1_type& x)
{
  this->extern1_.set (x);
}

void bkm_addition::
extern1 (const extern1_optional& x)
{
  this->extern1_ = x;
}

void bkm_addition::
extern1 (::std::unique_ptr< extern1_type > x)
{
  this->extern1_.set (std::move (x));
}

const bkm_addition::extern2_optional& bkm_addition::
extern2 () const
{
  return this->extern2_;
}

bkm_addition::extern2_optional& bkm_addition::
extern2 ()
{
  return this->extern2_;
}

void bkm_addition::
extern2 (const extern2_type& x)
{
  this->extern2_.set (x);
}

void bkm_addition::
extern2 (const extern2_optional& x)
{
  this->extern2_ = x;
}

void bkm_addition::
extern2 (::std::unique_ptr< extern2_type > x)
{
  this->extern2_.set (std::move (x));
}

const bkm_addition::extern3_optional& bkm_addition::
extern3 () const
{
  return this->extern3_;
}

bkm_addition::extern3_optional& bkm_addition::
extern3 ()
{
  return this->extern3_;
}

void bkm_addition::
extern3 (const extern3_type& x)
{
  this->extern3_.set (x);
}

void bkm_addition::
extern3 (const extern3_optional& x)
{
  this->extern3_ = x;
}

void bkm_addition::
extern3 (::std::unique_ptr< extern3_type > x)
{
  this->extern3_.set (std::move (x));
}

const bkm_addition::additionbtr_optional& bkm_addition::
additionbtr () const
{
  return this->additionbtr_;
}

bkm_addition::additionbtr_optional& bkm_addition::
additionbtr ()
{
  return this->additionbtr_;
}

void bkm_addition::
additionbtr (const additionbtr_type& x)
{
  this->additionbtr_.set (x);
}

void bkm_addition::
additionbtr (const additionbtr_optional& x)
{
  this->additionbtr_ = x;
}

void bkm_addition::
additionbtr (::std::unique_ptr< additionbtr_type > x)
{
  this->additionbtr_.set (std::move (x));
}

const bkm_addition::discountprz_optional& bkm_addition::
discountprz () const
{
  return this->discountprz_;
}

bkm_addition::discountprz_optional& bkm_addition::
discountprz ()
{
  return this->discountprz_;
}

void bkm_addition::
discountprz (const discountprz_type& x)
{
  this->discountprz_.set (x);
}

void bkm_addition::
discountprz (const discountprz_optional& x)
{
  this->discountprz_ = x;
}

void bkm_addition::
discountprz (::std::unique_ptr< discountprz_type > x)
{
  this->discountprz_.set (std::move (x));
}

const bkm_addition::orderdate_optional& bkm_addition::
orderdate () const
{
  return this->orderdate_;
}

bkm_addition::orderdate_optional& bkm_addition::
orderdate ()
{
  return this->orderdate_;
}

void bkm_addition::
orderdate (const orderdate_type& x)
{
  this->orderdate_.set (x);
}

void bkm_addition::
orderdate (const orderdate_optional& x)
{
  this->orderdate_ = x;
}

void bkm_addition::
orderdate (::std::unique_ptr< orderdate_type > x)
{
  this->orderdate_.set (std::move (x));
}

const bkm_addition::offerdate_optional& bkm_addition::
offerdate () const
{
  return this->offerdate_;
}

bkm_addition::offerdate_optional& bkm_addition::
offerdate ()
{
  return this->offerdate_;
}

void bkm_addition::
offerdate (const offerdate_type& x)
{
  this->offerdate_.set (x);
}

void bkm_addition::
offerdate (const offerdate_optional& x)
{
  this->offerdate_ = x;
}

void bkm_addition::
offerdate (::std::unique_ptr< offerdate_type > x)
{
  this->offerdate_.set (std::move (x));
}

const bkm_addition::statuscode_optional& bkm_addition::
statuscode () const
{
  return this->statuscode_;
}

bkm_addition::statuscode_optional& bkm_addition::
statuscode ()
{
  return this->statuscode_;
}

void bkm_addition::
statuscode (const statuscode_type& x)
{
  this->statuscode_.set (x);
}

void bkm_addition::
statuscode (const statuscode_optional& x)
{
  this->statuscode_ = x;
}

void bkm_addition::
statuscode (::std::unique_ptr< statuscode_type > x)
{
  this->statuscode_.set (std::move (x));
}

const bkm_addition::statusname_optional& bkm_addition::
statusname () const
{
  return this->statusname_;
}

bkm_addition::statusname_optional& bkm_addition::
statusname ()
{
  return this->statusname_;
}

void bkm_addition::
statusname (const statusname_type& x)
{
  this->statusname_.set (x);
}

void bkm_addition::
statusname (const statusname_optional& x)
{
  this->statusname_ = x;
}

void bkm_addition::
statusname (::std::unique_ptr< statusname_type > x)
{
  this->statusname_.set (std::move (x));
}

const bkm_addition::groupcode_optional& bkm_addition::
groupcode () const
{
  return this->groupcode_;
}

bkm_addition::groupcode_optional& bkm_addition::
groupcode ()
{
  return this->groupcode_;
}

void bkm_addition::
groupcode (const groupcode_type& x)
{
  this->groupcode_.set (x);
}

void bkm_addition::
groupcode (const groupcode_optional& x)
{
  this->groupcode_ = x;
}

void bkm_addition::
groupcode (::std::unique_ptr< groupcode_type > x)
{
  this->groupcode_.set (std::move (x));
}

const bkm_addition::groupname_optional& bkm_addition::
groupname () const
{
  return this->groupname_;
}

bkm_addition::groupname_optional& bkm_addition::
groupname ()
{
  return this->groupname_;
}

void bkm_addition::
groupname (const groupname_type& x)
{
  this->groupname_.set (x);
}

void bkm_addition::
groupname (const groupname_optional& x)
{
  this->groupname_ = x;
}

void bkm_addition::
groupname (::std::unique_ptr< groupname_type > x)
{
  this->groupname_.set (std::move (x));
}

const bkm_addition::desc_optional& bkm_addition::
desc () const
{
  return this->desc_;
}

bkm_addition::desc_optional& bkm_addition::
desc ()
{
  return this->desc_;
}

void bkm_addition::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void bkm_addition::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void bkm_addition::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const bkm_addition::note_optional& bkm_addition::
note () const
{
  return this->note_;
}

bkm_addition::note_optional& bkm_addition::
note ()
{
  return this->note_;
}

void bkm_addition::
note (const note_type& x)
{
  this->note_.set (x);
}

void bkm_addition::
note (const note_optional& x)
{
  this->note_ = x;
}

void bkm_addition::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const bkm_addition::remark_optional& bkm_addition::
remark () const
{
  return this->remark_;
}

bkm_addition::remark_optional& bkm_addition::
remark ()
{
  return this->remark_;
}

void bkm_addition::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void bkm_addition::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void bkm_addition::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}


// bkm_evident
// 

const bkm_evident::id_optional& bkm_evident::
id () const
{
  return this->id_;
}

bkm_evident::id_optional& bkm_evident::
id ()
{
  return this->id_;
}

void bkm_evident::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_evident::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_evident::externalkey_type& bkm_evident::
externalkey () const
{
  return this->externalkey_.get ();
}

bkm_evident::externalkey_type& bkm_evident::
externalkey ()
{
  return this->externalkey_.get ();
}

void bkm_evident::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void bkm_evident::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const bkm_evident::controlcode_optional& bkm_evident::
controlcode () const
{
  return this->controlcode_;
}

bkm_evident::controlcode_optional& bkm_evident::
controlcode ()
{
  return this->controlcode_;
}

void bkm_evident::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void bkm_evident::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void bkm_evident::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const bkm_evident::matchfield_optional& bkm_evident::
matchfield () const
{
  return this->matchfield_;
}

bkm_evident::matchfield_optional& bkm_evident::
matchfield ()
{
  return this->matchfield_;
}

void bkm_evident::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void bkm_evident::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void bkm_evident::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const bkm_evident::projectkey_optional& bkm_evident::
projectkey () const
{
  return this->projectkey_;
}

bkm_evident::projectkey_optional& bkm_evident::
projectkey ()
{
  return this->projectkey_;
}

void bkm_evident::
projectkey (const projectkey_type& x)
{
  this->projectkey_.set (x);
}

void bkm_evident::
projectkey (const projectkey_optional& x)
{
  this->projectkey_ = x;
}

void bkm_evident::
projectkey (::std::unique_ptr< projectkey_type > x)
{
  this->projectkey_.set (std::move (x));
}

const bkm_evident::orderkey_optional& bkm_evident::
orderkey () const
{
  return this->orderkey_;
}

bkm_evident::orderkey_optional& bkm_evident::
orderkey ()
{
  return this->orderkey_;
}

void bkm_evident::
orderkey (const orderkey_type& x)
{
  this->orderkey_.set (x);
}

void bkm_evident::
orderkey (const orderkey_optional& x)
{
  this->orderkey_ = x;
}

void bkm_evident::
orderkey (::std::unique_ptr< orderkey_type > x)
{
  this->orderkey_.set (std::move (x));
}

const bkm_evident::number_optional& bkm_evident::
number () const
{
  return this->number_;
}

bkm_evident::number_optional& bkm_evident::
number ()
{
  return this->number_;
}

void bkm_evident::
number (const number_type& x)
{
  this->number_.set (x);
}

void bkm_evident::
number (const number_optional& x)
{
  this->number_ = x;
}

void bkm_evident::
number (::std::unique_ptr< number_type > x)
{
  this->number_.set (std::move (x));
}

const bkm_evident::numberproject_optional& bkm_evident::
numberproject () const
{
  return this->numberproject_;
}

bkm_evident::numberproject_optional& bkm_evident::
numberproject ()
{
  return this->numberproject_;
}

void bkm_evident::
numberproject (const numberproject_type& x)
{
  this->numberproject_.set (x);
}

void bkm_evident::
numberproject (const numberproject_optional& x)
{
  this->numberproject_ = x;
}

void bkm_evident::
numberproject (::std::unique_ptr< numberproject_type > x)
{
  this->numberproject_.set (std::move (x));
}

const bkm_evident::extern1_optional& bkm_evident::
extern1 () const
{
  return this->extern1_;
}

bkm_evident::extern1_optional& bkm_evident::
extern1 ()
{
  return this->extern1_;
}

void bkm_evident::
extern1 (const extern1_type& x)
{
  this->extern1_.set (x);
}

void bkm_evident::
extern1 (const extern1_optional& x)
{
  this->extern1_ = x;
}

void bkm_evident::
extern1 (::std::unique_ptr< extern1_type > x)
{
  this->extern1_.set (std::move (x));
}

const bkm_evident::extern2_optional& bkm_evident::
extern2 () const
{
  return this->extern2_;
}

bkm_evident::extern2_optional& bkm_evident::
extern2 ()
{
  return this->extern2_;
}

void bkm_evident::
extern2 (const extern2_type& x)
{
  this->extern2_.set (x);
}

void bkm_evident::
extern2 (const extern2_optional& x)
{
  this->extern2_ = x;
}

void bkm_evident::
extern2 (::std::unique_ptr< extern2_type > x)
{
  this->extern2_.set (std::move (x));
}

const bkm_evident::extern3_optional& bkm_evident::
extern3 () const
{
  return this->extern3_;
}

bkm_evident::extern3_optional& bkm_evident::
extern3 ()
{
  return this->extern3_;
}

void bkm_evident::
extern3 (const extern3_type& x)
{
  this->extern3_.set (x);
}

void bkm_evident::
extern3 (const extern3_optional& x)
{
  this->extern3_ = x;
}

void bkm_evident::
extern3 (::std::unique_ptr< extern3_type > x)
{
  this->extern3_.set (std::move (x));
}

const bkm_evident::evident_optional& bkm_evident::
evident () const
{
  return this->evident_;
}

bkm_evident::evident_optional& bkm_evident::
evident ()
{
  return this->evident_;
}

void bkm_evident::
evident (const evident_type& x)
{
  this->evident_.set (x);
}

void bkm_evident::
evident (const evident_optional& x)
{
  this->evident_ = x;
}

void bkm_evident::
evident (::std::unique_ptr< evident_type > x)
{
  this->evident_.set (std::move (x));
}

const bkm_evident::evidentnote_optional& bkm_evident::
evidentnote () const
{
  return this->evidentnote_;
}

bkm_evident::evidentnote_optional& bkm_evident::
evidentnote ()
{
  return this->evidentnote_;
}

void bkm_evident::
evidentnote (const evidentnote_type& x)
{
  this->evidentnote_.set (x);
}

void bkm_evident::
evidentnote (const evidentnote_optional& x)
{
  this->evidentnote_ = x;
}

void bkm_evident::
evidentnote (::std::unique_ptr< evidentnote_type > x)
{
  this->evidentnote_.set (std::move (x));
}

const bkm_evident::evidentbtr_optional& bkm_evident::
evidentbtr () const
{
  return this->evidentbtr_;
}

bkm_evident::evidentbtr_optional& bkm_evident::
evidentbtr ()
{
  return this->evidentbtr_;
}

void bkm_evident::
evidentbtr (const evidentbtr_type& x)
{
  this->evidentbtr_.set (x);
}

void bkm_evident::
evidentbtr (const evidentbtr_optional& x)
{
  this->evidentbtr_ = x;
}

void bkm_evident::
evidentbtr (::std::unique_ptr< evidentbtr_type > x)
{
  this->evidentbtr_.set (std::move (x));
}

const bkm_evident::offerbtr_optional& bkm_evident::
offerbtr () const
{
  return this->offerbtr_;
}

bkm_evident::offerbtr_optional& bkm_evident::
offerbtr ()
{
  return this->offerbtr_;
}

void bkm_evident::
offerbtr (const offerbtr_type& x)
{
  this->offerbtr_.set (x);
}

void bkm_evident::
offerbtr (const offerbtr_optional& x)
{
  this->offerbtr_ = x;
}

void bkm_evident::
offerbtr (::std::unique_ptr< offerbtr_type > x)
{
  this->offerbtr_.set (std::move (x));
}

const bkm_evident::ratedbtr_optional& bkm_evident::
ratedbtr () const
{
  return this->ratedbtr_;
}

bkm_evident::ratedbtr_optional& bkm_evident::
ratedbtr ()
{
  return this->ratedbtr_;
}

void bkm_evident::
ratedbtr (const ratedbtr_type& x)
{
  this->ratedbtr_.set (x);
}

void bkm_evident::
ratedbtr (const ratedbtr_optional& x)
{
  this->ratedbtr_ = x;
}

void bkm_evident::
ratedbtr (::std::unique_ptr< ratedbtr_type > x)
{
  this->ratedbtr_.set (std::move (x));
}

const bkm_evident::entrydate_optional& bkm_evident::
entrydate () const
{
  return this->entrydate_;
}

bkm_evident::entrydate_optional& bkm_evident::
entrydate ()
{
  return this->entrydate_;
}

void bkm_evident::
entrydate (const entrydate_type& x)
{
  this->entrydate_.set (x);
}

void bkm_evident::
entrydate (const entrydate_optional& x)
{
  this->entrydate_ = x;
}

void bkm_evident::
entrydate (::std::unique_ptr< entrydate_type > x)
{
  this->entrydate_.set (std::move (x));
}

const bkm_evident::signdate_optional& bkm_evident::
signdate () const
{
  return this->signdate_;
}

bkm_evident::signdate_optional& bkm_evident::
signdate ()
{
  return this->signdate_;
}

void bkm_evident::
signdate (const signdate_type& x)
{
  this->signdate_.set (x);
}

void bkm_evident::
signdate (const signdate_optional& x)
{
  this->signdate_ = x;
}

void bkm_evident::
signdate (::std::unique_ptr< signdate_type > x)
{
  this->signdate_.set (std::move (x));
}

const bkm_evident::statuscode_optional& bkm_evident::
statuscode () const
{
  return this->statuscode_;
}

bkm_evident::statuscode_optional& bkm_evident::
statuscode ()
{
  return this->statuscode_;
}

void bkm_evident::
statuscode (const statuscode_type& x)
{
  this->statuscode_.set (x);
}

void bkm_evident::
statuscode (const statuscode_optional& x)
{
  this->statuscode_ = x;
}

void bkm_evident::
statuscode (::std::unique_ptr< statuscode_type > x)
{
  this->statuscode_.set (std::move (x));
}

const bkm_evident::statusname_optional& bkm_evident::
statusname () const
{
  return this->statusname_;
}

bkm_evident::statusname_optional& bkm_evident::
statusname ()
{
  return this->statusname_;
}

void bkm_evident::
statusname (const statusname_type& x)
{
  this->statusname_.set (x);
}

void bkm_evident::
statusname (const statusname_optional& x)
{
  this->statusname_ = x;
}

void bkm_evident::
statusname (::std::unique_ptr< statusname_type > x)
{
  this->statusname_.set (std::move (x));
}

const bkm_evident::groupcode_optional& bkm_evident::
groupcode () const
{
  return this->groupcode_;
}

bkm_evident::groupcode_optional& bkm_evident::
groupcode ()
{
  return this->groupcode_;
}

void bkm_evident::
groupcode (const groupcode_type& x)
{
  this->groupcode_.set (x);
}

void bkm_evident::
groupcode (const groupcode_optional& x)
{
  this->groupcode_ = x;
}

void bkm_evident::
groupcode (::std::unique_ptr< groupcode_type > x)
{
  this->groupcode_.set (std::move (x));
}

const bkm_evident::groupname_optional& bkm_evident::
groupname () const
{
  return this->groupname_;
}

bkm_evident::groupname_optional& bkm_evident::
groupname ()
{
  return this->groupname_;
}

void bkm_evident::
groupname (const groupname_type& x)
{
  this->groupname_.set (x);
}

void bkm_evident::
groupname (const groupname_optional& x)
{
  this->groupname_ = x;
}

void bkm_evident::
groupname (::std::unique_ptr< groupname_type > x)
{
  this->groupname_.set (std::move (x));
}

const bkm_evident::desc_optional& bkm_evident::
desc () const
{
  return this->desc_;
}

bkm_evident::desc_optional& bkm_evident::
desc ()
{
  return this->desc_;
}

void bkm_evident::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void bkm_evident::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void bkm_evident::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const bkm_evident::note_optional& bkm_evident::
note () const
{
  return this->note_;
}

bkm_evident::note_optional& bkm_evident::
note ()
{
  return this->note_;
}

void bkm_evident::
note (const note_type& x)
{
  this->note_.set (x);
}

void bkm_evident::
note (const note_optional& x)
{
  this->note_ = x;
}

void bkm_evident::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const bkm_evident::remark_optional& bkm_evident::
remark () const
{
  return this->remark_;
}

bkm_evident::remark_optional& bkm_evident::
remark ()
{
  return this->remark_;
}

void bkm_evident::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void bkm_evident::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void bkm_evident::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}


// bkm_backup
// 

const bkm_backup::id_optional& bkm_backup::
id () const
{
  return this->id_;
}

bkm_backup::id_optional& bkm_backup::
id ()
{
  return this->id_;
}

void bkm_backup::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_backup::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_backup::externalkey_type& bkm_backup::
externalkey () const
{
  return this->externalkey_.get ();
}

bkm_backup::externalkey_type& bkm_backup::
externalkey ()
{
  return this->externalkey_.get ();
}

void bkm_backup::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void bkm_backup::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const bkm_backup::controlcode_optional& bkm_backup::
controlcode () const
{
  return this->controlcode_;
}

bkm_backup::controlcode_optional& bkm_backup::
controlcode ()
{
  return this->controlcode_;
}

void bkm_backup::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void bkm_backup::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void bkm_backup::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const bkm_backup::matchfield_optional& bkm_backup::
matchfield () const
{
  return this->matchfield_;
}

bkm_backup::matchfield_optional& bkm_backup::
matchfield ()
{
  return this->matchfield_;
}

void bkm_backup::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void bkm_backup::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void bkm_backup::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const bkm_backup::projectkey_optional& bkm_backup::
projectkey () const
{
  return this->projectkey_;
}

bkm_backup::projectkey_optional& bkm_backup::
projectkey ()
{
  return this->projectkey_;
}

void bkm_backup::
projectkey (const projectkey_type& x)
{
  this->projectkey_.set (x);
}

void bkm_backup::
projectkey (const projectkey_optional& x)
{
  this->projectkey_ = x;
}

void bkm_backup::
projectkey (::std::unique_ptr< projectkey_type > x)
{
  this->projectkey_.set (std::move (x));
}

const bkm_backup::orderkey_optional& bkm_backup::
orderkey () const
{
  return this->orderkey_;
}

bkm_backup::orderkey_optional& bkm_backup::
orderkey ()
{
  return this->orderkey_;
}

void bkm_backup::
orderkey (const orderkey_type& x)
{
  this->orderkey_.set (x);
}

void bkm_backup::
orderkey (const orderkey_optional& x)
{
  this->orderkey_ = x;
}

void bkm_backup::
orderkey (::std::unique_ptr< orderkey_type > x)
{
  this->orderkey_.set (std::move (x));
}

const bkm_backup::code_optional& bkm_backup::
code () const
{
  return this->code_;
}

bkm_backup::code_optional& bkm_backup::
code ()
{
  return this->code_;
}

void bkm_backup::
code (const code_type& x)
{
  this->code_.set (x);
}

void bkm_backup::
code (const code_optional& x)
{
  this->code_ = x;
}

void bkm_backup::
code (::std::unique_ptr< code_type > x)
{
  this->code_.set (std::move (x));
}

const bkm_backup::extern1_optional& bkm_backup::
extern1 () const
{
  return this->extern1_;
}

bkm_backup::extern1_optional& bkm_backup::
extern1 ()
{
  return this->extern1_;
}

void bkm_backup::
extern1 (const extern1_type& x)
{
  this->extern1_.set (x);
}

void bkm_backup::
extern1 (const extern1_optional& x)
{
  this->extern1_ = x;
}

void bkm_backup::
extern1 (::std::unique_ptr< extern1_type > x)
{
  this->extern1_.set (std::move (x));
}

const bkm_backup::extern2_optional& bkm_backup::
extern2 () const
{
  return this->extern2_;
}

bkm_backup::extern2_optional& bkm_backup::
extern2 ()
{
  return this->extern2_;
}

void bkm_backup::
extern2 (const extern2_type& x)
{
  this->extern2_.set (x);
}

void bkm_backup::
extern2 (const extern2_optional& x)
{
  this->extern2_ = x;
}

void bkm_backup::
extern2 (::std::unique_ptr< extern2_type > x)
{
  this->extern2_.set (std::move (x));
}

const bkm_backup::extern3_optional& bkm_backup::
extern3 () const
{
  return this->extern3_;
}

bkm_backup::extern3_optional& bkm_backup::
extern3 ()
{
  return this->extern3_;
}

void bkm_backup::
extern3 (const extern3_type& x)
{
  this->extern3_.set (x);
}

void bkm_backup::
extern3 (const extern3_optional& x)
{
  this->extern3_ = x;
}

void bkm_backup::
extern3 (::std::unique_ptr< extern3_type > x)
{
  this->extern3_.set (std::move (x));
}

const bkm_backup::backup_optional& bkm_backup::
backup () const
{
  return this->backup_;
}

bkm_backup::backup_optional& bkm_backup::
backup ()
{
  return this->backup_;
}

void bkm_backup::
backup (const backup_type& x)
{
  this->backup_.set (x);
}

void bkm_backup::
backup (const backup_optional& x)
{
  this->backup_ = x;
}

void bkm_backup::
backup (::std::unique_ptr< backup_type > x)
{
  this->backup_.set (std::move (x));
}

const bkm_backup::contractid_optional& bkm_backup::
contractid () const
{
  return this->contractid_;
}

bkm_backup::contractid_optional& bkm_backup::
contractid ()
{
  return this->contractid_;
}

void bkm_backup::
contractid (const contractid_type& x)
{
  this->contractid_.set (x);
}

void bkm_backup::
contractid (const contractid_optional& x)
{
  this->contractid_ = x;
}

void bkm_backup::
contractid (::std::unique_ptr< contractid_type > x)
{
  this->contractid_.set (std::move (x));
}

const bkm_backup::backupbtr_optional& bkm_backup::
backupbtr () const
{
  return this->backupbtr_;
}

bkm_backup::backupbtr_optional& bkm_backup::
backupbtr ()
{
  return this->backupbtr_;
}

void bkm_backup::
backupbtr (const backupbtr_type& x)
{
  this->backupbtr_.set (x);
}

void bkm_backup::
backupbtr (const backupbtr_optional& x)
{
  this->backupbtr_ = x;
}

void bkm_backup::
backupbtr (::std::unique_ptr< backupbtr_type > x)
{
  this->backupbtr_.set (std::move (x));
}

const bkm_backup::issuedate_optional& bkm_backup::
issuedate () const
{
  return this->issuedate_;
}

bkm_backup::issuedate_optional& bkm_backup::
issuedate ()
{
  return this->issuedate_;
}

void bkm_backup::
issuedate (const issuedate_type& x)
{
  this->issuedate_.set (x);
}

void bkm_backup::
issuedate (const issuedate_optional& x)
{
  this->issuedate_ = x;
}

void bkm_backup::
issuedate (::std::unique_ptr< issuedate_type > x)
{
  this->issuedate_.set (std::move (x));
}

const bkm_backup::periodofnotice_optional& bkm_backup::
periodofnotice () const
{
  return this->periodofnotice_;
}

bkm_backup::periodofnotice_optional& bkm_backup::
periodofnotice ()
{
  return this->periodofnotice_;
}

void bkm_backup::
periodofnotice (const periodofnotice_type& x)
{
  this->periodofnotice_.set (x);
}

void bkm_backup::
periodofnotice (const periodofnotice_optional& x)
{
  this->periodofnotice_ = x;
}

void bkm_backup::
periodofnotice (::std::unique_ptr< periodofnotice_type > x)
{
  this->periodofnotice_.set (std::move (x));
}

const bkm_backup::returndate_optional& bkm_backup::
returndate () const
{
  return this->returndate_;
}

bkm_backup::returndate_optional& bkm_backup::
returndate ()
{
  return this->returndate_;
}

void bkm_backup::
returndate (const returndate_type& x)
{
  this->returndate_.set (x);
}

void bkm_backup::
returndate (const returndate_optional& x)
{
  this->returndate_ = x;
}

void bkm_backup::
returndate (::std::unique_ptr< returndate_type > x)
{
  this->returndate_.set (std::move (x));
}

const bkm_backup::quitdate_optional& bkm_backup::
quitdate () const
{
  return this->quitdate_;
}

bkm_backup::quitdate_optional& bkm_backup::
quitdate ()
{
  return this->quitdate_;
}

void bkm_backup::
quitdate (const quitdate_type& x)
{
  this->quitdate_.set (x);
}

void bkm_backup::
quitdate (const quitdate_optional& x)
{
  this->quitdate_ = x;
}

void bkm_backup::
quitdate (::std::unique_ptr< quitdate_type > x)
{
  this->quitdate_.set (std::move (x));
}

const bkm_backup::validfromdate_optional& bkm_backup::
validfromdate () const
{
  return this->validfromdate_;
}

bkm_backup::validfromdate_optional& bkm_backup::
validfromdate ()
{
  return this->validfromdate_;
}

void bkm_backup::
validfromdate (const validfromdate_type& x)
{
  this->validfromdate_.set (x);
}

void bkm_backup::
validfromdate (const validfromdate_optional& x)
{
  this->validfromdate_ = x;
}

void bkm_backup::
validfromdate (::std::unique_ptr< validfromdate_type > x)
{
  this->validfromdate_.set (std::move (x));
}

const bkm_backup::validtodate_optional& bkm_backup::
validtodate () const
{
  return this->validtodate_;
}

bkm_backup::validtodate_optional& bkm_backup::
validtodate ()
{
  return this->validtodate_;
}

void bkm_backup::
validtodate (const validtodate_type& x)
{
  this->validtodate_.set (x);
}

void bkm_backup::
validtodate (const validtodate_optional& x)
{
  this->validtodate_ = x;
}

void bkm_backup::
validtodate (::std::unique_ptr< validtodate_type > x)
{
  this->validtodate_.set (std::move (x));
}

const bkm_backup::warrantyfromdate_optional& bkm_backup::
warrantyfromdate () const
{
  return this->warrantyfromdate_;
}

bkm_backup::warrantyfromdate_optional& bkm_backup::
warrantyfromdate ()
{
  return this->warrantyfromdate_;
}

void bkm_backup::
warrantyfromdate (const warrantyfromdate_type& x)
{
  this->warrantyfromdate_.set (x);
}

void bkm_backup::
warrantyfromdate (const warrantyfromdate_optional& x)
{
  this->warrantyfromdate_ = x;
}

void bkm_backup::
warrantyfromdate (::std::unique_ptr< warrantyfromdate_type > x)
{
  this->warrantyfromdate_.set (std::move (x));
}

const bkm_backup::warrantytodate_optional& bkm_backup::
warrantytodate () const
{
  return this->warrantytodate_;
}

bkm_backup::warrantytodate_optional& bkm_backup::
warrantytodate ()
{
  return this->warrantytodate_;
}

void bkm_backup::
warrantytodate (const warrantytodate_type& x)
{
  this->warrantytodate_.set (x);
}

void bkm_backup::
warrantytodate (const warrantytodate_optional& x)
{
  this->warrantytodate_ = x;
}

void bkm_backup::
warrantytodate (::std::unique_ptr< warrantytodate_type > x)
{
  this->warrantytodate_.set (std::move (x));
}

const bkm_backup::account_optional& bkm_backup::
account () const
{
  return this->account_;
}

bkm_backup::account_optional& bkm_backup::
account ()
{
  return this->account_;
}

void bkm_backup::
account (const account_type& x)
{
  this->account_.set (x);
}

void bkm_backup::
account (const account_optional& x)
{
  this->account_ = x;
}

void bkm_backup::
account (::std::unique_ptr< account_type > x)
{
  this->account_.set (std::move (x));
}

const bkm_backup::iban_optional& bkm_backup::
iban () const
{
  return this->iban_;
}

bkm_backup::iban_optional& bkm_backup::
iban ()
{
  return this->iban_;
}

void bkm_backup::
iban (const iban_type& x)
{
  this->iban_.set (x);
}

void bkm_backup::
iban (const iban_optional& x)
{
  this->iban_ = x;
}

void bkm_backup::
iban (::std::unique_ptr< iban_type > x)
{
  this->iban_.set (std::move (x));
}

const bkm_backup::bankkey_optional& bkm_backup::
bankkey () const
{
  return this->bankkey_;
}

bkm_backup::bankkey_optional& bkm_backup::
bankkey ()
{
  return this->bankkey_;
}

void bkm_backup::
bankkey (const bankkey_type& x)
{
  this->bankkey_.set (x);
}

void bkm_backup::
bankkey (const bankkey_optional& x)
{
  this->bankkey_ = x;
}

void bkm_backup::
bankkey (::std::unique_ptr< bankkey_type > x)
{
  this->bankkey_.set (std::move (x));
}

const bkm_backup::bankswift_optional& bkm_backup::
bankswift () const
{
  return this->bankswift_;
}

bkm_backup::bankswift_optional& bkm_backup::
bankswift ()
{
  return this->bankswift_;
}

void bkm_backup::
bankswift (const bankswift_type& x)
{
  this->bankswift_.set (x);
}

void bkm_backup::
bankswift (const bankswift_optional& x)
{
  this->bankswift_ = x;
}

void bkm_backup::
bankswift (::std::unique_ptr< bankswift_type > x)
{
  this->bankswift_.set (std::move (x));
}

const bkm_backup::typecode_optional& bkm_backup::
typecode () const
{
  return this->typecode_;
}

bkm_backup::typecode_optional& bkm_backup::
typecode ()
{
  return this->typecode_;
}

void bkm_backup::
typecode (const typecode_type& x)
{
  this->typecode_.set (x);
}

void bkm_backup::
typecode (const typecode_optional& x)
{
  this->typecode_ = x;
}

void bkm_backup::
typecode (::std::unique_ptr< typecode_type > x)
{
  this->typecode_.set (std::move (x));
}

const bkm_backup::typename_optional& bkm_backup::
typename_ () const
{
  return this->typename__;
}

bkm_backup::typename_optional& bkm_backup::
typename_ ()
{
  return this->typename__;
}

void bkm_backup::
typename_ (const typename_type& x)
{
  this->typename__.set (x);
}

void bkm_backup::
typename_ (const typename_optional& x)
{
  this->typename__ = x;
}

void bkm_backup::
typename_ (::std::unique_ptr< typename_type > x)
{
  this->typename__.set (std::move (x));
}

const bkm_backup::statuscode_optional& bkm_backup::
statuscode () const
{
  return this->statuscode_;
}

bkm_backup::statuscode_optional& bkm_backup::
statuscode ()
{
  return this->statuscode_;
}

void bkm_backup::
statuscode (const statuscode_type& x)
{
  this->statuscode_.set (x);
}

void bkm_backup::
statuscode (const statuscode_optional& x)
{
  this->statuscode_ = x;
}

void bkm_backup::
statuscode (::std::unique_ptr< statuscode_type > x)
{
  this->statuscode_.set (std::move (x));
}

const bkm_backup::statusname_optional& bkm_backup::
statusname () const
{
  return this->statusname_;
}

bkm_backup::statusname_optional& bkm_backup::
statusname ()
{
  return this->statusname_;
}

void bkm_backup::
statusname (const statusname_type& x)
{
  this->statusname_.set (x);
}

void bkm_backup::
statusname (const statusname_optional& x)
{
  this->statusname_ = x;
}

void bkm_backup::
statusname (::std::unique_ptr< statusname_type > x)
{
  this->statusname_.set (std::move (x));
}

const bkm_backup::groupcode_optional& bkm_backup::
groupcode () const
{
  return this->groupcode_;
}

bkm_backup::groupcode_optional& bkm_backup::
groupcode ()
{
  return this->groupcode_;
}

void bkm_backup::
groupcode (const groupcode_type& x)
{
  this->groupcode_.set (x);
}

void bkm_backup::
groupcode (const groupcode_optional& x)
{
  this->groupcode_ = x;
}

void bkm_backup::
groupcode (::std::unique_ptr< groupcode_type > x)
{
  this->groupcode_.set (std::move (x));
}

const bkm_backup::groupname_optional& bkm_backup::
groupname () const
{
  return this->groupname_;
}

bkm_backup::groupname_optional& bkm_backup::
groupname ()
{
  return this->groupname_;
}

void bkm_backup::
groupname (const groupname_type& x)
{
  this->groupname_.set (x);
}

void bkm_backup::
groupname (const groupname_optional& x)
{
  this->groupname_ = x;
}

void bkm_backup::
groupname (::std::unique_ptr< groupname_type > x)
{
  this->groupname_.set (std::move (x));
}

const bkm_backup::desc_optional& bkm_backup::
desc () const
{
  return this->desc_;
}

bkm_backup::desc_optional& bkm_backup::
desc ()
{
  return this->desc_;
}

void bkm_backup::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void bkm_backup::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void bkm_backup::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const bkm_backup::note_optional& bkm_backup::
note () const
{
  return this->note_;
}

bkm_backup::note_optional& bkm_backup::
note ()
{
  return this->note_;
}

void bkm_backup::
note (const note_type& x)
{
  this->note_.set (x);
}

void bkm_backup::
note (const note_optional& x)
{
  this->note_ = x;
}

void bkm_backup::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const bkm_backup::remark_optional& bkm_backup::
remark () const
{
  return this->remark_;
}

bkm_backup::remark_optional& bkm_backup::
remark ()
{
  return this->remark_;
}

void bkm_backup::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void bkm_backup::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void bkm_backup::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}


// bkm_invdeftype
// 

const bkm_invdeftype::code_optional& bkm_invdeftype::
code () const
{
  return this->code_;
}

bkm_invdeftype::code_optional& bkm_invdeftype::
code ()
{
  return this->code_;
}

void bkm_invdeftype::
code (const code_type& x)
{
  this->code_.set (x);
}

void bkm_invdeftype::
code (const code_optional& x)
{
  this->code_ = x;
}

void bkm_invdeftype::
code (::std::unique_ptr< code_type > x)
{
  this->code_.set (std::move (x));
}

const bkm_invdeftype::invoicedef_type& bkm_invdeftype::
invoicedef () const
{
  return this->invoicedef_.get ();
}

bkm_invdeftype::invoicedef_type& bkm_invdeftype::
invoicedef ()
{
  return this->invoicedef_.get ();
}

void bkm_invdeftype::
invoicedef (const invoicedef_type& x)
{
  this->invoicedef_.set (x);
}

void bkm_invdeftype::
invoicedef (::std::unique_ptr< invoicedef_type > x)
{
  this->invoicedef_.set (std::move (x));
}

const bkm_invdeftype::valueprz_optional& bkm_invdeftype::
valueprz () const
{
  return this->valueprz_;
}

bkm_invdeftype::valueprz_optional& bkm_invdeftype::
valueprz ()
{
  return this->valueprz_;
}

void bkm_invdeftype::
valueprz (const valueprz_type& x)
{
  this->valueprz_.set (x);
}

void bkm_invdeftype::
valueprz (const valueprz_optional& x)
{
  this->valueprz_ = x;
}

void bkm_invdeftype::
valueprz (::std::unique_ptr< valueprz_type > x)
{
  this->valueprz_.set (std::move (x));
}


// bkm_invoice
// 

const bkm_invoice::bkm_invoicepos_sequence& bkm_invoice::
bkm_invoicepos () const
{
  return this->bkm_invoicepos_;
}

bkm_invoice::bkm_invoicepos_sequence& bkm_invoice::
bkm_invoicepos ()
{
  return this->bkm_invoicepos_;
}

void bkm_invoice::
bkm_invoicepos (const bkm_invoicepos_sequence& s)
{
  this->bkm_invoicepos_ = s;
}

const bkm_invoice::bkm_splitinvoice_sequence& bkm_invoice::
bkm_splitinvoice () const
{
  return this->bkm_splitinvoice_;
}

bkm_invoice::bkm_splitinvoice_sequence& bkm_invoice::
bkm_splitinvoice ()
{
  return this->bkm_splitinvoice_;
}

void bkm_invoice::
bkm_splitinvoice (const bkm_splitinvoice_sequence& s)
{
  this->bkm_splitinvoice_ = s;
}

const bkm_invoice::id_optional& bkm_invoice::
id () const
{
  return this->id_;
}

bkm_invoice::id_optional& bkm_invoice::
id ()
{
  return this->id_;
}

void bkm_invoice::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_invoice::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_invoice::externalkey_type& bkm_invoice::
externalkey () const
{
  return this->externalkey_.get ();
}

bkm_invoice::externalkey_type& bkm_invoice::
externalkey ()
{
  return this->externalkey_.get ();
}

void bkm_invoice::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void bkm_invoice::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const bkm_invoice::matchfield_optional& bkm_invoice::
matchfield () const
{
  return this->matchfield_;
}

bkm_invoice::matchfield_optional& bkm_invoice::
matchfield ()
{
  return this->matchfield_;
}

void bkm_invoice::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void bkm_invoice::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void bkm_invoice::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const bkm_invoice::partcode_optional& bkm_invoice::
partcode () const
{
  return this->partcode_;
}

bkm_invoice::partcode_optional& bkm_invoice::
partcode ()
{
  return this->partcode_;
}

void bkm_invoice::
partcode (const partcode_type& x)
{
  this->partcode_.set (x);
}

void bkm_invoice::
partcode (const partcode_optional& x)
{
  this->partcode_ = x;
}

void bkm_invoice::
partcode (::std::unique_ptr< partcode_type > x)
{
  this->partcode_.set (std::move (x));
}

const bkm_invoice::controlcode_optional& bkm_invoice::
controlcode () const
{
  return this->controlcode_;
}

bkm_invoice::controlcode_optional& bkm_invoice::
controlcode ()
{
  return this->controlcode_;
}

void bkm_invoice::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void bkm_invoice::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void bkm_invoice::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const bkm_invoice::projectkey_optional& bkm_invoice::
projectkey () const
{
  return this->projectkey_;
}

bkm_invoice::projectkey_optional& bkm_invoice::
projectkey ()
{
  return this->projectkey_;
}

void bkm_invoice::
projectkey (const projectkey_type& x)
{
  this->projectkey_.set (x);
}

void bkm_invoice::
projectkey (const projectkey_optional& x)
{
  this->projectkey_ = x;
}

void bkm_invoice::
projectkey (::std::unique_ptr< projectkey_type > x)
{
  this->projectkey_.set (std::move (x));
}

const bkm_invoice::orderkey_optional& bkm_invoice::
orderkey () const
{
  return this->orderkey_;
}

bkm_invoice::orderkey_optional& bkm_invoice::
orderkey ()
{
  return this->orderkey_;
}

void bkm_invoice::
orderkey (const orderkey_type& x)
{
  this->orderkey_.set (x);
}

void bkm_invoice::
orderkey (const orderkey_optional& x)
{
  this->orderkey_ = x;
}

void bkm_invoice::
orderkey (::std::unique_ptr< orderkey_type > x)
{
  this->orderkey_.set (std::move (x));
}

const bkm_invoice::external_optional& bkm_invoice::
external () const
{
  return this->external_;
}

bkm_invoice::external_optional& bkm_invoice::
external ()
{
  return this->external_;
}

void bkm_invoice::
external (const external_type& x)
{
  this->external_.set (x);
}

void bkm_invoice::
external (const external_optional& x)
{
  this->external_ = x;
}

void bkm_invoice::
external (::std::unique_ptr< external_type > x)
{
  this->external_.set (std::move (x));
}

const bkm_invoice::calculation_optional& bkm_invoice::
calculation () const
{
  return this->calculation_;
}

bkm_invoice::calculation_optional& bkm_invoice::
calculation ()
{
  return this->calculation_;
}

void bkm_invoice::
calculation (const calculation_type& x)
{
  this->calculation_.set (x);
}

void bkm_invoice::
calculation (const calculation_optional& x)
{
  this->calculation_ = x;
}

void bkm_invoice::
calculation (::std::unique_ptr< calculation_type > x)
{
  this->calculation_.set (std::move (x));
}

const bkm_invoice::typecode_optional& bkm_invoice::
typecode () const
{
  return this->typecode_;
}

bkm_invoice::typecode_optional& bkm_invoice::
typecode ()
{
  return this->typecode_;
}

void bkm_invoice::
typecode (const typecode_type& x)
{
  this->typecode_.set (x);
}

void bkm_invoice::
typecode (const typecode_optional& x)
{
  this->typecode_ = x;
}

void bkm_invoice::
typecode (::std::unique_ptr< typecode_type > x)
{
  this->typecode_.set (std::move (x));
}

const bkm_invoice::typecount_optional& bkm_invoice::
typecount () const
{
  return this->typecount_;
}

bkm_invoice::typecount_optional& bkm_invoice::
typecount ()
{
  return this->typecount_;
}

void bkm_invoice::
typecount (const typecount_type& x)
{
  this->typecount_.set (x);
}

void bkm_invoice::
typecount (const typecount_optional& x)
{
  this->typecount_ = x;
}

const bkm_invoice::number_optional& bkm_invoice::
number () const
{
  return this->number_;
}

bkm_invoice::number_optional& bkm_invoice::
number ()
{
  return this->number_;
}

void bkm_invoice::
number (const number_type& x)
{
  this->number_.set (x);
}

void bkm_invoice::
number (const number_optional& x)
{
  this->number_ = x;
}

void bkm_invoice::
number (::std::unique_ptr< number_type > x)
{
  this->number_.set (std::move (x));
}

const bkm_invoice::numbercol_optional& bkm_invoice::
numbercol () const
{
  return this->numbercol_;
}

bkm_invoice::numbercol_optional& bkm_invoice::
numbercol ()
{
  return this->numbercol_;
}

void bkm_invoice::
numbercol (const numbercol_type& x)
{
  this->numbercol_.set (x);
}

void bkm_invoice::
numbercol (const numbercol_optional& x)
{
  this->numbercol_ = x;
}

void bkm_invoice::
numbercol (::std::unique_ptr< numbercol_type > x)
{
  this->numbercol_.set (std::move (x));
}

const bkm_invoice::invoicedate_optional& bkm_invoice::
invoicedate () const
{
  return this->invoicedate_;
}

bkm_invoice::invoicedate_optional& bkm_invoice::
invoicedate ()
{
  return this->invoicedate_;
}

void bkm_invoice::
invoicedate (const invoicedate_type& x)
{
  this->invoicedate_.set (x);
}

void bkm_invoice::
invoicedate (const invoicedate_optional& x)
{
  this->invoicedate_ = x;
}

void bkm_invoice::
invoicedate (::std::unique_ptr< invoicedate_type > x)
{
  this->invoicedate_.set (std::move (x));
}

const bkm_invoice::entrydate_optional& bkm_invoice::
entrydate () const
{
  return this->entrydate_;
}

bkm_invoice::entrydate_optional& bkm_invoice::
entrydate ()
{
  return this->entrydate_;
}

void bkm_invoice::
entrydate (const entrydate_type& x)
{
  this->entrydate_.set (x);
}

void bkm_invoice::
entrydate (const entrydate_optional& x)
{
  this->entrydate_ = x;
}

void bkm_invoice::
entrydate (::std::unique_ptr< entrydate_type > x)
{
  this->entrydate_.set (std::move (x));
}

const bkm_invoice::entry2date_optional& bkm_invoice::
entry2date () const
{
  return this->entry2date_;
}

bkm_invoice::entry2date_optional& bkm_invoice::
entry2date ()
{
  return this->entry2date_;
}

void bkm_invoice::
entry2date (const entry2date_type& x)
{
  this->entry2date_.set (x);
}

void bkm_invoice::
entry2date (const entry2date_optional& x)
{
  this->entry2date_ = x;
}

void bkm_invoice::
entry2date (::std::unique_ptr< entry2date_type > x)
{
  this->entry2date_.set (std::move (x));
}

const bkm_invoice::verifydate_optional& bkm_invoice::
verifydate () const
{
  return this->verifydate_;
}

bkm_invoice::verifydate_optional& bkm_invoice::
verifydate ()
{
  return this->verifydate_;
}

void bkm_invoice::
verifydate (const verifydate_type& x)
{
  this->verifydate_.set (x);
}

void bkm_invoice::
verifydate (const verifydate_optional& x)
{
  this->verifydate_ = x;
}

void bkm_invoice::
verifydate (::std::unique_ptr< verifydate_type > x)
{
  this->verifydate_.set (std::move (x));
}

const bkm_invoice::discountdate_optional& bkm_invoice::
discountdate () const
{
  return this->discountdate_;
}

bkm_invoice::discountdate_optional& bkm_invoice::
discountdate ()
{
  return this->discountdate_;
}

void bkm_invoice::
discountdate (const discountdate_type& x)
{
  this->discountdate_.set (x);
}

void bkm_invoice::
discountdate (const discountdate_optional& x)
{
  this->discountdate_ = x;
}

void bkm_invoice::
discountdate (::std::unique_ptr< discountdate_type > x)
{
  this->discountdate_.set (std::move (x));
}

const bkm_invoice::discountnto_optional& bkm_invoice::
discountnto () const
{
  return this->discountnto_;
}

bkm_invoice::discountnto_optional& bkm_invoice::
discountnto ()
{
  return this->discountnto_;
}

void bkm_invoice::
discountnto (const discountnto_type& x)
{
  this->discountnto_.set (x);
}

void bkm_invoice::
discountnto (const discountnto_optional& x)
{
  this->discountnto_ = x;
}

void bkm_invoice::
discountnto (::std::unique_ptr< discountnto_type > x)
{
  this->discountnto_.set (std::move (x));
}

const bkm_invoice::agingdate_optional& bkm_invoice::
agingdate () const
{
  return this->agingdate_;
}

bkm_invoice::agingdate_optional& bkm_invoice::
agingdate ()
{
  return this->agingdate_;
}

void bkm_invoice::
agingdate (const agingdate_type& x)
{
  this->agingdate_.set (x);
}

void bkm_invoice::
agingdate (const agingdate_optional& x)
{
  this->agingdate_ = x;
}

void bkm_invoice::
agingdate (::std::unique_ptr< agingdate_type > x)
{
  this->agingdate_.set (std::move (x));
}

const bkm_invoice::respitedate_optional& bkm_invoice::
respitedate () const
{
  return this->respitedate_;
}

bkm_invoice::respitedate_optional& bkm_invoice::
respitedate ()
{
  return this->respitedate_;
}

void bkm_invoice::
respitedate (const respitedate_type& x)
{
  this->respitedate_.set (x);
}

void bkm_invoice::
respitedate (const respitedate_optional& x)
{
  this->respitedate_ = x;
}

void bkm_invoice::
respitedate (::std::unique_ptr< respitedate_type > x)
{
  this->respitedate_.set (std::move (x));
}

const bkm_invoice::extern1_optional& bkm_invoice::
extern1 () const
{
  return this->extern1_;
}

bkm_invoice::extern1_optional& bkm_invoice::
extern1 ()
{
  return this->extern1_;
}

void bkm_invoice::
extern1 (const extern1_type& x)
{
  this->extern1_.set (x);
}

void bkm_invoice::
extern1 (const extern1_optional& x)
{
  this->extern1_ = x;
}

void bkm_invoice::
extern1 (::std::unique_ptr< extern1_type > x)
{
  this->extern1_.set (std::move (x));
}

const bkm_invoice::extern2_optional& bkm_invoice::
extern2 () const
{
  return this->extern2_;
}

bkm_invoice::extern2_optional& bkm_invoice::
extern2 ()
{
  return this->extern2_;
}

void bkm_invoice::
extern2 (const extern2_type& x)
{
  this->extern2_.set (x);
}

void bkm_invoice::
extern2 (const extern2_optional& x)
{
  this->extern2_ = x;
}

void bkm_invoice::
extern2 (::std::unique_ptr< extern2_type > x)
{
  this->extern2_.set (std::move (x));
}

const bkm_invoice::extern3_optional& bkm_invoice::
extern3 () const
{
  return this->extern3_;
}

bkm_invoice::extern3_optional& bkm_invoice::
extern3 ()
{
  return this->extern3_;
}

void bkm_invoice::
extern3 (const extern3_type& x)
{
  this->extern3_.set (x);
}

void bkm_invoice::
extern3 (const extern3_optional& x)
{
  this->extern3_ = x;
}

void bkm_invoice::
extern3 (::std::unique_ptr< extern3_type > x)
{
  this->extern3_.set (std::move (x));
}

const bkm_invoice::range_optional& bkm_invoice::
range () const
{
  return this->range_;
}

bkm_invoice::range_optional& bkm_invoice::
range ()
{
  return this->range_;
}

void bkm_invoice::
range (const range_type& x)
{
  this->range_.set (x);
}

void bkm_invoice::
range (const range_optional& x)
{
  this->range_ = x;
}

void bkm_invoice::
range (::std::unique_ptr< range_type > x)
{
  this->range_.set (std::move (x));
}

const bkm_invoice::period_optional& bkm_invoice::
period () const
{
  return this->period_;
}

bkm_invoice::period_optional& bkm_invoice::
period ()
{
  return this->period_;
}

void bkm_invoice::
period (const period_type& x)
{
  this->period_.set (x);
}

void bkm_invoice::
period (const period_optional& x)
{
  this->period_ = x;
}

void bkm_invoice::
period (::std::unique_ptr< period_type > x)
{
  this->period_.set (std::move (x));
}

const bkm_invoice::barcode_optional& bkm_invoice::
barcode () const
{
  return this->barcode_;
}

bkm_invoice::barcode_optional& bkm_invoice::
barcode ()
{
  return this->barcode_;
}

void bkm_invoice::
barcode (const barcode_type& x)
{
  this->barcode_.set (x);
}

void bkm_invoice::
barcode (const barcode_optional& x)
{
  this->barcode_ = x;
}

void bkm_invoice::
barcode (::std::unique_ptr< barcode_type > x)
{
  this->barcode_.set (std::move (x));
}

const bkm_invoice::verifier_optional& bkm_invoice::
verifier () const
{
  return this->verifier_;
}

bkm_invoice::verifier_optional& bkm_invoice::
verifier ()
{
  return this->verifier_;
}

void bkm_invoice::
verifier (const verifier_type& x)
{
  this->verifier_.set (x);
}

void bkm_invoice::
verifier (const verifier_optional& x)
{
  this->verifier_ = x;
}

void bkm_invoice::
verifier (::std::unique_ptr< verifier_type > x)
{
  this->verifier_.set (std::move (x));
}

const bkm_invoice::statuscode_optional& bkm_invoice::
statuscode () const
{
  return this->statuscode_;
}

bkm_invoice::statuscode_optional& bkm_invoice::
statuscode ()
{
  return this->statuscode_;
}

void bkm_invoice::
statuscode (const statuscode_type& x)
{
  this->statuscode_.set (x);
}

void bkm_invoice::
statuscode (const statuscode_optional& x)
{
  this->statuscode_ = x;
}

void bkm_invoice::
statuscode (::std::unique_ptr< statuscode_type > x)
{
  this->statuscode_.set (std::move (x));
}

const bkm_invoice::statusname_optional& bkm_invoice::
statusname () const
{
  return this->statusname_;
}

bkm_invoice::statusname_optional& bkm_invoice::
statusname ()
{
  return this->statusname_;
}

void bkm_invoice::
statusname (const statusname_type& x)
{
  this->statusname_.set (x);
}

void bkm_invoice::
statusname (const statusname_optional& x)
{
  this->statusname_ = x;
}

void bkm_invoice::
statusname (::std::unique_ptr< statusname_type > x)
{
  this->statusname_.set (std::move (x));
}

const bkm_invoice::groupcode_optional& bkm_invoice::
groupcode () const
{
  return this->groupcode_;
}

bkm_invoice::groupcode_optional& bkm_invoice::
groupcode ()
{
  return this->groupcode_;
}

void bkm_invoice::
groupcode (const groupcode_type& x)
{
  this->groupcode_.set (x);
}

void bkm_invoice::
groupcode (const groupcode_optional& x)
{
  this->groupcode_ = x;
}

void bkm_invoice::
groupcode (::std::unique_ptr< groupcode_type > x)
{
  this->groupcode_.set (std::move (x));
}

const bkm_invoice::groupname_optional& bkm_invoice::
groupname () const
{
  return this->groupname_;
}

bkm_invoice::groupname_optional& bkm_invoice::
groupname ()
{
  return this->groupname_;
}

void bkm_invoice::
groupname (const groupname_type& x)
{
  this->groupname_.set (x);
}

void bkm_invoice::
groupname (const groupname_optional& x)
{
  this->groupname_ = x;
}

void bkm_invoice::
groupname (::std::unique_ptr< groupname_type > x)
{
  this->groupname_.set (std::move (x));
}

const bkm_invoice::totalnto_optional& bkm_invoice::
totalnto () const
{
  return this->totalnto_;
}

bkm_invoice::totalnto_optional& bkm_invoice::
totalnto ()
{
  return this->totalnto_;
}

void bkm_invoice::
totalnto (const totalnto_type& x)
{
  this->totalnto_.set (x);
}

void bkm_invoice::
totalnto (const totalnto_optional& x)
{
  this->totalnto_ = x;
}

void bkm_invoice::
totalnto (::std::unique_ptr< totalnto_type > x)
{
  this->totalnto_.set (std::move (x));
}

const bkm_invoice::ntoverified_optional& bkm_invoice::
ntoverified () const
{
  return this->ntoverified_;
}

bkm_invoice::ntoverified_optional& bkm_invoice::
ntoverified ()
{
  return this->ntoverified_;
}

void bkm_invoice::
ntoverified (const ntoverified_type& x)
{
  this->ntoverified_.set (x);
}

void bkm_invoice::
ntoverified (const ntoverified_optional& x)
{
  this->ntoverified_ = x;
}

void bkm_invoice::
ntoverified (::std::unique_ptr< ntoverified_type > x)
{
  this->ntoverified_.set (std::move (x));
}

const bkm_invoice::amountnto_optional& bkm_invoice::
amountnto () const
{
  return this->amountnto_;
}

bkm_invoice::amountnto_optional& bkm_invoice::
amountnto ()
{
  return this->amountnto_;
}

void bkm_invoice::
amountnto (const amountnto_type& x)
{
  this->amountnto_.set (x);
}

void bkm_invoice::
amountnto (const amountnto_optional& x)
{
  this->amountnto_ = x;
}

void bkm_invoice::
amountnto (::std::unique_ptr< amountnto_type > x)
{
  this->amountnto_.set (std::move (x));
}

const bkm_invoice::deducted_optional& bkm_invoice::
deducted () const
{
  return this->deducted_;
}

bkm_invoice::deducted_optional& bkm_invoice::
deducted ()
{
  return this->deducted_;
}

void bkm_invoice::
deducted (const deducted_type& x)
{
  this->deducted_.set (x);
}

void bkm_invoice::
deducted (const deducted_optional& x)
{
  this->deducted_ = x;
}

void bkm_invoice::
deducted (::std::unique_ptr< deducted_type > x)
{
  this->deducted_.set (std::move (x));
}

const bkm_invoice::deductedvat_optional& bkm_invoice::
deductedvat () const
{
  return this->deductedvat_;
}

bkm_invoice::deductedvat_optional& bkm_invoice::
deductedvat ()
{
  return this->deductedvat_;
}

void bkm_invoice::
deductedvat (const deductedvat_type& x)
{
  this->deductedvat_.set (x);
}

void bkm_invoice::
deductedvat (const deductedvat_optional& x)
{
  this->deductedvat_ = x;
}

void bkm_invoice::
deductedvat (::std::unique_ptr< deductedvat_type > x)
{
  this->deductedvat_.set (std::move (x));
}

const bkm_invoice::anwbtr_optional& bkm_invoice::
anwbtr () const
{
  return this->anwbtr_;
}

bkm_invoice::anwbtr_optional& bkm_invoice::
anwbtr ()
{
  return this->anwbtr_;
}

void bkm_invoice::
anwbtr (const anwbtr_type& x)
{
  this->anwbtr_.set (x);
}

void bkm_invoice::
anwbtr (const anwbtr_optional& x)
{
  this->anwbtr_ = x;
}

void bkm_invoice::
anwbtr (::std::unique_ptr< anwbtr_type > x)
{
  this->anwbtr_.set (std::move (x));
}

const bkm_invoice::anwbtrnto_optional& bkm_invoice::
anwbtrnto () const
{
  return this->anwbtrnto_;
}

bkm_invoice::anwbtrnto_optional& bkm_invoice::
anwbtrnto ()
{
  return this->anwbtrnto_;
}

void bkm_invoice::
anwbtrnto (const anwbtrnto_type& x)
{
  this->anwbtrnto_.set (x);
}

void bkm_invoice::
anwbtrnto (const anwbtrnto_optional& x)
{
  this->anwbtrnto_ = x;
}

void bkm_invoice::
anwbtrnto (::std::unique_ptr< anwbtrnto_type > x)
{
  this->anwbtrnto_.set (std::move (x));
}

const bkm_invoice::anwskobtr_optional& bkm_invoice::
anwskobtr () const
{
  return this->anwskobtr_;
}

bkm_invoice::anwskobtr_optional& bkm_invoice::
anwskobtr ()
{
  return this->anwskobtr_;
}

void bkm_invoice::
anwskobtr (const anwskobtr_type& x)
{
  this->anwskobtr_.set (x);
}

void bkm_invoice::
anwskobtr (const anwskobtr_optional& x)
{
  this->anwskobtr_ = x;
}

void bkm_invoice::
anwskobtr (::std::unique_ptr< anwskobtr_type > x)
{
  this->anwskobtr_.set (std::move (x));
}

const bkm_invoice::anwskonto_optional& bkm_invoice::
anwskonto () const
{
  return this->anwskonto_;
}

bkm_invoice::anwskonto_optional& bkm_invoice::
anwskonto ()
{
  return this->anwskonto_;
}

void bkm_invoice::
anwskonto (const anwskonto_type& x)
{
  this->anwskonto_.set (x);
}

void bkm_invoice::
anwskonto (const anwskonto_optional& x)
{
  this->anwskonto_ = x;
}

void bkm_invoice::
anwskonto (::std::unique_ptr< anwskonto_type > x)
{
  this->anwskonto_.set (std::move (x));
}

const bkm_invoice::vatbtr_optional& bkm_invoice::
vatbtr () const
{
  return this->vatbtr_;
}

bkm_invoice::vatbtr_optional& bkm_invoice::
vatbtr ()
{
  return this->vatbtr_;
}

void bkm_invoice::
vatbtr (const vatbtr_type& x)
{
  this->vatbtr_.set (x);
}

void bkm_invoice::
vatbtr (const vatbtr_optional& x)
{
  this->vatbtr_ = x;
}

void bkm_invoice::
vatbtr (::std::unique_ptr< vatbtr_type > x)
{
  this->vatbtr_.set (std::move (x));
}

const bkm_invoice::vatprz_optional& bkm_invoice::
vatprz () const
{
  return this->vatprz_;
}

bkm_invoice::vatprz_optional& bkm_invoice::
vatprz ()
{
  return this->vatprz_;
}

void bkm_invoice::
vatprz (const vatprz_type& x)
{
  this->vatprz_.set (x);
}

void bkm_invoice::
vatprz (const vatprz_optional& x)
{
  this->vatprz_ = x;
}

void bkm_invoice::
vatprz (::std::unique_ptr< vatprz_type > x)
{
  this->vatprz_.set (std::move (x));
}

const bkm_invoice::skontobto_optional& bkm_invoice::
skontobto () const
{
  return this->skontobto_;
}

bkm_invoice::skontobto_optional& bkm_invoice::
skontobto ()
{
  return this->skontobto_;
}

void bkm_invoice::
skontobto (const skontobto_type& x)
{
  this->skontobto_.set (x);
}

void bkm_invoice::
skontobto (const skontobto_optional& x)
{
  this->skontobto_ = x;
}

void bkm_invoice::
skontobto (::std::unique_ptr< skontobto_type > x)
{
  this->skontobto_.set (std::move (x));
}

const bkm_invoice::skontonto_optional& bkm_invoice::
skontonto () const
{
  return this->skontonto_;
}

bkm_invoice::skontonto_optional& bkm_invoice::
skontonto ()
{
  return this->skontonto_;
}

void bkm_invoice::
skontonto (const skontonto_type& x)
{
  this->skontonto_.set (x);
}

void bkm_invoice::
skontonto (const skontonto_optional& x)
{
  this->skontonto_ = x;
}

void bkm_invoice::
skontonto (::std::unique_ptr< skontonto_type > x)
{
  this->skontonto_.set (std::move (x));
}

const bkm_invoice::skontoprz_optional& bkm_invoice::
skontoprz () const
{
  return this->skontoprz_;
}

bkm_invoice::skontoprz_optional& bkm_invoice::
skontoprz ()
{
  return this->skontoprz_;
}

void bkm_invoice::
skontoprz (const skontoprz_type& x)
{
  this->skontoprz_.set (x);
}

void bkm_invoice::
skontoprz (const skontoprz_optional& x)
{
  this->skontoprz_ = x;
}

void bkm_invoice::
skontoprz (::std::unique_ptr< skontoprz_type > x)
{
  this->skontoprz_.set (std::move (x));
}

const bkm_invoice::drl_optional& bkm_invoice::
drl () const
{
  return this->drl_;
}

bkm_invoice::drl_optional& bkm_invoice::
drl ()
{
  return this->drl_;
}

void bkm_invoice::
drl (const drl_type& x)
{
  this->drl_.set (x);
}

void bkm_invoice::
drl (const drl_optional& x)
{
  this->drl_ = x;
}

void bkm_invoice::
drl (::std::unique_ptr< drl_type > x)
{
  this->drl_.set (std::move (x));
}

const bkm_invoice::drlvat_optional& bkm_invoice::
drlvat () const
{
  return this->drlvat_;
}

bkm_invoice::drlvat_optional& bkm_invoice::
drlvat ()
{
  return this->drlvat_;
}

void bkm_invoice::
drlvat (const drlvat_type& x)
{
  this->drlvat_.set (x);
}

void bkm_invoice::
drlvat (const drlvat_optional& x)
{
  this->drlvat_ = x;
}

void bkm_invoice::
drlvat (::std::unique_ptr< drlvat_type > x)
{
  this->drlvat_.set (std::move (x));
}

const bkm_invoice::drlprz_optional& bkm_invoice::
drlprz () const
{
  return this->drlprz_;
}

bkm_invoice::drlprz_optional& bkm_invoice::
drlprz ()
{
  return this->drlprz_;
}

void bkm_invoice::
drlprz (const drlprz_type& x)
{
  this->drlprz_.set (x);
}

void bkm_invoice::
drlprz (const drlprz_optional& x)
{
  this->drlprz_ = x;
}

void bkm_invoice::
drlprz (::std::unique_ptr< drlprz_type > x)
{
  this->drlprz_.set (std::move (x));
}

const bkm_invoice::drlsurety_optional& bkm_invoice::
drlsurety () const
{
  return this->drlsurety_;
}

bkm_invoice::drlsurety_optional& bkm_invoice::
drlsurety ()
{
  return this->drlsurety_;
}

void bkm_invoice::
drlsurety (const drlsurety_type& x)
{
  this->drlsurety_.set (x);
}

void bkm_invoice::
drlsurety (const drlsurety_optional& x)
{
  this->drlsurety_ = x;
}

void bkm_invoice::
drlsurety (::std::unique_ptr< drlsurety_type > x)
{
  this->drlsurety_.set (std::move (x));
}

const bkm_invoice::drlsuretyvat_optional& bkm_invoice::
drlsuretyvat () const
{
  return this->drlsuretyvat_;
}

bkm_invoice::drlsuretyvat_optional& bkm_invoice::
drlsuretyvat ()
{
  return this->drlsuretyvat_;
}

void bkm_invoice::
drlsuretyvat (const drlsuretyvat_type& x)
{
  this->drlsuretyvat_.set (x);
}

void bkm_invoice::
drlsuretyvat (const drlsuretyvat_optional& x)
{
  this->drlsuretyvat_ = x;
}

void bkm_invoice::
drlsuretyvat (::std::unique_ptr< drlsuretyvat_type > x)
{
  this->drlsuretyvat_.set (std::move (x));
}

const bkm_invoice::hrl_optional& bkm_invoice::
hrl () const
{
  return this->hrl_;
}

bkm_invoice::hrl_optional& bkm_invoice::
hrl ()
{
  return this->hrl_;
}

void bkm_invoice::
hrl (const hrl_type& x)
{
  this->hrl_.set (x);
}

void bkm_invoice::
hrl (const hrl_optional& x)
{
  this->hrl_ = x;
}

void bkm_invoice::
hrl (::std::unique_ptr< hrl_type > x)
{
  this->hrl_.set (std::move (x));
}

const bkm_invoice::hrlvat_optional& bkm_invoice::
hrlvat () const
{
  return this->hrlvat_;
}

bkm_invoice::hrlvat_optional& bkm_invoice::
hrlvat ()
{
  return this->hrlvat_;
}

void bkm_invoice::
hrlvat (const hrlvat_type& x)
{
  this->hrlvat_.set (x);
}

void bkm_invoice::
hrlvat (const hrlvat_optional& x)
{
  this->hrlvat_ = x;
}

void bkm_invoice::
hrlvat (::std::unique_ptr< hrlvat_type > x)
{
  this->hrlvat_.set (std::move (x));
}

const bkm_invoice::hrlprz_optional& bkm_invoice::
hrlprz () const
{
  return this->hrlprz_;
}

bkm_invoice::hrlprz_optional& bkm_invoice::
hrlprz ()
{
  return this->hrlprz_;
}

void bkm_invoice::
hrlprz (const hrlprz_type& x)
{
  this->hrlprz_.set (x);
}

void bkm_invoice::
hrlprz (const hrlprz_optional& x)
{
  this->hrlprz_ = x;
}

void bkm_invoice::
hrlprz (::std::unique_ptr< hrlprz_type > x)
{
  this->hrlprz_.set (std::move (x));
}

const bkm_invoice::hrlsurety_optional& bkm_invoice::
hrlsurety () const
{
  return this->hrlsurety_;
}

bkm_invoice::hrlsurety_optional& bkm_invoice::
hrlsurety ()
{
  return this->hrlsurety_;
}

void bkm_invoice::
hrlsurety (const hrlsurety_type& x)
{
  this->hrlsurety_.set (x);
}

void bkm_invoice::
hrlsurety (const hrlsurety_optional& x)
{
  this->hrlsurety_ = x;
}

void bkm_invoice::
hrlsurety (::std::unique_ptr< hrlsurety_type > x)
{
  this->hrlsurety_.set (std::move (x));
}

const bkm_invoice::hrlsuretyvat_optional& bkm_invoice::
hrlsuretyvat () const
{
  return this->hrlsuretyvat_;
}

bkm_invoice::hrlsuretyvat_optional& bkm_invoice::
hrlsuretyvat ()
{
  return this->hrlsuretyvat_;
}

void bkm_invoice::
hrlsuretyvat (const hrlsuretyvat_type& x)
{
  this->hrlsuretyvat_.set (x);
}

void bkm_invoice::
hrlsuretyvat (const hrlsuretyvat_optional& x)
{
  this->hrlsuretyvat_ = x;
}

void bkm_invoice::
hrlsuretyvat (::std::unique_ptr< hrlsuretyvat_type > x)
{
  this->hrlsuretyvat_.set (std::move (x));
}

const bkm_invoice::userfield1_optional& bkm_invoice::
userfield1 () const
{
  return this->userfield1_;
}

bkm_invoice::userfield1_optional& bkm_invoice::
userfield1 ()
{
  return this->userfield1_;
}

void bkm_invoice::
userfield1 (const userfield1_type& x)
{
  this->userfield1_.set (x);
}

void bkm_invoice::
userfield1 (const userfield1_optional& x)
{
  this->userfield1_ = x;
}

void bkm_invoice::
userfield1 (::std::unique_ptr< userfield1_type > x)
{
  this->userfield1_.set (std::move (x));
}

const bkm_invoice::userfield2_optional& bkm_invoice::
userfield2 () const
{
  return this->userfield2_;
}

bkm_invoice::userfield2_optional& bkm_invoice::
userfield2 ()
{
  return this->userfield2_;
}

void bkm_invoice::
userfield2 (const userfield2_type& x)
{
  this->userfield2_.set (x);
}

void bkm_invoice::
userfield2 (const userfield2_optional& x)
{
  this->userfield2_ = x;
}

void bkm_invoice::
userfield2 (::std::unique_ptr< userfield2_type > x)
{
  this->userfield2_.set (std::move (x));
}

const bkm_invoice::userfield3_optional& bkm_invoice::
userfield3 () const
{
  return this->userfield3_;
}

bkm_invoice::userfield3_optional& bkm_invoice::
userfield3 ()
{
  return this->userfield3_;
}

void bkm_invoice::
userfield3 (const userfield3_type& x)
{
  this->userfield3_.set (x);
}

void bkm_invoice::
userfield3 (const userfield3_optional& x)
{
  this->userfield3_ = x;
}

void bkm_invoice::
userfield3 (::std::unique_ptr< userfield3_type > x)
{
  this->userfield3_.set (std::move (x));
}

const bkm_invoice::custom1_optional& bkm_invoice::
custom1 () const
{
  return this->custom1_;
}

bkm_invoice::custom1_optional& bkm_invoice::
custom1 ()
{
  return this->custom1_;
}

void bkm_invoice::
custom1 (const custom1_type& x)
{
  this->custom1_.set (x);
}

void bkm_invoice::
custom1 (const custom1_optional& x)
{
  this->custom1_ = x;
}

void bkm_invoice::
custom1 (::std::unique_ptr< custom1_type > x)
{
  this->custom1_.set (std::move (x));
}

const bkm_invoice::custom2_optional& bkm_invoice::
custom2 () const
{
  return this->custom2_;
}

bkm_invoice::custom2_optional& bkm_invoice::
custom2 ()
{
  return this->custom2_;
}

void bkm_invoice::
custom2 (const custom2_type& x)
{
  this->custom2_.set (x);
}

void bkm_invoice::
custom2 (const custom2_optional& x)
{
  this->custom2_ = x;
}

void bkm_invoice::
custom2 (::std::unique_ptr< custom2_type > x)
{
  this->custom2_.set (std::move (x));
}

const bkm_invoice::custom3_optional& bkm_invoice::
custom3 () const
{
  return this->custom3_;
}

bkm_invoice::custom3_optional& bkm_invoice::
custom3 ()
{
  return this->custom3_;
}

void bkm_invoice::
custom3 (const custom3_type& x)
{
  this->custom3_.set (x);
}

void bkm_invoice::
custom3 (const custom3_optional& x)
{
  this->custom3_ = x;
}

void bkm_invoice::
custom3 (::std::unique_ptr< custom3_type > x)
{
  this->custom3_.set (std::move (x));
}

const bkm_invoice::custom4_optional& bkm_invoice::
custom4 () const
{
  return this->custom4_;
}

bkm_invoice::custom4_optional& bkm_invoice::
custom4 ()
{
  return this->custom4_;
}

void bkm_invoice::
custom4 (const custom4_type& x)
{
  this->custom4_.set (x);
}

void bkm_invoice::
custom4 (const custom4_optional& x)
{
  this->custom4_ = x;
}

void bkm_invoice::
custom4 (::std::unique_ptr< custom4_type > x)
{
  this->custom4_.set (std::move (x));
}

const bkm_invoice::custom5_optional& bkm_invoice::
custom5 () const
{
  return this->custom5_;
}

bkm_invoice::custom5_optional& bkm_invoice::
custom5 ()
{
  return this->custom5_;
}

void bkm_invoice::
custom5 (const custom5_type& x)
{
  this->custom5_.set (x);
}

void bkm_invoice::
custom5 (const custom5_optional& x)
{
  this->custom5_ = x;
}

void bkm_invoice::
custom5 (::std::unique_ptr< custom5_type > x)
{
  this->custom5_.set (std::move (x));
}

const bkm_invoice::desc_optional& bkm_invoice::
desc () const
{
  return this->desc_;
}

bkm_invoice::desc_optional& bkm_invoice::
desc ()
{
  return this->desc_;
}

void bkm_invoice::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void bkm_invoice::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void bkm_invoice::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const bkm_invoice::note_optional& bkm_invoice::
note () const
{
  return this->note_;
}

bkm_invoice::note_optional& bkm_invoice::
note ()
{
  return this->note_;
}

void bkm_invoice::
note (const note_type& x)
{
  this->note_.set (x);
}

void bkm_invoice::
note (const note_optional& x)
{
  this->note_ = x;
}

void bkm_invoice::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const bkm_invoice::remark_optional& bkm_invoice::
remark () const
{
  return this->remark_;
}

bkm_invoice::remark_optional& bkm_invoice::
remark ()
{
  return this->remark_;
}

void bkm_invoice::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void bkm_invoice::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void bkm_invoice::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}

const bkm_invoice::liabilityperiod1_optional& bkm_invoice::
liabilityperiod1 () const
{
  return this->liabilityperiod1_;
}

bkm_invoice::liabilityperiod1_optional& bkm_invoice::
liabilityperiod1 ()
{
  return this->liabilityperiod1_;
}

void bkm_invoice::
liabilityperiod1 (const liabilityperiod1_type& x)
{
  this->liabilityperiod1_.set (x);
}

void bkm_invoice::
liabilityperiod1 (const liabilityperiod1_optional& x)
{
  this->liabilityperiod1_ = x;
}

const bkm_invoice::collect_optional& bkm_invoice::
collect () const
{
  return this->collect_;
}

bkm_invoice::collect_optional& bkm_invoice::
collect ()
{
  return this->collect_;
}

void bkm_invoice::
collect (const collect_type& x)
{
  this->collect_.set (x);
}

void bkm_invoice::
collect (const collect_optional& x)
{
  this->collect_ = x;
}

void bkm_invoice::
collect (::std::unique_ptr< collect_type > x)
{
  this->collect_.set (std::move (x));
}

const bkm_invoice::parentkey_optional& bkm_invoice::
parentkey () const
{
  return this->parentkey_;
}

bkm_invoice::parentkey_optional& bkm_invoice::
parentkey ()
{
  return this->parentkey_;
}

void bkm_invoice::
parentkey (const parentkey_type& x)
{
  this->parentkey_.set (x);
}

void bkm_invoice::
parentkey (const parentkey_optional& x)
{
  this->parentkey_ = x;
}

void bkm_invoice::
parentkey (::std::unique_ptr< parentkey_type > x)
{
  this->parentkey_.set (std::move (x));
}


// bkm_invoicedef
// 

const bkm_invoicedef::bkm_invdeftype_sequence& bkm_invoicedef::
bkm_invdeftype () const
{
  return this->bkm_invdeftype_;
}

bkm_invoicedef::bkm_invdeftype_sequence& bkm_invoicedef::
bkm_invdeftype ()
{
  return this->bkm_invdeftype_;
}

void bkm_invoicedef::
bkm_invdeftype (const bkm_invdeftype_sequence& s)
{
  this->bkm_invdeftype_ = s;
}

const bkm_invoicedef::typecode_type& bkm_invoicedef::
typecode () const
{
  return this->typecode_.get ();
}

bkm_invoicedef::typecode_type& bkm_invoicedef::
typecode ()
{
  return this->typecode_.get ();
}

void bkm_invoicedef::
typecode (const typecode_type& x)
{
  this->typecode_.set (x);
}

void bkm_invoicedef::
typecode (::std::unique_ptr< typecode_type > x)
{
  this->typecode_.set (std::move (x));
}

const bkm_invoicedef::skontoperiod_optional& bkm_invoicedef::
skontoperiod () const
{
  return this->skontoperiod_;
}

bkm_invoicedef::skontoperiod_optional& bkm_invoicedef::
skontoperiod ()
{
  return this->skontoperiod_;
}

void bkm_invoicedef::
skontoperiod (const skontoperiod_type& x)
{
  this->skontoperiod_.set (x);
}

void bkm_invoicedef::
skontoperiod (const skontoperiod_optional& x)
{
  this->skontoperiod_ = x;
}

void bkm_invoicedef::
skontoperiod (::std::unique_ptr< skontoperiod_type > x)
{
  this->skontoperiod_.set (std::move (x));
}

const bkm_invoicedef::checkperiod_optional& bkm_invoicedef::
checkperiod () const
{
  return this->checkperiod_;
}

bkm_invoicedef::checkperiod_optional& bkm_invoicedef::
checkperiod ()
{
  return this->checkperiod_;
}

void bkm_invoicedef::
checkperiod (const checkperiod_type& x)
{
  this->checkperiod_.set (x);
}

void bkm_invoicedef::
checkperiod (const checkperiod_optional& x)
{
  this->checkperiod_ = x;
}

void bkm_invoicedef::
checkperiod (::std::unique_ptr< checkperiod_type > x)
{
  this->checkperiod_.set (std::move (x));
}

const bkm_invoicedef::spanunitcode_optional& bkm_invoicedef::
spanunitcode () const
{
  return this->spanunitcode_;
}

bkm_invoicedef::spanunitcode_optional& bkm_invoicedef::
spanunitcode ()
{
  return this->spanunitcode_;
}

void bkm_invoicedef::
spanunitcode (const spanunitcode_type& x)
{
  this->spanunitcode_.set (x);
}

void bkm_invoicedef::
spanunitcode (const spanunitcode_optional& x)
{
  this->spanunitcode_ = x;
}

void bkm_invoicedef::
spanunitcode (::std::unique_ptr< spanunitcode_type > x)
{
  this->spanunitcode_.set (std::move (x));
}


// bkm_invoicepos
// 

const bkm_invoicepos::id_optional& bkm_invoicepos::
id () const
{
  return this->id_;
}

bkm_invoicepos::id_optional& bkm_invoicepos::
id ()
{
  return this->id_;
}

void bkm_invoicepos::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_invoicepos::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_invoicepos::code_optional& bkm_invoicepos::
code () const
{
  return this->code_;
}

bkm_invoicepos::code_optional& bkm_invoicepos::
code ()
{
  return this->code_;
}

void bkm_invoicepos::
code (const code_type& x)
{
  this->code_.set (x);
}

void bkm_invoicepos::
code (const code_optional& x)
{
  this->code_ = x;
}

void bkm_invoicepos::
code (::std::unique_ptr< code_type > x)
{
  this->code_.set (std::move (x));
}

const bkm_invoicepos::sortid_optional& bkm_invoicepos::
sortid () const
{
  return this->sortid_;
}

bkm_invoicepos::sortid_optional& bkm_invoicepos::
sortid ()
{
  return this->sortid_;
}

void bkm_invoicepos::
sortid (const sortid_type& x)
{
  this->sortid_.set (x);
}

void bkm_invoicepos::
sortid (const sortid_optional& x)
{
  this->sortid_ = x;
}

const bkm_invoicepos::invoicedeftype_optional& bkm_invoicepos::
invoicedeftype () const
{
  return this->invoicedeftype_;
}

bkm_invoicepos::invoicedeftype_optional& bkm_invoicepos::
invoicedeftype ()
{
  return this->invoicedeftype_;
}

void bkm_invoicepos::
invoicedeftype (const invoicedeftype_type& x)
{
  this->invoicedeftype_.set (x);
}

void bkm_invoicepos::
invoicedeftype (const invoicedeftype_optional& x)
{
  this->invoicedeftype_ = x;
}

void bkm_invoicepos::
invoicedeftype (::std::unique_ptr< invoicedeftype_type > x)
{
  this->invoicedeftype_.set (std::move (x));
}

const bkm_invoicepos::current_optional& bkm_invoicepos::
current () const
{
  return this->current_;
}

bkm_invoicepos::current_optional& bkm_invoicepos::
current ()
{
  return this->current_;
}

void bkm_invoicepos::
current (const current_type& x)
{
  this->current_.set (x);
}

void bkm_invoicepos::
current (const current_optional& x)
{
  this->current_ = x;
}

void bkm_invoicepos::
current (::std::unique_ptr< current_type > x)
{
  this->current_.set (std::move (x));
}

const bkm_invoicepos::totalvalue_optional& bkm_invoicepos::
totalvalue () const
{
  return this->totalvalue_;
}

bkm_invoicepos::totalvalue_optional& bkm_invoicepos::
totalvalue ()
{
  return this->totalvalue_;
}

void bkm_invoicepos::
totalvalue (const totalvalue_type& x)
{
  this->totalvalue_.set (x);
}

void bkm_invoicepos::
totalvalue (const totalvalue_optional& x)
{
  this->totalvalue_ = x;
}

void bkm_invoicepos::
totalvalue (::std::unique_ptr< totalvalue_type > x)
{
  this->totalvalue_.set (std::move (x));
}

const bkm_invoicepos::valuento_optional& bkm_invoicepos::
valuento () const
{
  return this->valuento_;
}

bkm_invoicepos::valuento_optional& bkm_invoicepos::
valuento ()
{
  return this->valuento_;
}

void bkm_invoicepos::
valuento (const valuento_type& x)
{
  this->valuento_.set (x);
}

void bkm_invoicepos::
valuento (const valuento_optional& x)
{
  this->valuento_ = x;
}

void bkm_invoicepos::
valuento (::std::unique_ptr< valuento_type > x)
{
  this->valuento_.set (std::move (x));
}

const bkm_invoicepos::valuevat_optional& bkm_invoicepos::
valuevat () const
{
  return this->valuevat_;
}

bkm_invoicepos::valuevat_optional& bkm_invoicepos::
valuevat ()
{
  return this->valuevat_;
}

void bkm_invoicepos::
valuevat (const valuevat_type& x)
{
  this->valuevat_.set (x);
}

void bkm_invoicepos::
valuevat (const valuevat_optional& x)
{
  this->valuevat_ = x;
}

void bkm_invoicepos::
valuevat (::std::unique_ptr< valuevat_type > x)
{
  this->valuevat_.set (std::move (x));
}

const bkm_invoicepos::valueprz_optional& bkm_invoicepos::
valueprz () const
{
  return this->valueprz_;
}

bkm_invoicepos::valueprz_optional& bkm_invoicepos::
valueprz ()
{
  return this->valueprz_;
}

void bkm_invoicepos::
valueprz (const valueprz_type& x)
{
  this->valueprz_.set (x);
}

void bkm_invoicepos::
valueprz (const valueprz_optional& x)
{
  this->valueprz_ = x;
}

void bkm_invoicepos::
valueprz (::std::unique_ptr< valueprz_type > x)
{
  this->valueprz_.set (std::move (x));
}


// bkm_splitinvoice
// 

const bkm_splitinvoice::splititemid_optional& bkm_splitinvoice::
splititemid () const
{
  return this->splititemid_;
}

bkm_splitinvoice::splititemid_optional& bkm_splitinvoice::
splititemid ()
{
  return this->splititemid_;
}

void bkm_splitinvoice::
splititemid (const splititemid_type& x)
{
  this->splititemid_.set (x);
}

void bkm_splitinvoice::
splititemid (const splititemid_optional& x)
{
  this->splititemid_ = x;
}

const bkm_splitinvoice::amountnto_optional& bkm_splitinvoice::
amountnto () const
{
  return this->amountnto_;
}

bkm_splitinvoice::amountnto_optional& bkm_splitinvoice::
amountnto ()
{
  return this->amountnto_;
}

void bkm_splitinvoice::
amountnto (const amountnto_type& x)
{
  this->amountnto_.set (x);
}

void bkm_splitinvoice::
amountnto (const amountnto_optional& x)
{
  this->amountnto_ = x;
}

void bkm_splitinvoice::
amountnto (::std::unique_ptr< amountnto_type > x)
{
  this->amountnto_.set (std::move (x));
}

const bkm_splitinvoice::deducted_optional& bkm_splitinvoice::
deducted () const
{
  return this->deducted_;
}

bkm_splitinvoice::deducted_optional& bkm_splitinvoice::
deducted ()
{
  return this->deducted_;
}

void bkm_splitinvoice::
deducted (const deducted_type& x)
{
  this->deducted_.set (x);
}

void bkm_splitinvoice::
deducted (const deducted_optional& x)
{
  this->deducted_ = x;
}

void bkm_splitinvoice::
deducted (::std::unique_ptr< deducted_type > x)
{
  this->deducted_.set (std::move (x));
}

const bkm_splitinvoice::deductedvat_optional& bkm_splitinvoice::
deductedvat () const
{
  return this->deductedvat_;
}

bkm_splitinvoice::deductedvat_optional& bkm_splitinvoice::
deductedvat ()
{
  return this->deductedvat_;
}

void bkm_splitinvoice::
deductedvat (const deductedvat_type& x)
{
  this->deductedvat_.set (x);
}

void bkm_splitinvoice::
deductedvat (const deductedvat_optional& x)
{
  this->deductedvat_ = x;
}

void bkm_splitinvoice::
deductedvat (::std::unique_ptr< deductedvat_type > x)
{
  this->deductedvat_.set (std::move (x));
}

const bkm_splitinvoice::drl_optional& bkm_splitinvoice::
drl () const
{
  return this->drl_;
}

bkm_splitinvoice::drl_optional& bkm_splitinvoice::
drl ()
{
  return this->drl_;
}

void bkm_splitinvoice::
drl (const drl_type& x)
{
  this->drl_.set (x);
}

void bkm_splitinvoice::
drl (const drl_optional& x)
{
  this->drl_ = x;
}

void bkm_splitinvoice::
drl (::std::unique_ptr< drl_type > x)
{
  this->drl_.set (std::move (x));
}

const bkm_splitinvoice::drlvat_optional& bkm_splitinvoice::
drlvat () const
{
  return this->drlvat_;
}

bkm_splitinvoice::drlvat_optional& bkm_splitinvoice::
drlvat ()
{
  return this->drlvat_;
}

void bkm_splitinvoice::
drlvat (const drlvat_type& x)
{
  this->drlvat_.set (x);
}

void bkm_splitinvoice::
drlvat (const drlvat_optional& x)
{
  this->drlvat_ = x;
}

void bkm_splitinvoice::
drlvat (::std::unique_ptr< drlvat_type > x)
{
  this->drlvat_.set (std::move (x));
}

const bkm_splitinvoice::hrl_optional& bkm_splitinvoice::
hrl () const
{
  return this->hrl_;
}

bkm_splitinvoice::hrl_optional& bkm_splitinvoice::
hrl ()
{
  return this->hrl_;
}

void bkm_splitinvoice::
hrl (const hrl_type& x)
{
  this->hrl_.set (x);
}

void bkm_splitinvoice::
hrl (const hrl_optional& x)
{
  this->hrl_ = x;
}

void bkm_splitinvoice::
hrl (::std::unique_ptr< hrl_type > x)
{
  this->hrl_.set (std::move (x));
}

const bkm_splitinvoice::hrlvat_optional& bkm_splitinvoice::
hrlvat () const
{
  return this->hrlvat_;
}

bkm_splitinvoice::hrlvat_optional& bkm_splitinvoice::
hrlvat ()
{
  return this->hrlvat_;
}

void bkm_splitinvoice::
hrlvat (const hrlvat_type& x)
{
  this->hrlvat_.set (x);
}

void bkm_splitinvoice::
hrlvat (const hrlvat_optional& x)
{
  this->hrlvat_ = x;
}

void bkm_splitinvoice::
hrlvat (::std::unique_ptr< hrlvat_type > x)
{
  this->hrlvat_.set (std::move (x));
}

const bkm_splitinvoice::vatbtr_optional& bkm_splitinvoice::
vatbtr () const
{
  return this->vatbtr_;
}

bkm_splitinvoice::vatbtr_optional& bkm_splitinvoice::
vatbtr ()
{
  return this->vatbtr_;
}

void bkm_splitinvoice::
vatbtr (const vatbtr_type& x)
{
  this->vatbtr_.set (x);
}

void bkm_splitinvoice::
vatbtr (const vatbtr_optional& x)
{
  this->vatbtr_ = x;
}

void bkm_splitinvoice::
vatbtr (::std::unique_ptr< vatbtr_type > x)
{
  this->vatbtr_.set (std::move (x));
}

const bkm_splitinvoice::discountnto_optional& bkm_splitinvoice::
discountnto () const
{
  return this->discountnto_;
}

bkm_splitinvoice::discountnto_optional& bkm_splitinvoice::
discountnto ()
{
  return this->discountnto_;
}

void bkm_splitinvoice::
discountnto (const discountnto_type& x)
{
  this->discountnto_.set (x);
}

void bkm_splitinvoice::
discountnto (const discountnto_optional& x)
{
  this->discountnto_ = x;
}

void bkm_splitinvoice::
discountnto (::std::unique_ptr< discountnto_type > x)
{
  this->discountnto_.set (std::move (x));
}

const bkm_splitinvoice::drlsurety_optional& bkm_splitinvoice::
drlsurety () const
{
  return this->drlsurety_;
}

bkm_splitinvoice::drlsurety_optional& bkm_splitinvoice::
drlsurety ()
{
  return this->drlsurety_;
}

void bkm_splitinvoice::
drlsurety (const drlsurety_type& x)
{
  this->drlsurety_.set (x);
}

void bkm_splitinvoice::
drlsurety (const drlsurety_optional& x)
{
  this->drlsurety_ = x;
}

void bkm_splitinvoice::
drlsurety (::std::unique_ptr< drlsurety_type > x)
{
  this->drlsurety_.set (std::move (x));
}

const bkm_splitinvoice::drlsuretyvat_optional& bkm_splitinvoice::
drlsuretyvat () const
{
  return this->drlsuretyvat_;
}

bkm_splitinvoice::drlsuretyvat_optional& bkm_splitinvoice::
drlsuretyvat ()
{
  return this->drlsuretyvat_;
}

void bkm_splitinvoice::
drlsuretyvat (const drlsuretyvat_type& x)
{
  this->drlsuretyvat_.set (x);
}

void bkm_splitinvoice::
drlsuretyvat (const drlsuretyvat_optional& x)
{
  this->drlsuretyvat_ = x;
}

void bkm_splitinvoice::
drlsuretyvat (::std::unique_ptr< drlsuretyvat_type > x)
{
  this->drlsuretyvat_.set (std::move (x));
}

const bkm_splitinvoice::hrlsurety_optional& bkm_splitinvoice::
hrlsurety () const
{
  return this->hrlsurety_;
}

bkm_splitinvoice::hrlsurety_optional& bkm_splitinvoice::
hrlsurety ()
{
  return this->hrlsurety_;
}

void bkm_splitinvoice::
hrlsurety (const hrlsurety_type& x)
{
  this->hrlsurety_.set (x);
}

void bkm_splitinvoice::
hrlsurety (const hrlsurety_optional& x)
{
  this->hrlsurety_ = x;
}

void bkm_splitinvoice::
hrlsurety (::std::unique_ptr< hrlsurety_type > x)
{
  this->hrlsurety_.set (std::move (x));
}

const bkm_splitinvoice::hrlsuretyvat_optional& bkm_splitinvoice::
hrlsuretyvat () const
{
  return this->hrlsuretyvat_;
}

bkm_splitinvoice::hrlsuretyvat_optional& bkm_splitinvoice::
hrlsuretyvat ()
{
  return this->hrlsuretyvat_;
}

void bkm_splitinvoice::
hrlsuretyvat (const hrlsuretyvat_type& x)
{
  this->hrlsuretyvat_.set (x);
}

void bkm_splitinvoice::
hrlsuretyvat (const hrlsuretyvat_optional& x)
{
  this->hrlsuretyvat_ = x;
}

void bkm_splitinvoice::
hrlsuretyvat (::std::unique_ptr< hrlsuretyvat_type > x)
{
  this->hrlsuretyvat_.set (std::move (x));
}

const bkm_splitinvoice::skontonto_optional& bkm_splitinvoice::
skontonto () const
{
  return this->skontonto_;
}

bkm_splitinvoice::skontonto_optional& bkm_splitinvoice::
skontonto ()
{
  return this->skontonto_;
}

void bkm_splitinvoice::
skontonto (const skontonto_type& x)
{
  this->skontonto_.set (x);
}

void bkm_splitinvoice::
skontonto (const skontonto_optional& x)
{
  this->skontonto_ = x;
}

void bkm_splitinvoice::
skontonto (::std::unique_ptr< skontonto_type > x)
{
  this->skontonto_.set (std::move (x));
}

const bkm_splitinvoice::anwbtrnto_optional& bkm_splitinvoice::
anwbtrnto () const
{
  return this->anwbtrnto_;
}

bkm_splitinvoice::anwbtrnto_optional& bkm_splitinvoice::
anwbtrnto ()
{
  return this->anwbtrnto_;
}

void bkm_splitinvoice::
anwbtrnto (const anwbtrnto_type& x)
{
  this->anwbtrnto_.set (x);
}

void bkm_splitinvoice::
anwbtrnto (const anwbtrnto_optional& x)
{
  this->anwbtrnto_ = x;
}

void bkm_splitinvoice::
anwbtrnto (::std::unique_ptr< anwbtrnto_type > x)
{
  this->anwbtrnto_.set (std::move (x));
}

const bkm_splitinvoice::anwskonto_optional& bkm_splitinvoice::
anwskonto () const
{
  return this->anwskonto_;
}

bkm_splitinvoice::anwskonto_optional& bkm_splitinvoice::
anwskonto ()
{
  return this->anwskonto_;
}

void bkm_splitinvoice::
anwskonto (const anwskonto_type& x)
{
  this->anwskonto_.set (x);
}

void bkm_splitinvoice::
anwskonto (const anwskonto_optional& x)
{
  this->anwskonto_ = x;
}

void bkm_splitinvoice::
anwskonto (::std::unique_ptr< anwskonto_type > x)
{
  this->anwskonto_.set (std::move (x));
}

const bkm_splitinvoice::anwbtr_optional& bkm_splitinvoice::
anwbtr () const
{
  return this->anwbtr_;
}

bkm_splitinvoice::anwbtr_optional& bkm_splitinvoice::
anwbtr ()
{
  return this->anwbtr_;
}

void bkm_splitinvoice::
anwbtr (const anwbtr_type& x)
{
  this->anwbtr_.set (x);
}

void bkm_splitinvoice::
anwbtr (const anwbtr_optional& x)
{
  this->anwbtr_ = x;
}

void bkm_splitinvoice::
anwbtr (::std::unique_ptr< anwbtr_type > x)
{
  this->anwbtr_.set (std::move (x));
}

const bkm_splitinvoice::anwskobtr_optional& bkm_splitinvoice::
anwskobtr () const
{
  return this->anwskobtr_;
}

bkm_splitinvoice::anwskobtr_optional& bkm_splitinvoice::
anwskobtr ()
{
  return this->anwskobtr_;
}

void bkm_splitinvoice::
anwskobtr (const anwskobtr_type& x)
{
  this->anwskobtr_.set (x);
}

void bkm_splitinvoice::
anwskobtr (const anwskobtr_optional& x)
{
  this->anwskobtr_ = x;
}

void bkm_splitinvoice::
anwskobtr (::std::unique_ptr< anwskobtr_type > x)
{
  this->anwskobtr_.set (std::move (x));
}

const bkm_splitinvoice::skontobto_optional& bkm_splitinvoice::
skontobto () const
{
  return this->skontobto_;
}

bkm_splitinvoice::skontobto_optional& bkm_splitinvoice::
skontobto ()
{
  return this->skontobto_;
}

void bkm_splitinvoice::
skontobto (const skontobto_type& x)
{
  this->skontobto_.set (x);
}

void bkm_splitinvoice::
skontobto (const skontobto_optional& x)
{
  this->skontobto_ = x;
}

void bkm_splitinvoice::
skontobto (::std::unique_ptr< skontobto_type > x)
{
  this->skontobto_.set (std::move (x));
}


// bkm_payment
// 

const bkm_payment::id_optional& bkm_payment::
id () const
{
  return this->id_;
}

bkm_payment::id_optional& bkm_payment::
id ()
{
  return this->id_;
}

void bkm_payment::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_payment::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_payment::externalkey_type& bkm_payment::
externalkey () const
{
  return this->externalkey_.get ();
}

bkm_payment::externalkey_type& bkm_payment::
externalkey ()
{
  return this->externalkey_.get ();
}

void bkm_payment::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void bkm_payment::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const bkm_payment::invoicekey_type& bkm_payment::
invoicekey () const
{
  return this->invoicekey_.get ();
}

bkm_payment::invoicekey_type& bkm_payment::
invoicekey ()
{
  return this->invoicekey_.get ();
}

void bkm_payment::
invoicekey (const invoicekey_type& x)
{
  this->invoicekey_.set (x);
}

void bkm_payment::
invoicekey (::std::unique_ptr< invoicekey_type > x)
{
  this->invoicekey_.set (std::move (x));
}

const bkm_payment::matchfield_optional& bkm_payment::
matchfield () const
{
  return this->matchfield_;
}

bkm_payment::matchfield_optional& bkm_payment::
matchfield ()
{
  return this->matchfield_;
}

void bkm_payment::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void bkm_payment::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void bkm_payment::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const bkm_payment::partcode_optional& bkm_payment::
partcode () const
{
  return this->partcode_;
}

bkm_payment::partcode_optional& bkm_payment::
partcode ()
{
  return this->partcode_;
}

void bkm_payment::
partcode (const partcode_type& x)
{
  this->partcode_.set (x);
}

void bkm_payment::
partcode (const partcode_optional& x)
{
  this->partcode_ = x;
}

void bkm_payment::
partcode (::std::unique_ptr< partcode_type > x)
{
  this->partcode_.set (std::move (x));
}

const bkm_payment::controlcode_optional& bkm_payment::
controlcode () const
{
  return this->controlcode_;
}

bkm_payment::controlcode_optional& bkm_payment::
controlcode ()
{
  return this->controlcode_;
}

void bkm_payment::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void bkm_payment::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void bkm_payment::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const bkm_payment::number_optional& bkm_payment::
number () const
{
  return this->number_;
}

bkm_payment::number_optional& bkm_payment::
number ()
{
  return this->number_;
}

void bkm_payment::
number (const number_type& x)
{
  this->number_.set (x);
}

void bkm_payment::
number (const number_optional& x)
{
  this->number_ = x;
}

void bkm_payment::
number (::std::unique_ptr< number_type > x)
{
  this->number_.set (std::move (x));
}

const bkm_payment::external_optional& bkm_payment::
external () const
{
  return this->external_;
}

bkm_payment::external_optional& bkm_payment::
external ()
{
  return this->external_;
}

void bkm_payment::
external (const external_type& x)
{
  this->external_.set (x);
}

void bkm_payment::
external (const external_optional& x)
{
  this->external_ = x;
}

void bkm_payment::
external (::std::unique_ptr< external_type > x)
{
  this->external_.set (std::move (x));
}

const bkm_payment::extern1_optional& bkm_payment::
extern1 () const
{
  return this->extern1_;
}

bkm_payment::extern1_optional& bkm_payment::
extern1 ()
{
  return this->extern1_;
}

void bkm_payment::
extern1 (const extern1_type& x)
{
  this->extern1_.set (x);
}

void bkm_payment::
extern1 (const extern1_optional& x)
{
  this->extern1_ = x;
}

void bkm_payment::
extern1 (::std::unique_ptr< extern1_type > x)
{
  this->extern1_.set (std::move (x));
}

const bkm_payment::extern2_optional& bkm_payment::
extern2 () const
{
  return this->extern2_;
}

bkm_payment::extern2_optional& bkm_payment::
extern2 ()
{
  return this->extern2_;
}

void bkm_payment::
extern2 (const extern2_type& x)
{
  this->extern2_.set (x);
}

void bkm_payment::
extern2 (const extern2_optional& x)
{
  this->extern2_ = x;
}

void bkm_payment::
extern2 (::std::unique_ptr< extern2_type > x)
{
  this->extern2_.set (std::move (x));
}

const bkm_payment::extern3_optional& bkm_payment::
extern3 () const
{
  return this->extern3_;
}

bkm_payment::extern3_optional& bkm_payment::
extern3 ()
{
  return this->extern3_;
}

void bkm_payment::
extern3 (const extern3_type& x)
{
  this->extern3_.set (x);
}

void bkm_payment::
extern3 (const extern3_optional& x)
{
  this->extern3_ = x;
}

void bkm_payment::
extern3 (::std::unique_ptr< extern3_type > x)
{
  this->extern3_.set (std::move (x));
}

const bkm_payment::payment_optional& bkm_payment::
payment () const
{
  return this->payment_;
}

bkm_payment::payment_optional& bkm_payment::
payment ()
{
  return this->payment_;
}

void bkm_payment::
payment (const payment_type& x)
{
  this->payment_.set (x);
}

void bkm_payment::
payment (const payment_optional& x)
{
  this->payment_ = x;
}

void bkm_payment::
payment (::std::unique_ptr< payment_type > x)
{
  this->payment_.set (std::move (x));
}

const bkm_payment::paymentvat_optional& bkm_payment::
paymentvat () const
{
  return this->paymentvat_;
}

bkm_payment::paymentvat_optional& bkm_payment::
paymentvat ()
{
  return this->paymentvat_;
}

void bkm_payment::
paymentvat (const paymentvat_type& x)
{
  this->paymentvat_.set (x);
}

void bkm_payment::
paymentvat (const paymentvat_optional& x)
{
  this->paymentvat_ = x;
}

void bkm_payment::
paymentvat (::std::unique_ptr< paymentvat_type > x)
{
  this->paymentvat_.set (std::move (x));
}

const bkm_payment::paymentdate_optional& bkm_payment::
paymentdate () const
{
  return this->paymentdate_;
}

bkm_payment::paymentdate_optional& bkm_payment::
paymentdate ()
{
  return this->paymentdate_;
}

void bkm_payment::
paymentdate (const paymentdate_type& x)
{
  this->paymentdate_.set (x);
}

void bkm_payment::
paymentdate (const paymentdate_optional& x)
{
  this->paymentdate_ = x;
}

void bkm_payment::
paymentdate (::std::unique_ptr< paymentdate_type > x)
{
  this->paymentdate_.set (std::move (x));
}

const bkm_payment::desc_optional& bkm_payment::
desc () const
{
  return this->desc_;
}

bkm_payment::desc_optional& bkm_payment::
desc ()
{
  return this->desc_;
}

void bkm_payment::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void bkm_payment::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void bkm_payment::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const bkm_payment::note_optional& bkm_payment::
note () const
{
  return this->note_;
}

bkm_payment::note_optional& bkm_payment::
note ()
{
  return this->note_;
}

void bkm_payment::
note (const note_type& x)
{
  this->note_.set (x);
}

void bkm_payment::
note (const note_optional& x)
{
  this->note_ = x;
}

void bkm_payment::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const bkm_payment::remark_optional& bkm_payment::
remark () const
{
  return this->remark_;
}

bkm_payment::remark_optional& bkm_payment::
remark ()
{
  return this->remark_;
}

void bkm_payment::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void bkm_payment::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void bkm_payment::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}


// ava_unit
// 

const ava_unit::id_optional& ava_unit::
id () const
{
  return this->id_;
}

ava_unit::id_optional& ava_unit::
id ()
{
  return this->id_;
}

void ava_unit::
id (const id_type& x)
{
  this->id_.set (x);
}

void ava_unit::
id (const id_optional& x)
{
  this->id_ = x;
}

const ava_unit::code_type& ava_unit::
code () const
{
  return this->code_.get ();
}

ava_unit::code_type& ava_unit::
code ()
{
  return this->code_.get ();
}

void ava_unit::
code (const code_type& x)
{
  this->code_.set (x);
}

void ava_unit::
code (::std::unique_ptr< code_type > x)
{
  this->code_.set (std::move (x));
}

const ava_unit::normcode_optional& ava_unit::
normcode () const
{
  return this->normcode_;
}

ava_unit::normcode_optional& ava_unit::
normcode ()
{
  return this->normcode_;
}

void ava_unit::
normcode (const normcode_type& x)
{
  this->normcode_.set (x);
}

void ava_unit::
normcode (const normcode_optional& x)
{
  this->normcode_ = x;
}

void ava_unit::
normcode (::std::unique_ptr< normcode_type > x)
{
  this->normcode_.set (std::move (x));
}

const ava_unit::unit_optional& ava_unit::
unit () const
{
  return this->unit_;
}

ava_unit::unit_optional& ava_unit::
unit ()
{
  return this->unit_;
}

void ava_unit::
unit (const unit_type& x)
{
  this->unit_.set (x);
}

void ava_unit::
unit (const unit_optional& x)
{
  this->unit_ = x;
}

void ava_unit::
unit (::std::unique_ptr< unit_type > x)
{
  this->unit_.set (std::move (x));
}

const ava_unit::externalkey_type& ava_unit::
externalkey () const
{
  return this->externalkey_.get ();
}

ava_unit::externalkey_type& ava_unit::
externalkey ()
{
  return this->externalkey_.get ();
}

void ava_unit::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void ava_unit::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const ava_unit::matchfield_optional& ava_unit::
matchfield () const
{
  return this->matchfield_;
}

ava_unit::matchfield_optional& ava_unit::
matchfield ()
{
  return this->matchfield_;
}

void ava_unit::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void ava_unit::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void ava_unit::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const ava_unit::controlcode_optional& ava_unit::
controlcode () const
{
  return this->controlcode_;
}

ava_unit::controlcode_optional& ava_unit::
controlcode ()
{
  return this->controlcode_;
}

void ava_unit::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void ava_unit::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void ava_unit::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const ava_unit::desc_optional& ava_unit::
desc () const
{
  return this->desc_;
}

ava_unit::desc_optional& ava_unit::
desc ()
{
  return this->desc_;
}

void ava_unit::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void ava_unit::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void ava_unit::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const ava_unit::note_optional& ava_unit::
note () const
{
  return this->note_;
}

ava_unit::note_optional& ava_unit::
note ()
{
  return this->note_;
}

void ava_unit::
note (const note_type& x)
{
  this->note_.set (x);
}

void ava_unit::
note (const note_optional& x)
{
  this->note_ = x;
}

void ava_unit::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const ava_unit::remark_optional& ava_unit::
remark () const
{
  return this->remark_;
}

ava_unit::remark_optional& ava_unit::
remark ()
{
  return this->remark_;
}

void ava_unit::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void ava_unit::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void ava_unit::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}


// ava_order
// 

const ava_order::ava_orderpos_optional& ava_order::
ava_orderpos () const
{
  return this->ava_orderpos_;
}

ava_order::ava_orderpos_optional& ava_order::
ava_orderpos ()
{
  return this->ava_orderpos_;
}

void ava_order::
ava_orderpos (const ava_orderpos_type& x)
{
  this->ava_orderpos_.set (x);
}

void ava_order::
ava_orderpos (const ava_orderpos_optional& x)
{
  this->ava_orderpos_ = x;
}

void ava_order::
ava_orderpos (::std::unique_ptr< ava_orderpos_type > x)
{
  this->ava_orderpos_.set (std::move (x));
}

const ava_order::id_optional& ava_order::
id () const
{
  return this->id_;
}

ava_order::id_optional& ava_order::
id ()
{
  return this->id_;
}

void ava_order::
id (const id_type& x)
{
  this->id_.set (x);
}

void ava_order::
id (const id_optional& x)
{
  this->id_ = x;
}

const ava_order::externalkey_type& ava_order::
externalkey () const
{
  return this->externalkey_.get ();
}

ava_order::externalkey_type& ava_order::
externalkey ()
{
  return this->externalkey_.get ();
}

void ava_order::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void ava_order::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const ava_order::projectkey_optional& ava_order::
projectkey () const
{
  return this->projectkey_;
}

ava_order::projectkey_optional& ava_order::
projectkey ()
{
  return this->projectkey_;
}

void ava_order::
projectkey (const projectkey_type& x)
{
  this->projectkey_.set (x);
}

void ava_order::
projectkey (const projectkey_optional& x)
{
  this->projectkey_ = x;
}

void ava_order::
projectkey (::std::unique_ptr< projectkey_type > x)
{
  this->projectkey_.set (std::move (x));
}

const ava_order::bkmorderid_optional& ava_order::
bkmorderid () const
{
  return this->bkmorderid_;
}

ava_order::bkmorderid_optional& ava_order::
bkmorderid ()
{
  return this->bkmorderid_;
}

void ava_order::
bkmorderid (const bkmorderid_type& x)
{
  this->bkmorderid_.set (x);
}

void ava_order::
bkmorderid (const bkmorderid_optional& x)
{
  this->bkmorderid_ = x;
}

const ava_order::bkmorderkey_optional& ava_order::
bkmorderkey () const
{
  return this->bkmorderkey_;
}

ava_order::bkmorderkey_optional& ava_order::
bkmorderkey ()
{
  return this->bkmorderkey_;
}

void ava_order::
bkmorderkey (const bkmorderkey_type& x)
{
  this->bkmorderkey_.set (x);
}

void ava_order::
bkmorderkey (const bkmorderkey_optional& x)
{
  this->bkmorderkey_ = x;
}

void ava_order::
bkmorderkey (::std::unique_ptr< bkmorderkey_type > x)
{
  this->bkmorderkey_.set (std::move (x));
}

const ava_order::masterkey_optional& ava_order::
masterkey () const
{
  return this->masterkey_;
}

ava_order::masterkey_optional& ava_order::
masterkey ()
{
  return this->masterkey_;
}

void ava_order::
masterkey (const masterkey_type& x)
{
  this->masterkey_.set (x);
}

void ava_order::
masterkey (const masterkey_optional& x)
{
  this->masterkey_ = x;
}

void ava_order::
masterkey (::std::unique_ptr< masterkey_type > x)
{
  this->masterkey_.set (std::move (x));
}

const ava_order::matchfield_optional& ava_order::
matchfield () const
{
  return this->matchfield_;
}

ava_order::matchfield_optional& ava_order::
matchfield ()
{
  return this->matchfield_;
}

void ava_order::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void ava_order::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void ava_order::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const ava_order::controlcode_optional& ava_order::
controlcode () const
{
  return this->controlcode_;
}

ava_order::controlcode_optional& ava_order::
controlcode ()
{
  return this->controlcode_;
}

void ava_order::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void ava_order::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void ava_order::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const ava_order::normcode_optional& ava_order::
normcode () const
{
  return this->normcode_;
}

ava_order::normcode_optional& ava_order::
normcode ()
{
  return this->normcode_;
}

void ava_order::
normcode (const normcode_type& x)
{
  this->normcode_.set (x);
}

void ava_order::
normcode (const normcode_optional& x)
{
  this->normcode_ = x;
}

void ava_order::
normcode (::std::unique_ptr< normcode_type > x)
{
  this->normcode_.set (std::move (x));
}

const ava_order::number_optional& ava_order::
number () const
{
  return this->number_;
}

ava_order::number_optional& ava_order::
number ()
{
  return this->number_;
}

void ava_order::
number (const number_type& x)
{
  this->number_.set (x);
}

void ava_order::
number (const number_optional& x)
{
  this->number_ = x;
}

void ava_order::
number (::std::unique_ptr< number_type > x)
{
  this->number_.set (std::move (x));
}

const ava_order::order_optional& ava_order::
order () const
{
  return this->order_;
}

ava_order::order_optional& ava_order::
order ()
{
  return this->order_;
}

void ava_order::
order (const order_type& x)
{
  this->order_.set (x);
}

void ava_order::
order (const order_optional& x)
{
  this->order_ = x;
}

void ava_order::
order (::std::unique_ptr< order_type > x)
{
  this->order_.set (std::move (x));
}

const ava_order::wage_optional& ava_order::
wage () const
{
  return this->wage_;
}

ava_order::wage_optional& ava_order::
wage ()
{
  return this->wage_;
}

void ava_order::
wage (const wage_type& x)
{
  this->wage_.set (x);
}

void ava_order::
wage (const wage_optional& x)
{
  this->wage_ = x;
}

void ava_order::
wage (::std::unique_ptr< wage_type > x)
{
  this->wage_.set (std::move (x));
}

const ava_order::other_optional& ava_order::
other () const
{
  return this->other_;
}

ava_order::other_optional& ava_order::
other ()
{
  return this->other_;
}

void ava_order::
other (const other_type& x)
{
  this->other_.set (x);
}

void ava_order::
other (const other_optional& x)
{
  this->other_ = x;
}

void ava_order::
other (::std::unique_ptr< other_type > x)
{
  this->other_.set (std::move (x));
}

const ava_order::posprice_optional& ava_order::
posprice () const
{
  return this->posprice_;
}

ava_order::posprice_optional& ava_order::
posprice ()
{
  return this->posprice_;
}

void ava_order::
posprice (const posprice_type& x)
{
  this->posprice_.set (x);
}

void ava_order::
posprice (const posprice_optional& x)
{
  this->posprice_ = x;
}

void ava_order::
posprice (::std::unique_ptr< posprice_type > x)
{
  this->posprice_.set (std::move (x));
}

const ava_order::limitdate_optional& ava_order::
limitdate () const
{
  return this->limitdate_;
}

ava_order::limitdate_optional& ava_order::
limitdate ()
{
  return this->limitdate_;
}

void ava_order::
limitdate (const limitdate_type& x)
{
  this->limitdate_.set (x);
}

void ava_order::
limitdate (const limitdate_optional& x)
{
  this->limitdate_ = x;
}

void ava_order::
limitdate (::std::unique_ptr< limitdate_type > x)
{
  this->limitdate_.set (std::move (x));
}

const ava_order::indexdate_optional& ava_order::
indexdate () const
{
  return this->indexdate_;
}

ava_order::indexdate_optional& ava_order::
indexdate ()
{
  return this->indexdate_;
}

void ava_order::
indexdate (const indexdate_type& x)
{
  this->indexdate_.set (x);
}

void ava_order::
indexdate (const indexdate_optional& x)
{
  this->indexdate_ = x;
}

void ava_order::
indexdate (::std::unique_ptr< indexdate_type > x)
{
  this->indexdate_.set (std::move (x));
}

const ava_order::discountprz_optional& ava_order::
discountprz () const
{
  return this->discountprz_;
}

ava_order::discountprz_optional& ava_order::
discountprz ()
{
  return this->discountprz_;
}

void ava_order::
discountprz (const discountprz_type& x)
{
  this->discountprz_.set (x);
}

void ava_order::
discountprz (const discountprz_optional& x)
{
  this->discountprz_ = x;
}

void ava_order::
discountprz (::std::unique_ptr< discountprz_type > x)
{
  this->discountprz_.set (std::move (x));
}

const ava_order::skontoprz_optional& ava_order::
skontoprz () const
{
  return this->skontoprz_;
}

ava_order::skontoprz_optional& ava_order::
skontoprz ()
{
  return this->skontoprz_;
}

void ava_order::
skontoprz (const skontoprz_type& x)
{
  this->skontoprz_.set (x);
}

void ava_order::
skontoprz (const skontoprz_optional& x)
{
  this->skontoprz_ = x;
}

void ava_order::
skontoprz (::std::unique_ptr< skontoprz_type > x)
{
  this->skontoprz_.set (std::move (x));
}

const ava_order::vatprz_optional& ava_order::
vatprz () const
{
  return this->vatprz_;
}

ava_order::vatprz_optional& ava_order::
vatprz ()
{
  return this->vatprz_;
}

void ava_order::
vatprz (const vatprz_type& x)
{
  this->vatprz_.set (x);
}

void ava_order::
vatprz (const vatprz_optional& x)
{
  this->vatprz_ = x;
}

void ava_order::
vatprz (::std::unique_ptr< vatprz_type > x)
{
  this->vatprz_.set (std::move (x));
}

const ava_order::statuscode_optional& ava_order::
statuscode () const
{
  return this->statuscode_;
}

ava_order::statuscode_optional& ava_order::
statuscode ()
{
  return this->statuscode_;
}

void ava_order::
statuscode (const statuscode_type& x)
{
  this->statuscode_.set (x);
}

void ava_order::
statuscode (const statuscode_optional& x)
{
  this->statuscode_ = x;
}

void ava_order::
statuscode (::std::unique_ptr< statuscode_type > x)
{
  this->statuscode_.set (std::move (x));
}

const ava_order::statusname_optional& ava_order::
statusname () const
{
  return this->statusname_;
}

ava_order::statusname_optional& ava_order::
statusname ()
{
  return this->statusname_;
}

void ava_order::
statusname (const statusname_type& x)
{
  this->statusname_.set (x);
}

void ava_order::
statusname (const statusname_optional& x)
{
  this->statusname_ = x;
}

void ava_order::
statusname (::std::unique_ptr< statusname_type > x)
{
  this->statusname_.set (std::move (x));
}

const ava_order::desc_optional& ava_order::
desc () const
{
  return this->desc_;
}

ava_order::desc_optional& ava_order::
desc ()
{
  return this->desc_;
}

void ava_order::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void ava_order::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void ava_order::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const ava_order::note_optional& ava_order::
note () const
{
  return this->note_;
}

ava_order::note_optional& ava_order::
note ()
{
  return this->note_;
}

void ava_order::
note (const note_type& x)
{
  this->note_.set (x);
}

void ava_order::
note (const note_optional& x)
{
  this->note_ = x;
}

void ava_order::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const ava_order::remark_optional& ava_order::
remark () const
{
  return this->remark_;
}

ava_order::remark_optional& ava_order::
remark ()
{
  return this->remark_;
}

void ava_order::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void ava_order::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void ava_order::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}


// ava_orderpos
// 

const ava_orderpos::id_optional& ava_orderpos::
id () const
{
  return this->id_;
}

ava_orderpos::id_optional& ava_orderpos::
id ()
{
  return this->id_;
}

void ava_orderpos::
id (const id_type& x)
{
  this->id_.set (x);
}

void ava_orderpos::
id (const id_optional& x)
{
  this->id_ = x;
}

const ava_orderpos::externalkey_type& ava_orderpos::
externalkey () const
{
  return this->externalkey_.get ();
}

ava_orderpos::externalkey_type& ava_orderpos::
externalkey ()
{
  return this->externalkey_.get ();
}

void ava_orderpos::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void ava_orderpos::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const ava_orderpos::poscode_optional& ava_orderpos::
poscode () const
{
  return this->poscode_;
}

ava_orderpos::poscode_optional& ava_orderpos::
poscode ()
{
  return this->poscode_;
}

void ava_orderpos::
poscode (const poscode_type& x)
{
  this->poscode_.set (x);
}

void ava_orderpos::
poscode (const poscode_optional& x)
{
  this->poscode_ = x;
}

void ava_orderpos::
poscode (::std::unique_ptr< poscode_type > x)
{
  this->poscode_.set (std::move (x));
}

const ava_orderpos::itemnumber_optional& ava_orderpos::
itemnumber () const
{
  return this->itemnumber_;
}

ava_orderpos::itemnumber_optional& ava_orderpos::
itemnumber ()
{
  return this->itemnumber_;
}

void ava_orderpos::
itemnumber (const itemnumber_type& x)
{
  this->itemnumber_.set (x);
}

void ava_orderpos::
itemnumber (const itemnumber_optional& x)
{
  this->itemnumber_ = x;
}

void ava_orderpos::
itemnumber (::std::unique_ptr< itemnumber_type > x)
{
  this->itemnumber_.set (std::move (x));
}

const ava_orderpos::controlcode_optional& ava_orderpos::
controlcode () const
{
  return this->controlcode_;
}

ava_orderpos::controlcode_optional& ava_orderpos::
controlcode ()
{
  return this->controlcode_;
}

void ava_orderpos::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void ava_orderpos::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void ava_orderpos::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const ava_orderpos::keyword_optional& ava_orderpos::
keyword () const
{
  return this->keyword_;
}

ava_orderpos::keyword_optional& ava_orderpos::
keyword ()
{
  return this->keyword_;
}

void ava_orderpos::
keyword (const keyword_type& x)
{
  this->keyword_.set (x);
}

void ava_orderpos::
keyword (const keyword_optional& x)
{
  this->keyword_ = x;
}

void ava_orderpos::
keyword (::std::unique_ptr< keyword_type > x)
{
  this->keyword_.set (std::move (x));
}

const ava_orderpos::unitcode_optional& ava_orderpos::
unitcode () const
{
  return this->unitcode_;
}

ava_orderpos::unitcode_optional& ava_orderpos::
unitcode ()
{
  return this->unitcode_;
}

void ava_orderpos::
unitcode (const unitcode_type& x)
{
  this->unitcode_.set (x);
}

void ava_orderpos::
unitcode (const unitcode_optional& x)
{
  this->unitcode_ = x;
}

void ava_orderpos::
unitcode (::std::unique_ptr< unitcode_type > x)
{
  this->unitcode_.set (std::move (x));
}

const ava_orderpos::unitkey_optional& ava_orderpos::
unitkey () const
{
  return this->unitkey_;
}

ava_orderpos::unitkey_optional& ava_orderpos::
unitkey ()
{
  return this->unitkey_;
}

void ava_orderpos::
unitkey (const unitkey_type& x)
{
  this->unitkey_.set (x);
}

void ava_orderpos::
unitkey (const unitkey_optional& x)
{
  this->unitkey_ = x;
}

void ava_orderpos::
unitkey (::std::unique_ptr< unitkey_type > x)
{
  this->unitkey_.set (std::move (x));
}

const ava_orderpos::groupcode_optional& ava_orderpos::
groupcode () const
{
  return this->groupcode_;
}

ava_orderpos::groupcode_optional& ava_orderpos::
groupcode ()
{
  return this->groupcode_;
}

void ava_orderpos::
groupcode (const groupcode_type& x)
{
  this->groupcode_.set (x);
}

void ava_orderpos::
groupcode (const groupcode_optional& x)
{
  this->groupcode_ = x;
}

void ava_orderpos::
groupcode (::std::unique_ptr< groupcode_type > x)
{
  this->groupcode_.set (std::move (x));
}

const ava_orderpos::text_optional& ava_orderpos::
text () const
{
  return this->text_;
}

ava_orderpos::text_optional& ava_orderpos::
text ()
{
  return this->text_;
}

void ava_orderpos::
text (const text_type& x)
{
  this->text_.set (x);
}

void ava_orderpos::
text (const text_optional& x)
{
  this->text_ = x;
}

void ava_orderpos::
text (::std::unique_ptr< text_type > x)
{
  this->text_.set (std::move (x));
}

const ava_orderpos::comment_optional& ava_orderpos::
comment () const
{
  return this->comment_;
}

ava_orderpos::comment_optional& ava_orderpos::
comment ()
{
  return this->comment_;
}

void ava_orderpos::
comment (const comment_type& x)
{
  this->comment_.set (x);
}

void ava_orderpos::
comment (const comment_optional& x)
{
  this->comment_ = x;
}

void ava_orderpos::
comment (::std::unique_ptr< comment_type > x)
{
  this->comment_.set (std::move (x));
}

const ava_orderpos::wage_optional& ava_orderpos::
wage () const
{
  return this->wage_;
}

ava_orderpos::wage_optional& ava_orderpos::
wage ()
{
  return this->wage_;
}

void ava_orderpos::
wage (const wage_type& x)
{
  this->wage_.set (x);
}

void ava_orderpos::
wage (const wage_optional& x)
{
  this->wage_ = x;
}

void ava_orderpos::
wage (::std::unique_ptr< wage_type > x)
{
  this->wage_.set (std::move (x));
}

const ava_orderpos::other_optional& ava_orderpos::
other () const
{
  return this->other_;
}

ava_orderpos::other_optional& ava_orderpos::
other ()
{
  return this->other_;
}

void ava_orderpos::
other (const other_type& x)
{
  this->other_.set (x);
}

void ava_orderpos::
other (const other_optional& x)
{
  this->other_ = x;
}

void ava_orderpos::
other (::std::unique_ptr< other_type > x)
{
  this->other_.set (std::move (x));
}

const ava_orderpos::quantity_optional& ava_orderpos::
quantity () const
{
  return this->quantity_;
}

ava_orderpos::quantity_optional& ava_orderpos::
quantity ()
{
  return this->quantity_;
}

void ava_orderpos::
quantity (const quantity_type& x)
{
  this->quantity_.set (x);
}

void ava_orderpos::
quantity (const quantity_optional& x)
{
  this->quantity_ = x;
}

void ava_orderpos::
quantity (::std::unique_ptr< quantity_type > x)
{
  this->quantity_.set (std::move (x));
}

const ava_orderpos::unitprice_optional& ava_orderpos::
unitprice () const
{
  return this->unitprice_;
}

ava_orderpos::unitprice_optional& ava_orderpos::
unitprice ()
{
  return this->unitprice_;
}

void ava_orderpos::
unitprice (const unitprice_type& x)
{
  this->unitprice_.set (x);
}

void ava_orderpos::
unitprice (const unitprice_optional& x)
{
  this->unitprice_ = x;
}

void ava_orderpos::
unitprice (::std::unique_ptr< unitprice_type > x)
{
  this->unitprice_.set (std::move (x));
}

const ava_orderpos::posprice_optional& ava_orderpos::
posprice () const
{
  return this->posprice_;
}

ava_orderpos::posprice_optional& ava_orderpos::
posprice ()
{
  return this->posprice_;
}

void ava_orderpos::
posprice (const posprice_type& x)
{
  this->posprice_.set (x);
}

void ava_orderpos::
posprice (const posprice_optional& x)
{
  this->posprice_ = x;
}

void ava_orderpos::
posprice (::std::unique_ptr< posprice_type > x)
{
  this->posprice_.set (std::move (x));
}

const ava_orderpos::discountprz_optional& ava_orderpos::
discountprz () const
{
  return this->discountprz_;
}

ava_orderpos::discountprz_optional& ava_orderpos::
discountprz ()
{
  return this->discountprz_;
}

void ava_orderpos::
discountprz (const discountprz_type& x)
{
  this->discountprz_.set (x);
}

void ava_orderpos::
discountprz (const discountprz_optional& x)
{
  this->discountprz_ = x;
}

void ava_orderpos::
discountprz (::std::unique_ptr< discountprz_type > x)
{
  this->discountprz_.set (std::move (x));
}

const ava_orderpos::vatprz_optional& ava_orderpos::
vatprz () const
{
  return this->vatprz_;
}

ava_orderpos::vatprz_optional& ava_orderpos::
vatprz ()
{
  return this->vatprz_;
}

void ava_orderpos::
vatprz (const vatprz_type& x)
{
  this->vatprz_.set (x);
}

void ava_orderpos::
vatprz (const vatprz_optional& x)
{
  this->vatprz_ = x;
}

void ava_orderpos::
vatprz (::std::unique_ptr< vatprz_type > x)
{
  this->vatprz_.set (std::move (x));
}

const ava_orderpos::statuscode_optional& ava_orderpos::
statuscode () const
{
  return this->statuscode_;
}

ava_orderpos::statuscode_optional& ava_orderpos::
statuscode ()
{
  return this->statuscode_;
}

void ava_orderpos::
statuscode (const statuscode_type& x)
{
  this->statuscode_.set (x);
}

void ava_orderpos::
statuscode (const statuscode_optional& x)
{
  this->statuscode_ = x;
}

void ava_orderpos::
statuscode (::std::unique_ptr< statuscode_type > x)
{
  this->statuscode_.set (std::move (x));
}

const ava_orderpos::desc_optional& ava_orderpos::
desc () const
{
  return this->desc_;
}

ava_orderpos::desc_optional& ava_orderpos::
desc ()
{
  return this->desc_;
}

void ava_orderpos::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void ava_orderpos::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void ava_orderpos::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const ava_orderpos::note_optional& ava_orderpos::
note () const
{
  return this->note_;
}

ava_orderpos::note_optional& ava_orderpos::
note ()
{
  return this->note_;
}

void ava_orderpos::
note (const note_type& x)
{
  this->note_.set (x);
}

void ava_orderpos::
note (const note_optional& x)
{
  this->note_ = x;
}

void ava_orderpos::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const ava_orderpos::remark_optional& ava_orderpos::
remark () const
{
  return this->remark_;
}

ava_orderpos::remark_optional& ava_orderpos::
remark ()
{
  return this->remark_;
}

void ava_orderpos::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void ava_orderpos::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void ava_orderpos::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}


// bkm_document
// 

const bkm_document::id_optional& bkm_document::
id () const
{
  return this->id_;
}

bkm_document::id_optional& bkm_document::
id ()
{
  return this->id_;
}

void bkm_document::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_document::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_document::externalkey_type& bkm_document::
externalkey () const
{
  return this->externalkey_.get ();
}

bkm_document::externalkey_type& bkm_document::
externalkey ()
{
  return this->externalkey_.get ();
}

void bkm_document::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void bkm_document::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const bkm_document::scope_type& bkm_document::
scope () const
{
  return this->scope_.get ();
}

bkm_document::scope_type& bkm_document::
scope ()
{
  return this->scope_.get ();
}

void bkm_document::
scope (const scope_type& x)
{
  this->scope_.set (x);
}

void bkm_document::
scope (::std::unique_ptr< scope_type > x)
{
  this->scope_.set (std::move (x));
}

const bkm_document::scopekey_type& bkm_document::
scopekey () const
{
  return this->scopekey_.get ();
}

bkm_document::scopekey_type& bkm_document::
scopekey ()
{
  return this->scopekey_.get ();
}

void bkm_document::
scopekey (const scopekey_type& x)
{
  this->scopekey_.set (x);
}

void bkm_document::
scopekey (::std::unique_ptr< scopekey_type > x)
{
  this->scopekey_.set (std::move (x));
}

const bkm_document::matchfield_optional& bkm_document::
matchfield () const
{
  return this->matchfield_;
}

bkm_document::matchfield_optional& bkm_document::
matchfield ()
{
  return this->matchfield_;
}

void bkm_document::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void bkm_document::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void bkm_document::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const bkm_document::controlcode_optional& bkm_document::
controlcode () const
{
  return this->controlcode_;
}

bkm_document::controlcode_optional& bkm_document::
controlcode ()
{
  return this->controlcode_;
}

void bkm_document::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void bkm_document::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void bkm_document::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const bkm_document::name_optional& bkm_document::
name () const
{
  return this->name_;
}

bkm_document::name_optional& bkm_document::
name ()
{
  return this->name_;
}

void bkm_document::
name (const name_type& x)
{
  this->name_.set (x);
}

void bkm_document::
name (const name_optional& x)
{
  this->name_ = x;
}

void bkm_document::
name (::std::unique_ptr< name_type > x)
{
  this->name_.set (std::move (x));
}

const bkm_document::extension_optional& bkm_document::
extension () const
{
  return this->extension_;
}

bkm_document::extension_optional& bkm_document::
extension ()
{
  return this->extension_;
}

void bkm_document::
extension (const extension_type& x)
{
  this->extension_.set (x);
}

void bkm_document::
extension (const extension_optional& x)
{
  this->extension_ = x;
}

void bkm_document::
extension (::std::unique_ptr< extension_type > x)
{
  this->extension_.set (std::move (x));
}

const bkm_document::zipformat_optional& bkm_document::
zipformat () const
{
  return this->zipformat_;
}

bkm_document::zipformat_optional& bkm_document::
zipformat ()
{
  return this->zipformat_;
}

void bkm_document::
zipformat (const zipformat_type& x)
{
  this->zipformat_.set (x);
}

void bkm_document::
zipformat (const zipformat_optional& x)
{
  this->zipformat_ = x;
}

const bkm_document::link_optional& bkm_document::
link () const
{
  return this->link_;
}

bkm_document::link_optional& bkm_document::
link ()
{
  return this->link_;
}

void bkm_document::
link (const link_type& x)
{
  this->link_.set (x);
}

void bkm_document::
link (const link_optional& x)
{
  this->link_ = x;
}

void bkm_document::
link (::std::unique_ptr< link_type > x)
{
  this->link_.set (std::move (x));
}

const bkm_document::data_optional& bkm_document::
data () const
{
  return this->data_;
}

bkm_document::data_optional& bkm_document::
data ()
{
  return this->data_;
}

void bkm_document::
data (const data_type& x)
{
  this->data_.set (x);
}

void bkm_document::
data (const data_optional& x)
{
  this->data_ = x;
}

void bkm_document::
data (::std::unique_ptr< data_type > x)
{
  this->data_.set (std::move (x));
}

const bkm_document::filename_optional& bkm_document::
filename () const
{
  return this->filename_;
}

bkm_document::filename_optional& bkm_document::
filename ()
{
  return this->filename_;
}

void bkm_document::
filename (const filename_type& x)
{
  this->filename_.set (x);
}

void bkm_document::
filename (const filename_optional& x)
{
  this->filename_ = x;
}

void bkm_document::
filename (::std::unique_ptr< filename_type > x)
{
  this->filename_.set (std::move (x));
}

const bkm_document::desc_optional& bkm_document::
desc () const
{
  return this->desc_;
}

bkm_document::desc_optional& bkm_document::
desc ()
{
  return this->desc_;
}

void bkm_document::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void bkm_document::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void bkm_document::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const bkm_document::note_optional& bkm_document::
note () const
{
  return this->note_;
}

bkm_document::note_optional& bkm_document::
note ()
{
  return this->note_;
}

void bkm_document::
note (const note_type& x)
{
  this->note_.set (x);
}

void bkm_document::
note (const note_optional& x)
{
  this->note_ = x;
}

void bkm_document::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const bkm_document::remark_optional& bkm_document::
remark () const
{
  return this->remark_;
}

bkm_document::remark_optional& bkm_document::
remark ()
{
  return this->remark_;
}

void bkm_document::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void bkm_document::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void bkm_document::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}

const bkm_document::viewertype_optional& bkm_document::
viewertype () const
{
  return this->viewertype_;
}

bkm_document::viewertype_optional& bkm_document::
viewertype ()
{
  return this->viewertype_;
}

void bkm_document::
viewertype (const viewertype_type& x)
{
  this->viewertype_.set (x);
}

void bkm_document::
viewertype (const viewertype_optional& x)
{
  this->viewertype_ = x;
}

void bkm_document::
viewertype (::std::unique_ptr< viewertype_type > x)
{
  this->viewertype_.set (std::move (x));
}

const bkm_document::main_optional& bkm_document::
main () const
{
  return this->main_;
}

bkm_document::main_optional& bkm_document::
main ()
{
  return this->main_;
}

void bkm_document::
main (const main_type& x)
{
  this->main_.set (x);
}

void bkm_document::
main (const main_optional& x)
{
  this->main_ = x;
}


// bkm_keyvalue
// 

const bkm_keyvalue::bkm_contact_optional& bkm_keyvalue::
bkm_contact () const
{
  return this->bkm_contact_;
}

bkm_keyvalue::bkm_contact_optional& bkm_keyvalue::
bkm_contact ()
{
  return this->bkm_contact_;
}

void bkm_keyvalue::
bkm_contact (const bkm_contact_type& x)
{
  this->bkm_contact_.set (x);
}

void bkm_keyvalue::
bkm_contact (const bkm_contact_optional& x)
{
  this->bkm_contact_ = x;
}

void bkm_keyvalue::
bkm_contact (::std::unique_ptr< bkm_contact_type > x)
{
  this->bkm_contact_.set (std::move (x));
}

const bkm_keyvalue::bkm_counterpart_optional& bkm_keyvalue::
bkm_counterpart () const
{
  return this->bkm_counterpart_;
}

bkm_keyvalue::bkm_counterpart_optional& bkm_keyvalue::
bkm_counterpart ()
{
  return this->bkm_counterpart_;
}

void bkm_keyvalue::
bkm_counterpart (const bkm_counterpart_type& x)
{
  this->bkm_counterpart_.set (x);
}

void bkm_keyvalue::
bkm_counterpart (const bkm_counterpart_optional& x)
{
  this->bkm_counterpart_ = x;
}

void bkm_keyvalue::
bkm_counterpart (::std::unique_ptr< bkm_counterpart_type > x)
{
  this->bkm_counterpart_.set (std::move (x));
}

const bkm_keyvalue::bkm_user_optional& bkm_keyvalue::
bkm_user () const
{
  return this->bkm_user_;
}

bkm_keyvalue::bkm_user_optional& bkm_keyvalue::
bkm_user ()
{
  return this->bkm_user_;
}

void bkm_keyvalue::
bkm_user (const bkm_user_type& x)
{
  this->bkm_user_.set (x);
}

void bkm_keyvalue::
bkm_user (const bkm_user_optional& x)
{
  this->bkm_user_ = x;
}

void bkm_keyvalue::
bkm_user (::std::unique_ptr< bkm_user_type > x)
{
  this->bkm_user_.set (std::move (x));
}

const bkm_keyvalue::bkm_range_optional& bkm_keyvalue::
bkm_range () const
{
  return this->bkm_range_;
}

bkm_keyvalue::bkm_range_optional& bkm_keyvalue::
bkm_range ()
{
  return this->bkm_range_;
}

void bkm_keyvalue::
bkm_range (const bkm_range_type& x)
{
  this->bkm_range_.set (x);
}

void bkm_keyvalue::
bkm_range (const bkm_range_optional& x)
{
  this->bkm_range_ = x;
}

void bkm_keyvalue::
bkm_range (::std::unique_ptr< bkm_range_type > x)
{
  this->bkm_range_.set (std::move (x));
}

const bkm_keyvalue::id_optional& bkm_keyvalue::
id () const
{
  return this->id_;
}

bkm_keyvalue::id_optional& bkm_keyvalue::
id ()
{
  return this->id_;
}

void bkm_keyvalue::
id (const id_type& x)
{
  this->id_.set (x);
}

void bkm_keyvalue::
id (const id_optional& x)
{
  this->id_ = x;
}

const bkm_keyvalue::externalkey_type& bkm_keyvalue::
externalkey () const
{
  return this->externalkey_.get ();
}

bkm_keyvalue::externalkey_type& bkm_keyvalue::
externalkey ()
{
  return this->externalkey_.get ();
}

void bkm_keyvalue::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void bkm_keyvalue::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const bkm_keyvalue::scope_type& bkm_keyvalue::
scope () const
{
  return this->scope_.get ();
}

bkm_keyvalue::scope_type& bkm_keyvalue::
scope ()
{
  return this->scope_.get ();
}

void bkm_keyvalue::
scope (const scope_type& x)
{
  this->scope_.set (x);
}

void bkm_keyvalue::
scope (::std::unique_ptr< scope_type > x)
{
  this->scope_.set (std::move (x));
}

const bkm_keyvalue::scopekey_type& bkm_keyvalue::
scopekey () const
{
  return this->scopekey_.get ();
}

bkm_keyvalue::scopekey_type& bkm_keyvalue::
scopekey ()
{
  return this->scopekey_.get ();
}

void bkm_keyvalue::
scopekey (const scopekey_type& x)
{
  this->scopekey_.set (x);
}

void bkm_keyvalue::
scopekey (::std::unique_ptr< scopekey_type > x)
{
  this->scopekey_.set (std::move (x));
}

const bkm_keyvalue::valuetypekey_type& bkm_keyvalue::
valuetypekey () const
{
  return this->valuetypekey_.get ();
}

bkm_keyvalue::valuetypekey_type& bkm_keyvalue::
valuetypekey ()
{
  return this->valuetypekey_.get ();
}

void bkm_keyvalue::
valuetypekey (const valuetypekey_type& x)
{
  this->valuetypekey_.set (x);
}

void bkm_keyvalue::
valuetypekey (::std::unique_ptr< valuetypekey_type > x)
{
  this->valuetypekey_.set (std::move (x));
}

const bkm_keyvalue::matchfield_optional& bkm_keyvalue::
matchfield () const
{
  return this->matchfield_;
}

bkm_keyvalue::matchfield_optional& bkm_keyvalue::
matchfield ()
{
  return this->matchfield_;
}

void bkm_keyvalue::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void bkm_keyvalue::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void bkm_keyvalue::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const bkm_keyvalue::controlcode_optional& bkm_keyvalue::
controlcode () const
{
  return this->controlcode_;
}

bkm_keyvalue::controlcode_optional& bkm_keyvalue::
controlcode ()
{
  return this->controlcode_;
}

void bkm_keyvalue::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void bkm_keyvalue::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void bkm_keyvalue::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const bkm_keyvalue::code_optional& bkm_keyvalue::
code () const
{
  return this->code_;
}

bkm_keyvalue::code_optional& bkm_keyvalue::
code ()
{
  return this->code_;
}

void bkm_keyvalue::
code (const code_type& x)
{
  this->code_.set (x);
}

void bkm_keyvalue::
code (const code_optional& x)
{
  this->code_ = x;
}

void bkm_keyvalue::
code (::std::unique_ptr< code_type > x)
{
  this->code_.set (std::move (x));
}

const bkm_keyvalue::name_optional& bkm_keyvalue::
name () const
{
  return this->name_;
}

bkm_keyvalue::name_optional& bkm_keyvalue::
name ()
{
  return this->name_;
}

void bkm_keyvalue::
name (const name_type& x)
{
  this->name_.set (x);
}

void bkm_keyvalue::
name (const name_optional& x)
{
  this->name_ = x;
}

void bkm_keyvalue::
name (::std::unique_ptr< name_type > x)
{
  this->name_.set (std::move (x));
}

const bkm_keyvalue::value_optional& bkm_keyvalue::
value () const
{
  return this->value_;
}

bkm_keyvalue::value_optional& bkm_keyvalue::
value ()
{
  return this->value_;
}

void bkm_keyvalue::
value (const value_type& x)
{
  this->value_.set (x);
}

void bkm_keyvalue::
value (const value_optional& x)
{
  this->value_ = x;
}

void bkm_keyvalue::
value (::std::unique_ptr< value_type > x)
{
  this->value_.set (std::move (x));
}

const bkm_keyvalue::valuekey_type& bkm_keyvalue::
valuekey () const
{
  return this->valuekey_.get ();
}

bkm_keyvalue::valuekey_type& bkm_keyvalue::
valuekey ()
{
  return this->valuekey_.get ();
}

void bkm_keyvalue::
valuekey (const valuekey_type& x)
{
  this->valuekey_.set (x);
}

void bkm_keyvalue::
valuekey (::std::unique_ptr< valuekey_type > x)
{
  this->valuekey_.set (std::move (x));
}

const bkm_keyvalue::desc_optional& bkm_keyvalue::
desc () const
{
  return this->desc_;
}

bkm_keyvalue::desc_optional& bkm_keyvalue::
desc ()
{
  return this->desc_;
}

void bkm_keyvalue::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void bkm_keyvalue::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void bkm_keyvalue::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const bkm_keyvalue::note_optional& bkm_keyvalue::
note () const
{
  return this->note_;
}

bkm_keyvalue::note_optional& bkm_keyvalue::
note ()
{
  return this->note_;
}

void bkm_keyvalue::
note (const note_type& x)
{
  this->note_.set (x);
}

void bkm_keyvalue::
note (const note_optional& x)
{
  this->note_ = x;
}

void bkm_keyvalue::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const bkm_keyvalue::remark_optional& bkm_keyvalue::
remark () const
{
  return this->remark_;
}

bkm_keyvalue::remark_optional& bkm_keyvalue::
remark ()
{
  return this->remark_;
}

void bkm_keyvalue::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void bkm_keyvalue::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void bkm_keyvalue::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}


// ret_order
// 

const ret_order::id_optional& ret_order::
id () const
{
  return this->id_;
}

ret_order::id_optional& ret_order::
id ()
{
  return this->id_;
}

void ret_order::
id (const id_type& x)
{
  this->id_.set (x);
}

void ret_order::
id (const id_optional& x)
{
  this->id_ = x;
}

const ret_order::externalkey_type& ret_order::
externalkey () const
{
  return this->externalkey_.get ();
}

ret_order::externalkey_type& ret_order::
externalkey ()
{
  return this->externalkey_.get ();
}

void ret_order::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void ret_order::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const ret_order::projectkey_optional& ret_order::
projectkey () const
{
  return this->projectkey_;
}

ret_order::projectkey_optional& ret_order::
projectkey ()
{
  return this->projectkey_;
}

void ret_order::
projectkey (const projectkey_type& x)
{
  this->projectkey_.set (x);
}

void ret_order::
projectkey (const projectkey_optional& x)
{
  this->projectkey_ = x;
}

void ret_order::
projectkey (::std::unique_ptr< projectkey_type > x)
{
  this->projectkey_.set (std::move (x));
}

const ret_order::matchfield_optional& ret_order::
matchfield () const
{
  return this->matchfield_;
}

ret_order::matchfield_optional& ret_order::
matchfield ()
{
  return this->matchfield_;
}

void ret_order::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void ret_order::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void ret_order::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const ret_order::partcode_optional& ret_order::
partcode () const
{
  return this->partcode_;
}

ret_order::partcode_optional& ret_order::
partcode ()
{
  return this->partcode_;
}

void ret_order::
partcode (const partcode_type& x)
{
  this->partcode_.set (x);
}

void ret_order::
partcode (const partcode_optional& x)
{
  this->partcode_ = x;
}

void ret_order::
partcode (::std::unique_ptr< partcode_type > x)
{
  this->partcode_.set (std::move (x));
}

const ret_order::controlcode_optional& ret_order::
controlcode () const
{
  return this->controlcode_;
}

ret_order::controlcode_optional& ret_order::
controlcode ()
{
  return this->controlcode_;
}

void ret_order::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void ret_order::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void ret_order::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const ret_order::customerkey_optional& ret_order::
customerkey () const
{
  return this->customerkey_;
}

ret_order::customerkey_optional& ret_order::
customerkey ()
{
  return this->customerkey_;
}

void ret_order::
customerkey (const customerkey_type& x)
{
  this->customerkey_.set (x);
}

void ret_order::
customerkey (const customerkey_optional& x)
{
  this->customerkey_ = x;
}

void ret_order::
customerkey (::std::unique_ptr< customerkey_type > x)
{
  this->customerkey_.set (std::move (x));
}

const ret_order::customerkeyid_optional& ret_order::
customerkeyid () const
{
  return this->customerkeyid_;
}

ret_order::customerkeyid_optional& ret_order::
customerkeyid ()
{
  return this->customerkeyid_;
}

void ret_order::
customerkeyid (const customerkeyid_type& x)
{
  this->customerkeyid_.set (x);
}

void ret_order::
customerkeyid (const customerkeyid_optional& x)
{
  this->customerkeyid_ = x;
}

void ret_order::
customerkeyid (::std::unique_ptr< customerkeyid_type > x)
{
  this->customerkeyid_.set (std::move (x));
}

const ret_order::customercode_optional& ret_order::
customercode () const
{
  return this->customercode_;
}

ret_order::customercode_optional& ret_order::
customercode ()
{
  return this->customercode_;
}

void ret_order::
customercode (const customercode_type& x)
{
  this->customercode_.set (x);
}

void ret_order::
customercode (const customercode_optional& x)
{
  this->customercode_ = x;
}

void ret_order::
customercode (::std::unique_ptr< customercode_type > x)
{
  this->customercode_.set (std::move (x));
}

const ret_order::customername_optional& ret_order::
customername () const
{
  return this->customername_;
}

ret_order::customername_optional& ret_order::
customername ()
{
  return this->customername_;
}

void ret_order::
customername (const customername_type& x)
{
  this->customername_.set (x);
}

void ret_order::
customername (const customername_optional& x)
{
  this->customername_ = x;
}

void ret_order::
customername (::std::unique_ptr< customername_type > x)
{
  this->customername_.set (std::move (x));
}

const ret_order::customercounterpartkey_optional& ret_order::
customercounterpartkey () const
{
  return this->customercounterpartkey_;
}

ret_order::customercounterpartkey_optional& ret_order::
customercounterpartkey ()
{
  return this->customercounterpartkey_;
}

void ret_order::
customercounterpartkey (const customercounterpartkey_type& x)
{
  this->customercounterpartkey_.set (x);
}

void ret_order::
customercounterpartkey (const customercounterpartkey_optional& x)
{
  this->customercounterpartkey_ = x;
}

void ret_order::
customercounterpartkey (::std::unique_ptr< customercounterpartkey_type > x)
{
  this->customercounterpartkey_.set (std::move (x));
}

const ret_order::number_optional& ret_order::
number () const
{
  return this->number_;
}

ret_order::number_optional& ret_order::
number ()
{
  return this->number_;
}

void ret_order::
number (const number_type& x)
{
  this->number_.set (x);
}

void ret_order::
number (const number_optional& x)
{
  this->number_ = x;
}

void ret_order::
number (::std::unique_ptr< number_type > x)
{
  this->number_.set (std::move (x));
}

const ret_order::order_optional& ret_order::
order () const
{
  return this->order_;
}

ret_order::order_optional& ret_order::
order ()
{
  return this->order_;
}

void ret_order::
order (const order_type& x)
{
  this->order_.set (x);
}

void ret_order::
order (const order_optional& x)
{
  this->order_ = x;
}

void ret_order::
order (::std::unique_ptr< order_type > x)
{
  this->order_.set (std::move (x));
}

const ret_order::contract_optional& ret_order::
contract () const
{
  return this->contract_;
}

ret_order::contract_optional& ret_order::
contract ()
{
  return this->contract_;
}

void ret_order::
contract (const contract_type& x)
{
  this->contract_.set (x);
}

void ret_order::
contract (const contract_optional& x)
{
  this->contract_ = x;
}

void ret_order::
contract (::std::unique_ptr< contract_type > x)
{
  this->contract_.set (std::move (x));
}

const ret_order::extern1_optional& ret_order::
extern1 () const
{
  return this->extern1_;
}

ret_order::extern1_optional& ret_order::
extern1 ()
{
  return this->extern1_;
}

void ret_order::
extern1 (const extern1_type& x)
{
  this->extern1_.set (x);
}

void ret_order::
extern1 (const extern1_optional& x)
{
  this->extern1_ = x;
}

void ret_order::
extern1 (::std::unique_ptr< extern1_type > x)
{
  this->extern1_.set (std::move (x));
}

const ret_order::extern2_optional& ret_order::
extern2 () const
{
  return this->extern2_;
}

ret_order::extern2_optional& ret_order::
extern2 ()
{
  return this->extern2_;
}

void ret_order::
extern2 (const extern2_type& x)
{
  this->extern2_.set (x);
}

void ret_order::
extern2 (const extern2_optional& x)
{
  this->extern2_ = x;
}

void ret_order::
extern2 (::std::unique_ptr< extern2_type > x)
{
  this->extern2_.set (std::move (x));
}

const ret_order::extern3_optional& ret_order::
extern3 () const
{
  return this->extern3_;
}

ret_order::extern3_optional& ret_order::
extern3 ()
{
  return this->extern3_;
}

void ret_order::
extern3 (const extern3_type& x)
{
  this->extern3_.set (x);
}

void ret_order::
extern3 (const extern3_optional& x)
{
  this->extern3_ = x;
}

void ret_order::
extern3 (::std::unique_ptr< extern3_type > x)
{
  this->extern3_.set (std::move (x));
}

const ret_order::currency_optional& ret_order::
currency () const
{
  return this->currency_;
}

ret_order::currency_optional& ret_order::
currency ()
{
  return this->currency_;
}

void ret_order::
currency (const currency_type& x)
{
  this->currency_.set (x);
}

void ret_order::
currency (const currency_optional& x)
{
  this->currency_ = x;
}

void ret_order::
currency (::std::unique_ptr< currency_type > x)
{
  this->currency_.set (std::move (x));
}

const ret_order::exchange_optional& ret_order::
exchange () const
{
  return this->exchange_;
}

ret_order::exchange_optional& ret_order::
exchange ()
{
  return this->exchange_;
}

void ret_order::
exchange (const exchange_type& x)
{
  this->exchange_.set (x);
}

void ret_order::
exchange (const exchange_optional& x)
{
  this->exchange_ = x;
}

void ret_order::
exchange (::std::unique_ptr< exchange_type > x)
{
  this->exchange_.set (std::move (x));
}

const ret_order::budget_optional& ret_order::
budget () const
{
  return this->budget_;
}

ret_order::budget_optional& ret_order::
budget ()
{
  return this->budget_;
}

void ret_order::
budget (const budget_type& x)
{
  this->budget_.set (x);
}

void ret_order::
budget (const budget_optional& x)
{
  this->budget_ = x;
}

void ret_order::
budget (::std::unique_ptr< budget_type > x)
{
  this->budget_.set (std::move (x));
}

const ret_order::budgetvat_optional& ret_order::
budgetvat () const
{
  return this->budgetvat_;
}

ret_order::budgetvat_optional& ret_order::
budgetvat ()
{
  return this->budgetvat_;
}

void ret_order::
budgetvat (const budgetvat_type& x)
{
  this->budgetvat_.set (x);
}

void ret_order::
budgetvat (const budgetvat_optional& x)
{
  this->budgetvat_ = x;
}

void ret_order::
budgetvat (::std::unique_ptr< budgetvat_type > x)
{
  this->budgetvat_.set (std::move (x));
}

const ret_order::rental_optional& ret_order::
rental () const
{
  return this->rental_;
}

ret_order::rental_optional& ret_order::
rental ()
{
  return this->rental_;
}

void ret_order::
rental (const rental_type& x)
{
  this->rental_.set (x);
}

void ret_order::
rental (const rental_optional& x)
{
  this->rental_ = x;
}

void ret_order::
rental (::std::unique_ptr< rental_type > x)
{
  this->rental_.set (std::move (x));
}

const ret_order::rentalvat_optional& ret_order::
rentalvat () const
{
  return this->rentalvat_;
}

ret_order::rentalvat_optional& ret_order::
rentalvat ()
{
  return this->rentalvat_;
}

void ret_order::
rentalvat (const rentalvat_type& x)
{
  this->rentalvat_.set (x);
}

void ret_order::
rentalvat (const rentalvat_optional& x)
{
  this->rentalvat_ = x;
}

void ret_order::
rentalvat (::std::unique_ptr< rentalvat_type > x)
{
  this->rentalvat_.set (std::move (x));
}

const ret_order::vatprz_optional& ret_order::
vatprz () const
{
  return this->vatprz_;
}

ret_order::vatprz_optional& ret_order::
vatprz ()
{
  return this->vatprz_;
}

void ret_order::
vatprz (const vatprz_type& x)
{
  this->vatprz_.set (x);
}

void ret_order::
vatprz (const vatprz_optional& x)
{
  this->vatprz_ = x;
}

void ret_order::
vatprz (::std::unique_ptr< vatprz_type > x)
{
  this->vatprz_.set (std::move (x));
}

const ret_order::statuscode_optional& ret_order::
statuscode () const
{
  return this->statuscode_;
}

ret_order::statuscode_optional& ret_order::
statuscode ()
{
  return this->statuscode_;
}

void ret_order::
statuscode (const statuscode_type& x)
{
  this->statuscode_.set (x);
}

void ret_order::
statuscode (const statuscode_optional& x)
{
  this->statuscode_ = x;
}

void ret_order::
statuscode (::std::unique_ptr< statuscode_type > x)
{
  this->statuscode_.set (std::move (x));
}

const ret_order::statusname_optional& ret_order::
statusname () const
{
  return this->statusname_;
}

ret_order::statusname_optional& ret_order::
statusname ()
{
  return this->statusname_;
}

void ret_order::
statusname (const statusname_type& x)
{
  this->statusname_.set (x);
}

void ret_order::
statusname (const statusname_optional& x)
{
  this->statusname_ = x;
}

void ret_order::
statusname (::std::unique_ptr< statusname_type > x)
{
  this->statusname_.set (std::move (x));
}

const ret_order::groupcode_optional& ret_order::
groupcode () const
{
  return this->groupcode_;
}

ret_order::groupcode_optional& ret_order::
groupcode ()
{
  return this->groupcode_;
}

void ret_order::
groupcode (const groupcode_type& x)
{
  this->groupcode_.set (x);
}

void ret_order::
groupcode (const groupcode_optional& x)
{
  this->groupcode_ = x;
}

void ret_order::
groupcode (::std::unique_ptr< groupcode_type > x)
{
  this->groupcode_.set (std::move (x));
}

const ret_order::desc_optional& ret_order::
desc () const
{
  return this->desc_;
}

ret_order::desc_optional& ret_order::
desc ()
{
  return this->desc_;
}

void ret_order::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void ret_order::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void ret_order::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const ret_order::note_optional& ret_order::
note () const
{
  return this->note_;
}

ret_order::note_optional& ret_order::
note ()
{
  return this->note_;
}

void ret_order::
note (const note_type& x)
{
  this->note_.set (x);
}

void ret_order::
note (const note_optional& x)
{
  this->note_ = x;
}

void ret_order::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const ret_order::remark_optional& ret_order::
remark () const
{
  return this->remark_;
}

ret_order::remark_optional& ret_order::
remark ()
{
  return this->remark_;
}

void ret_order::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void ret_order::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void ret_order::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}


// ret_invoice
// 

const ret_invoice::bkm_keyvalue_sequence& ret_invoice::
bkm_keyvalue () const
{
  return this->bkm_keyvalue_;
}

ret_invoice::bkm_keyvalue_sequence& ret_invoice::
bkm_keyvalue ()
{
  return this->bkm_keyvalue_;
}

void ret_invoice::
bkm_keyvalue (const bkm_keyvalue_sequence& s)
{
  this->bkm_keyvalue_ = s;
}

const ret_invoice::id_optional& ret_invoice::
id () const
{
  return this->id_;
}

ret_invoice::id_optional& ret_invoice::
id ()
{
  return this->id_;
}

void ret_invoice::
id (const id_type& x)
{
  this->id_.set (x);
}

void ret_invoice::
id (const id_optional& x)
{
  this->id_ = x;
}

const ret_invoice::externalkey_type& ret_invoice::
externalkey () const
{
  return this->externalkey_.get ();
}

ret_invoice::externalkey_type& ret_invoice::
externalkey ()
{
  return this->externalkey_.get ();
}

void ret_invoice::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void ret_invoice::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const ret_invoice::matchfield_optional& ret_invoice::
matchfield () const
{
  return this->matchfield_;
}

ret_invoice::matchfield_optional& ret_invoice::
matchfield ()
{
  return this->matchfield_;
}

void ret_invoice::
matchfield (const matchfield_type& x)
{
  this->matchfield_.set (x);
}

void ret_invoice::
matchfield (const matchfield_optional& x)
{
  this->matchfield_ = x;
}

void ret_invoice::
matchfield (::std::unique_ptr< matchfield_type > x)
{
  this->matchfield_.set (std::move (x));
}

const ret_invoice::controlcode_optional& ret_invoice::
controlcode () const
{
  return this->controlcode_;
}

ret_invoice::controlcode_optional& ret_invoice::
controlcode ()
{
  return this->controlcode_;
}

void ret_invoice::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void ret_invoice::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void ret_invoice::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const ret_invoice::projectkey_optional& ret_invoice::
projectkey () const
{
  return this->projectkey_;
}

ret_invoice::projectkey_optional& ret_invoice::
projectkey ()
{
  return this->projectkey_;
}

void ret_invoice::
projectkey (const projectkey_type& x)
{
  this->projectkey_.set (x);
}

void ret_invoice::
projectkey (const projectkey_optional& x)
{
  this->projectkey_ = x;
}

void ret_invoice::
projectkey (::std::unique_ptr< projectkey_type > x)
{
  this->projectkey_.set (std::move (x));
}

const ret_invoice::orderkey_optional& ret_invoice::
orderkey () const
{
  return this->orderkey_;
}

ret_invoice::orderkey_optional& ret_invoice::
orderkey ()
{
  return this->orderkey_;
}

void ret_invoice::
orderkey (const orderkey_type& x)
{
  this->orderkey_.set (x);
}

void ret_invoice::
orderkey (const orderkey_optional& x)
{
  this->orderkey_ = x;
}

void ret_invoice::
orderkey (::std::unique_ptr< orderkey_type > x)
{
  this->orderkey_.set (std::move (x));
}

const ret_invoice::external_optional& ret_invoice::
external () const
{
  return this->external_;
}

ret_invoice::external_optional& ret_invoice::
external ()
{
  return this->external_;
}

void ret_invoice::
external (const external_type& x)
{
  this->external_.set (x);
}

void ret_invoice::
external (const external_optional& x)
{
  this->external_ = x;
}

void ret_invoice::
external (::std::unique_ptr< external_type > x)
{
  this->external_.set (std::move (x));
}

const ret_invoice::calculation_optional& ret_invoice::
calculation () const
{
  return this->calculation_;
}

ret_invoice::calculation_optional& ret_invoice::
calculation ()
{
  return this->calculation_;
}

void ret_invoice::
calculation (const calculation_type& x)
{
  this->calculation_.set (x);
}

void ret_invoice::
calculation (const calculation_optional& x)
{
  this->calculation_ = x;
}

void ret_invoice::
calculation (::std::unique_ptr< calculation_type > x)
{
  this->calculation_.set (std::move (x));
}

const ret_invoice::typecode_optional& ret_invoice::
typecode () const
{
  return this->typecode_;
}

ret_invoice::typecode_optional& ret_invoice::
typecode ()
{
  return this->typecode_;
}

void ret_invoice::
typecode (const typecode_type& x)
{
  this->typecode_.set (x);
}

void ret_invoice::
typecode (const typecode_optional& x)
{
  this->typecode_ = x;
}

void ret_invoice::
typecode (::std::unique_ptr< typecode_type > x)
{
  this->typecode_.set (std::move (x));
}

const ret_invoice::typecount_optional& ret_invoice::
typecount () const
{
  return this->typecount_;
}

ret_invoice::typecount_optional& ret_invoice::
typecount ()
{
  return this->typecount_;
}

void ret_invoice::
typecount (const typecount_type& x)
{
  this->typecount_.set (x);
}

void ret_invoice::
typecount (const typecount_optional& x)
{
  this->typecount_ = x;
}

const ret_invoice::number_optional& ret_invoice::
number () const
{
  return this->number_;
}

ret_invoice::number_optional& ret_invoice::
number ()
{
  return this->number_;
}

void ret_invoice::
number (const number_type& x)
{
  this->number_.set (x);
}

void ret_invoice::
number (const number_optional& x)
{
  this->number_ = x;
}

void ret_invoice::
number (::std::unique_ptr< number_type > x)
{
  this->number_.set (std::move (x));
}

const ret_invoice::name_optional& ret_invoice::
name () const
{
  return this->name_;
}

ret_invoice::name_optional& ret_invoice::
name ()
{
  return this->name_;
}

void ret_invoice::
name (const name_type& x)
{
  this->name_.set (x);
}

void ret_invoice::
name (const name_optional& x)
{
  this->name_ = x;
}

void ret_invoice::
name (::std::unique_ptr< name_type > x)
{
  this->name_.set (std::move (x));
}

const ret_invoice::invoicedate_optional& ret_invoice::
invoicedate () const
{
  return this->invoicedate_;
}

ret_invoice::invoicedate_optional& ret_invoice::
invoicedate ()
{
  return this->invoicedate_;
}

void ret_invoice::
invoicedate (const invoicedate_type& x)
{
  this->invoicedate_.set (x);
}

void ret_invoice::
invoicedate (const invoicedate_optional& x)
{
  this->invoicedate_ = x;
}

void ret_invoice::
invoicedate (::std::unique_ptr< invoicedate_type > x)
{
  this->invoicedate_.set (std::move (x));
}

const ret_invoice::invoicevat_optional& ret_invoice::
invoicevat () const
{
  return this->invoicevat_;
}

ret_invoice::invoicevat_optional& ret_invoice::
invoicevat ()
{
  return this->invoicevat_;
}

void ret_invoice::
invoicevat (const invoicevat_type& x)
{
  this->invoicevat_.set (x);
}

void ret_invoice::
invoicevat (const invoicevat_optional& x)
{
  this->invoicevat_ = x;
}

void ret_invoice::
invoicevat (::std::unique_ptr< invoicevat_type > x)
{
  this->invoicevat_.set (std::move (x));
}

const ret_invoice::targetdate_optional& ret_invoice::
targetdate () const
{
  return this->targetdate_;
}

ret_invoice::targetdate_optional& ret_invoice::
targetdate ()
{
  return this->targetdate_;
}

void ret_invoice::
targetdate (const targetdate_type& x)
{
  this->targetdate_.set (x);
}

void ret_invoice::
targetdate (const targetdate_optional& x)
{
  this->targetdate_ = x;
}

void ret_invoice::
targetdate (::std::unique_ptr< targetdate_type > x)
{
  this->targetdate_.set (std::move (x));
}

const ret_invoice::payment_optional& ret_invoice::
payment () const
{
  return this->payment_;
}

ret_invoice::payment_optional& ret_invoice::
payment ()
{
  return this->payment_;
}

void ret_invoice::
payment (const payment_type& x)
{
  this->payment_.set (x);
}

void ret_invoice::
payment (const payment_optional& x)
{
  this->payment_ = x;
}

void ret_invoice::
payment (::std::unique_ptr< payment_type > x)
{
  this->payment_.set (std::move (x));
}

const ret_invoice::paymentdate_optional& ret_invoice::
paymentdate () const
{
  return this->paymentdate_;
}

ret_invoice::paymentdate_optional& ret_invoice::
paymentdate ()
{
  return this->paymentdate_;
}

void ret_invoice::
paymentdate (const paymentdate_type& x)
{
  this->paymentdate_.set (x);
}

void ret_invoice::
paymentdate (const paymentdate_optional& x)
{
  this->paymentdate_ = x;
}

void ret_invoice::
paymentdate (::std::unique_ptr< paymentdate_type > x)
{
  this->paymentdate_.set (std::move (x));
}

const ret_invoice::paymentvat_optional& ret_invoice::
paymentvat () const
{
  return this->paymentvat_;
}

ret_invoice::paymentvat_optional& ret_invoice::
paymentvat ()
{
  return this->paymentvat_;
}

void ret_invoice::
paymentvat (const paymentvat_type& x)
{
  this->paymentvat_.set (x);
}

void ret_invoice::
paymentvat (const paymentvat_optional& x)
{
  this->paymentvat_ = x;
}

void ret_invoice::
paymentvat (::std::unique_ptr< paymentvat_type > x)
{
  this->paymentvat_.set (std::move (x));
}

const ret_invoice::extern1_optional& ret_invoice::
extern1 () const
{
  return this->extern1_;
}

ret_invoice::extern1_optional& ret_invoice::
extern1 ()
{
  return this->extern1_;
}

void ret_invoice::
extern1 (const extern1_type& x)
{
  this->extern1_.set (x);
}

void ret_invoice::
extern1 (const extern1_optional& x)
{
  this->extern1_ = x;
}

void ret_invoice::
extern1 (::std::unique_ptr< extern1_type > x)
{
  this->extern1_.set (std::move (x));
}

const ret_invoice::extern2_optional& ret_invoice::
extern2 () const
{
  return this->extern2_;
}

ret_invoice::extern2_optional& ret_invoice::
extern2 ()
{
  return this->extern2_;
}

void ret_invoice::
extern2 (const extern2_type& x)
{
  this->extern2_.set (x);
}

void ret_invoice::
extern2 (const extern2_optional& x)
{
  this->extern2_ = x;
}

void ret_invoice::
extern2 (::std::unique_ptr< extern2_type > x)
{
  this->extern2_.set (std::move (x));
}

const ret_invoice::extern3_optional& ret_invoice::
extern3 () const
{
  return this->extern3_;
}

ret_invoice::extern3_optional& ret_invoice::
extern3 ()
{
  return this->extern3_;
}

void ret_invoice::
extern3 (const extern3_type& x)
{
  this->extern3_.set (x);
}

void ret_invoice::
extern3 (const extern3_optional& x)
{
  this->extern3_ = x;
}

void ret_invoice::
extern3 (::std::unique_ptr< extern3_type > x)
{
  this->extern3_.set (std::move (x));
}

const ret_invoice::lstgyear_optional& ret_invoice::
lstgyear () const
{
  return this->lstgyear_;
}

ret_invoice::lstgyear_optional& ret_invoice::
lstgyear ()
{
  return this->lstgyear_;
}

void ret_invoice::
lstgyear (const lstgyear_type& x)
{
  this->lstgyear_.set (x);
}

void ret_invoice::
lstgyear (const lstgyear_optional& x)
{
  this->lstgyear_ = x;
}

void ret_invoice::
lstgyear (::std::unique_ptr< lstgyear_type > x)
{
  this->lstgyear_.set (std::move (x));
}

const ret_invoice::barcode_optional& ret_invoice::
barcode () const
{
  return this->barcode_;
}

ret_invoice::barcode_optional& ret_invoice::
barcode ()
{
  return this->barcode_;
}

void ret_invoice::
barcode (const barcode_type& x)
{
  this->barcode_.set (x);
}

void ret_invoice::
barcode (const barcode_optional& x)
{
  this->barcode_ = x;
}

void ret_invoice::
barcode (::std::unique_ptr< barcode_type > x)
{
  this->barcode_.set (std::move (x));
}

const ret_invoice::statuscode_optional& ret_invoice::
statuscode () const
{
  return this->statuscode_;
}

ret_invoice::statuscode_optional& ret_invoice::
statuscode ()
{
  return this->statuscode_;
}

void ret_invoice::
statuscode (const statuscode_type& x)
{
  this->statuscode_.set (x);
}

void ret_invoice::
statuscode (const statuscode_optional& x)
{
  this->statuscode_ = x;
}

void ret_invoice::
statuscode (::std::unique_ptr< statuscode_type > x)
{
  this->statuscode_.set (std::move (x));
}

const ret_invoice::statusname_optional& ret_invoice::
statusname () const
{
  return this->statusname_;
}

ret_invoice::statusname_optional& ret_invoice::
statusname ()
{
  return this->statusname_;
}

void ret_invoice::
statusname (const statusname_type& x)
{
  this->statusname_.set (x);
}

void ret_invoice::
statusname (const statusname_optional& x)
{
  this->statusname_ = x;
}

void ret_invoice::
statusname (::std::unique_ptr< statusname_type > x)
{
  this->statusname_.set (std::move (x));
}

const ret_invoice::deducted_optional& ret_invoice::
deducted () const
{
  return this->deducted_;
}

ret_invoice::deducted_optional& ret_invoice::
deducted ()
{
  return this->deducted_;
}

void ret_invoice::
deducted (const deducted_type& x)
{
  this->deducted_.set (x);
}

void ret_invoice::
deducted (const deducted_optional& x)
{
  this->deducted_ = x;
}

void ret_invoice::
deducted (::std::unique_ptr< deducted_type > x)
{
  this->deducted_.set (std::move (x));
}

const ret_invoice::deductedvat_optional& ret_invoice::
deductedvat () const
{
  return this->deductedvat_;
}

ret_invoice::deductedvat_optional& ret_invoice::
deductedvat ()
{
  return this->deductedvat_;
}

void ret_invoice::
deductedvat (const deductedvat_type& x)
{
  this->deductedvat_.set (x);
}

void ret_invoice::
deductedvat (const deductedvat_optional& x)
{
  this->deductedvat_ = x;
}

void ret_invoice::
deductedvat (::std::unique_ptr< deductedvat_type > x)
{
  this->deductedvat_.set (std::move (x));
}

const ret_invoice::totalnto_optional& ret_invoice::
totalnto () const
{
  return this->totalnto_;
}

ret_invoice::totalnto_optional& ret_invoice::
totalnto ()
{
  return this->totalnto_;
}

void ret_invoice::
totalnto (const totalnto_type& x)
{
  this->totalnto_.set (x);
}

void ret_invoice::
totalnto (const totalnto_optional& x)
{
  this->totalnto_ = x;
}

void ret_invoice::
totalnto (::std::unique_ptr< totalnto_type > x)
{
  this->totalnto_.set (std::move (x));
}

const ret_invoice::totalvat_optional& ret_invoice::
totalvat () const
{
  return this->totalvat_;
}

ret_invoice::totalvat_optional& ret_invoice::
totalvat ()
{
  return this->totalvat_;
}

void ret_invoice::
totalvat (const totalvat_type& x)
{
  this->totalvat_.set (x);
}

void ret_invoice::
totalvat (const totalvat_optional& x)
{
  this->totalvat_ = x;
}

void ret_invoice::
totalvat (::std::unique_ptr< totalvat_type > x)
{
  this->totalvat_.set (std::move (x));
}

const ret_invoice::vatprz_optional& ret_invoice::
vatprz () const
{
  return this->vatprz_;
}

ret_invoice::vatprz_optional& ret_invoice::
vatprz ()
{
  return this->vatprz_;
}

void ret_invoice::
vatprz (const vatprz_type& x)
{
  this->vatprz_.set (x);
}

void ret_invoice::
vatprz (const vatprz_optional& x)
{
  this->vatprz_ = x;
}

void ret_invoice::
vatprz (::std::unique_ptr< vatprz_type > x)
{
  this->vatprz_.set (std::move (x));
}

const ret_invoice::rateprz_optional& ret_invoice::
rateprz () const
{
  return this->rateprz_;
}

ret_invoice::rateprz_optional& ret_invoice::
rateprz ()
{
  return this->rateprz_;
}

void ret_invoice::
rateprz (const rateprz_type& x)
{
  this->rateprz_.set (x);
}

void ret_invoice::
rateprz (const rateprz_optional& x)
{
  this->rateprz_ = x;
}

void ret_invoice::
rateprz (::std::unique_ptr< rateprz_type > x)
{
  this->rateprz_.set (std::move (x));
}

const ret_invoice::currency_optional& ret_invoice::
currency () const
{
  return this->currency_;
}

ret_invoice::currency_optional& ret_invoice::
currency ()
{
  return this->currency_;
}

void ret_invoice::
currency (const currency_type& x)
{
  this->currency_.set (x);
}

void ret_invoice::
currency (const currency_optional& x)
{
  this->currency_ = x;
}

void ret_invoice::
currency (::std::unique_ptr< currency_type > x)
{
  this->currency_.set (std::move (x));
}

const ret_invoice::exchange_optional& ret_invoice::
exchange () const
{
  return this->exchange_;
}

ret_invoice::exchange_optional& ret_invoice::
exchange ()
{
  return this->exchange_;
}

void ret_invoice::
exchange (const exchange_type& x)
{
  this->exchange_.set (x);
}

void ret_invoice::
exchange (const exchange_optional& x)
{
  this->exchange_ = x;
}

void ret_invoice::
exchange (::std::unique_ptr< exchange_type > x)
{
  this->exchange_.set (std::move (x));
}

const ret_invoice::desc_optional& ret_invoice::
desc () const
{
  return this->desc_;
}

ret_invoice::desc_optional& ret_invoice::
desc ()
{
  return this->desc_;
}

void ret_invoice::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void ret_invoice::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void ret_invoice::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const ret_invoice::note_optional& ret_invoice::
note () const
{
  return this->note_;
}

ret_invoice::note_optional& ret_invoice::
note ()
{
  return this->note_;
}

void ret_invoice::
note (const note_type& x)
{
  this->note_.set (x);
}

void ret_invoice::
note (const note_optional& x)
{
  this->note_ = x;
}

void ret_invoice::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const ret_invoice::remark_optional& ret_invoice::
remark () const
{
  return this->remark_;
}

ret_invoice::remark_optional& ret_invoice::
remark ()
{
  return this->remark_;
}

void ret_invoice::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void ret_invoice::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void ret_invoice::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}

const ret_invoice::skontoperiod_optional& ret_invoice::
skontoperiod () const
{
  return this->skontoperiod_;
}

ret_invoice::skontoperiod_optional& ret_invoice::
skontoperiod ()
{
  return this->skontoperiod_;
}

void ret_invoice::
skontoperiod (const skontoperiod_type& x)
{
  this->skontoperiod_.set (x);
}

void ret_invoice::
skontoperiod (const skontoperiod_optional& x)
{
  this->skontoperiod_ = x;
}

const ret_invoice::checkperiod_optional& ret_invoice::
checkperiod () const
{
  return this->checkperiod_;
}

ret_invoice::checkperiod_optional& ret_invoice::
checkperiod ()
{
  return this->checkperiod_;
}

void ret_invoice::
checkperiod (const checkperiod_type& x)
{
  this->checkperiod_.set (x);
}

void ret_invoice::
checkperiod (const checkperiod_optional& x)
{
  this->checkperiod_ = x;
}

const ret_invoice::documentdate_optional& ret_invoice::
documentdate () const
{
  return this->documentdate_;
}

ret_invoice::documentdate_optional& ret_invoice::
documentdate ()
{
  return this->documentdate_;
}

void ret_invoice::
documentdate (const documentdate_type& x)
{
  this->documentdate_.set (x);
}

void ret_invoice::
documentdate (const documentdate_optional& x)
{
  this->documentdate_ = x;
}

void ret_invoice::
documentdate (::std::unique_ptr< documentdate_type > x)
{
  this->documentdate_.set (std::move (x));
}


// ret_payment
// 

const ret_payment::externalkey_type& ret_payment::
externalkey () const
{
  return this->externalkey_.get ();
}

ret_payment::externalkey_type& ret_payment::
externalkey ()
{
  return this->externalkey_.get ();
}

void ret_payment::
externalkey (const externalkey_type& x)
{
  this->externalkey_.set (x);
}

void ret_payment::
externalkey (::std::unique_ptr< externalkey_type > x)
{
  this->externalkey_.set (std::move (x));
}

const ret_payment::invoicekey_type& ret_payment::
invoicekey () const
{
  return this->invoicekey_.get ();
}

ret_payment::invoicekey_type& ret_payment::
invoicekey ()
{
  return this->invoicekey_.get ();
}

void ret_payment::
invoicekey (const invoicekey_type& x)
{
  this->invoicekey_.set (x);
}

void ret_payment::
invoicekey (::std::unique_ptr< invoicekey_type > x)
{
  this->invoicekey_.set (std::move (x));
}

const ret_payment::controlcode_optional& ret_payment::
controlcode () const
{
  return this->controlcode_;
}

ret_payment::controlcode_optional& ret_payment::
controlcode ()
{
  return this->controlcode_;
}

void ret_payment::
controlcode (const controlcode_type& x)
{
  this->controlcode_.set (x);
}

void ret_payment::
controlcode (const controlcode_optional& x)
{
  this->controlcode_ = x;
}

void ret_payment::
controlcode (::std::unique_ptr< controlcode_type > x)
{
  this->controlcode_.set (std::move (x));
}

const ret_payment::number_optional& ret_payment::
number () const
{
  return this->number_;
}

ret_payment::number_optional& ret_payment::
number ()
{
  return this->number_;
}

void ret_payment::
number (const number_type& x)
{
  this->number_.set (x);
}

void ret_payment::
number (const number_optional& x)
{
  this->number_ = x;
}

void ret_payment::
number (::std::unique_ptr< number_type > x)
{
  this->number_.set (std::move (x));
}

const ret_payment::external_optional& ret_payment::
external () const
{
  return this->external_;
}

ret_payment::external_optional& ret_payment::
external ()
{
  return this->external_;
}

void ret_payment::
external (const external_type& x)
{
  this->external_.set (x);
}

void ret_payment::
external (const external_optional& x)
{
  this->external_ = x;
}

void ret_payment::
external (::std::unique_ptr< external_type > x)
{
  this->external_.set (std::move (x));
}

const ret_payment::extern1_optional& ret_payment::
extern1 () const
{
  return this->extern1_;
}

ret_payment::extern1_optional& ret_payment::
extern1 ()
{
  return this->extern1_;
}

void ret_payment::
extern1 (const extern1_type& x)
{
  this->extern1_.set (x);
}

void ret_payment::
extern1 (const extern1_optional& x)
{
  this->extern1_ = x;
}

void ret_payment::
extern1 (::std::unique_ptr< extern1_type > x)
{
  this->extern1_.set (std::move (x));
}

const ret_payment::extern2_optional& ret_payment::
extern2 () const
{
  return this->extern2_;
}

ret_payment::extern2_optional& ret_payment::
extern2 ()
{
  return this->extern2_;
}

void ret_payment::
extern2 (const extern2_type& x)
{
  this->extern2_.set (x);
}

void ret_payment::
extern2 (const extern2_optional& x)
{
  this->extern2_ = x;
}

void ret_payment::
extern2 (::std::unique_ptr< extern2_type > x)
{
  this->extern2_.set (std::move (x));
}

const ret_payment::extern3_optional& ret_payment::
extern3 () const
{
  return this->extern3_;
}

ret_payment::extern3_optional& ret_payment::
extern3 ()
{
  return this->extern3_;
}

void ret_payment::
extern3 (const extern3_type& x)
{
  this->extern3_.set (x);
}

void ret_payment::
extern3 (const extern3_optional& x)
{
  this->extern3_ = x;
}

void ret_payment::
extern3 (::std::unique_ptr< extern3_type > x)
{
  this->extern3_.set (std::move (x));
}

const ret_payment::statuscode_optional& ret_payment::
statuscode () const
{
  return this->statuscode_;
}

ret_payment::statuscode_optional& ret_payment::
statuscode ()
{
  return this->statuscode_;
}

void ret_payment::
statuscode (const statuscode_type& x)
{
  this->statuscode_.set (x);
}

void ret_payment::
statuscode (const statuscode_optional& x)
{
  this->statuscode_ = x;
}

void ret_payment::
statuscode (::std::unique_ptr< statuscode_type > x)
{
  this->statuscode_.set (std::move (x));
}

const ret_payment::payment_optional& ret_payment::
payment () const
{
  return this->payment_;
}

ret_payment::payment_optional& ret_payment::
payment ()
{
  return this->payment_;
}

void ret_payment::
payment (const payment_type& x)
{
  this->payment_.set (x);
}

void ret_payment::
payment (const payment_optional& x)
{
  this->payment_ = x;
}

void ret_payment::
payment (::std::unique_ptr< payment_type > x)
{
  this->payment_.set (std::move (x));
}

const ret_payment::paymentvat_optional& ret_payment::
paymentvat () const
{
  return this->paymentvat_;
}

ret_payment::paymentvat_optional& ret_payment::
paymentvat ()
{
  return this->paymentvat_;
}

void ret_payment::
paymentvat (const paymentvat_type& x)
{
  this->paymentvat_.set (x);
}

void ret_payment::
paymentvat (const paymentvat_optional& x)
{
  this->paymentvat_ = x;
}

void ret_payment::
paymentvat (::std::unique_ptr< paymentvat_type > x)
{
  this->paymentvat_.set (std::move (x));
}

const ret_payment::paymentdate_optional& ret_payment::
paymentdate () const
{
  return this->paymentdate_;
}

ret_payment::paymentdate_optional& ret_payment::
paymentdate ()
{
  return this->paymentdate_;
}

void ret_payment::
paymentdate (const paymentdate_type& x)
{
  this->paymentdate_.set (x);
}

void ret_payment::
paymentdate (const paymentdate_optional& x)
{
  this->paymentdate_ = x;
}

void ret_payment::
paymentdate (::std::unique_ptr< paymentdate_type > x)
{
  this->paymentdate_.set (std::move (x));
}

const ret_payment::currency_optional& ret_payment::
currency () const
{
  return this->currency_;
}

ret_payment::currency_optional& ret_payment::
currency ()
{
  return this->currency_;
}

void ret_payment::
currency (const currency_type& x)
{
  this->currency_.set (x);
}

void ret_payment::
currency (const currency_optional& x)
{
  this->currency_ = x;
}

void ret_payment::
currency (::std::unique_ptr< currency_type > x)
{
  this->currency_.set (std::move (x));
}

const ret_payment::exchange_optional& ret_payment::
exchange () const
{
  return this->exchange_;
}

ret_payment::exchange_optional& ret_payment::
exchange ()
{
  return this->exchange_;
}

void ret_payment::
exchange (const exchange_type& x)
{
  this->exchange_.set (x);
}

void ret_payment::
exchange (const exchange_optional& x)
{
  this->exchange_ = x;
}

void ret_payment::
exchange (::std::unique_ptr< exchange_type > x)
{
  this->exchange_.set (std::move (x));
}

const ret_payment::desc_optional& ret_payment::
desc () const
{
  return this->desc_;
}

ret_payment::desc_optional& ret_payment::
desc ()
{
  return this->desc_;
}

void ret_payment::
desc (const desc_type& x)
{
  this->desc_.set (x);
}

void ret_payment::
desc (const desc_optional& x)
{
  this->desc_ = x;
}

void ret_payment::
desc (::std::unique_ptr< desc_type > x)
{
  this->desc_.set (std::move (x));
}

const ret_payment::note_optional& ret_payment::
note () const
{
  return this->note_;
}

ret_payment::note_optional& ret_payment::
note ()
{
  return this->note_;
}

void ret_payment::
note (const note_type& x)
{
  this->note_.set (x);
}

void ret_payment::
note (const note_optional& x)
{
  this->note_ = x;
}

void ret_payment::
note (::std::unique_ptr< note_type > x)
{
  this->note_.set (std::move (x));
}

const ret_payment::remark_optional& ret_payment::
remark () const
{
  return this->remark_;
}

ret_payment::remark_optional& ret_payment::
remark ()
{
  return this->remark_;
}

void ret_payment::
remark (const remark_type& x)
{
  this->remark_.set (x);
}

void ret_payment::
remark (const remark_optional& x)
{
  this->remark_ = x;
}

void ret_payment::
remark (::std::unique_ptr< remark_type > x)
{
  this->remark_.set (std::move (x));
}


// bool_type
//

bool_type* bool_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bool_type (*this, f, c);
}

// collect_type
//

collect_type* collect_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class collect_type (*this, f, c);
}

// text256_type
//

text256_type::
text256_type ()
: ::xml_schema::string ()
{
}

text256_type::
text256_type (const wchar_t* _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text256_type::
text256_type (const ::std::wstring& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text256_type::
text256_type (const ::xml_schema::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text256_type::
text256_type (const text256_type& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::string (x, f, c)
{
}

text256_type* text256_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class text256_type (*this, f, c);
}

text256_type::
~text256_type ()
{
}

// text128_type
//

text128_type::
text128_type ()
: ::xml_schema::string ()
{
}

text128_type::
text128_type (const wchar_t* _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text128_type::
text128_type (const ::std::wstring& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text128_type::
text128_type (const ::xml_schema::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text128_type::
text128_type (const text128_type& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::string (x, f, c)
{
}

text128_type* text128_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class text128_type (*this, f, c);
}

text128_type::
~text128_type ()
{
}

// text64_type
//

text64_type::
text64_type ()
: ::xml_schema::string ()
{
}

text64_type::
text64_type (const wchar_t* _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text64_type::
text64_type (const ::std::wstring& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text64_type::
text64_type (const ::xml_schema::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text64_type::
text64_type (const text64_type& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (x, f, c)
{
}

text64_type* text64_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class text64_type (*this, f, c);
}

text64_type::
~text64_type ()
{
}

// text48_type
//

text48_type::
text48_type ()
: ::xml_schema::string ()
{
}

text48_type::
text48_type (const wchar_t* _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text48_type::
text48_type (const ::std::wstring& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text48_type::
text48_type (const ::xml_schema::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text48_type::
text48_type (const text48_type& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (x, f, c)
{
}

text48_type* text48_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class text48_type (*this, f, c);
}

text48_type::
~text48_type ()
{
}

// text32_type
//

text32_type::
text32_type ()
: ::xml_schema::string ()
{
}

text32_type::
text32_type (const wchar_t* _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text32_type::
text32_type (const ::std::wstring& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text32_type::
text32_type (const ::xml_schema::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text32_type::
text32_type (const text32_type& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (x, f, c)
{
}

text32_type* text32_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class text32_type (*this, f, c);
}

text32_type::
~text32_type ()
{
}

// text16_type
//

text16_type::
text16_type ()
: ::xml_schema::string ()
{
}

text16_type::
text16_type (const wchar_t* _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text16_type::
text16_type (const ::std::wstring& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text16_type::
text16_type (const ::xml_schema::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text16_type::
text16_type (const text16_type& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (x, f, c)
{
}

text16_type* text16_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class text16_type (*this, f, c);
}

text16_type::
~text16_type ()
{
}

// text12_type
//

text12_type::
text12_type ()
: ::xml_schema::string ()
{
}

text12_type::
text12_type (const wchar_t* _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text12_type::
text12_type (const ::std::wstring& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text12_type::
text12_type (const ::xml_schema::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text12_type::
text12_type (const text12_type& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (x, f, c)
{
}

text12_type* text12_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class text12_type (*this, f, c);
}

text12_type::
~text12_type ()
{
}

// text8_type
//

text8_type::
text8_type ()
: ::xml_schema::string ()
{
}

text8_type::
text8_type (const wchar_t* _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text8_type::
text8_type (const ::std::wstring& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text8_type::
text8_type (const ::xml_schema::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text8_type::
text8_type (const text8_type& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::string (x, f, c)
{
}

text8_type* text8_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class text8_type (*this, f, c);
}

text8_type::
~text8_type ()
{
}

// text4_type
//

text4_type::
text4_type ()
: ::xml_schema::string ()
{
}

text4_type::
text4_type (const wchar_t* _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text4_type::
text4_type (const ::std::wstring& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text4_type::
text4_type (const ::xml_schema::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

text4_type::
text4_type (const text4_type& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::string (x, f, c)
{
}

text4_type* text4_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class text4_type (*this, f, c);
}

text4_type::
~text4_type ()
{
}

// invoicetype_type
//

invoicetype_type::
invoicetype_type ()
: ::xml_schema::string ()
{
}

invoicetype_type::
invoicetype_type (const wchar_t* _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

invoicetype_type::
invoicetype_type (const ::std::wstring& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

invoicetype_type::
invoicetype_type (const ::xml_schema::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

invoicetype_type::
invoicetype_type (const invoicetype_type& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::string (x, f, c)
{
}

invoicetype_type* invoicetype_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class invoicetype_type (*this, f, c);
}

invoicetype_type::
~invoicetype_type ()
{
}

// scope_type
//

scope_type* scope_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class scope_type (*this, f, c);
}

scope_type::value scope_type::
_xsd_scope_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_scope_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_scope_type_indexes_,
                    _xsd_scope_type_indexes_ + 16,
                    *this,
                    c));

  if (i == _xsd_scope_type_indexes_ + 16 || _xsd_scope_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const scope_type::
_xsd_scope_type_literals_[16] =
{
  L"bkm.city",
  L"bkm.bank",
  L"bkm.part",
  L"bkm.order",
  L"bkm.parish",
  L"bkm.project",
  L"bkm.placing",
  L"bkm.payment",
  L"bkm.contact",
  L"bkm.invoice",
  L"bkm.addition",
  L"bkm.evident",
  L"bkm.revision",
  L"bkm.backup",
  L"bkm.counterpart",
  L"ret.invoice"
};

const scope_type::value scope_type::
_xsd_scope_type_indexes_[16] =
{
  ::scope_type::bkm_addition,
  ::scope_type::bkm_backup,
  ::scope_type::bkm_bank,
  ::scope_type::bkm_city,
  ::scope_type::bkm_contact,
  ::scope_type::bkm_counterpart,
  ::scope_type::bkm_evident,
  ::scope_type::bkm_invoice,
  ::scope_type::bkm_order,
  ::scope_type::bkm_parish,
  ::scope_type::bkm_part,
  ::scope_type::bkm_payment,
  ::scope_type::bkm_placing,
  ::scope_type::bkm_project,
  ::scope_type::bkm_revision,
  ::scope_type::ret_invoice
};

// valuedata_type
//

valuedata_type* valuedata_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class valuedata_type (*this, f, c);
}

valuedata_type::value valuedata_type::
_xsd_valuedata_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_valuedata_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_valuedata_type_indexes_,
                    _xsd_valuedata_type_indexes_ + 11,
                    *this,
                    c));

  if (i == _xsd_valuedata_type_indexes_ + 11 || _xsd_valuedata_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const valuedata_type::
_xsd_valuedata_type_literals_[11] =
{
  L"string",
  L"int",
  L"double",
  L"date",
  L"list",
  L"percent",
  L"contact",
  L"counterpart",
  L"enlisted",
  L"user",
  L"workgroup"
};

const valuedata_type::value valuedata_type::
_xsd_valuedata_type_indexes_[11] =
{
  ::valuedata_type::contact,
  ::valuedata_type::counterpart,
  ::valuedata_type::date,
  ::valuedata_type::double_,
  ::valuedata_type::enlisted,
  ::valuedata_type::int_,
  ::valuedata_type::list,
  ::valuedata_type::percent,
  ::valuedata_type::string,
  ::valuedata_type::user,
  ::valuedata_type::workgroup
};

// normdata_type
//

normdata_type* normdata_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class normdata_type (*this, f, c);
}

normdata_type::value normdata_type::
_xsd_normdata_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_normdata_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_normdata_type_indexes_,
                    _xsd_normdata_type_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_normdata_type_indexes_ + 2 || _xsd_normdata_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const normdata_type::
_xsd_normdata_type_literals_[2] =
{
  L"oenorm",
  L"gaeb"
};

const normdata_type::value normdata_type::
_xsd_normdata_type_indexes_[2] =
{
  ::normdata_type::gaeb,
  ::normdata_type::oenorm
};

// externalkey_type
//

externalkey_type::
externalkey_type ()
: ::xml_schema::string ()
{
}

externalkey_type::
externalkey_type (const wchar_t* _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

externalkey_type::
externalkey_type (const ::std::wstring& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

externalkey_type::
externalkey_type (const ::xml_schema::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base)
{
}

externalkey_type::
externalkey_type (const externalkey_type& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::string (x, f, c)
{
}

externalkey_type* externalkey_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class externalkey_type (*this, f, c);
}

externalkey_type::
~externalkey_type ()
{
}

// decimal_type
//

static const ::xsd::cxx::tree::facet _xsd_decimal_type_facet_table[] = 
{
  {
    ::xsd::cxx::tree::facet::fraction_digits, 2UL
  },

  {
    ::xsd::cxx::tree::facet::total_digits, 12UL
  },

  {
    ::xsd::cxx::tree::facet::none, 0UL
  }
};

decimal_type::
decimal_type (const ::xml_schema::decimal& _xsd_decimal_base)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, wchar_t, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal > (_xsd_decimal_base)
{
  this->_facet_table (_xsd_decimal_type_facet_table);
}

decimal_type::
decimal_type (const decimal_type& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, wchar_t, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal > (x, f, c)
{
  this->_facet_table (_xsd_decimal_type_facet_table);
}

decimal_type* decimal_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class decimal_type (*this, f, c);
}

decimal_type::
~decimal_type ()
{
}

// decimal8_type
//

static const ::xsd::cxx::tree::facet _xsd_decimal8_type_facet_table[] = 
{
  {
    ::xsd::cxx::tree::facet::fraction_digits, 8UL
  },

  {
    ::xsd::cxx::tree::facet::total_digits, 12UL
  },

  {
    ::xsd::cxx::tree::facet::none, 0UL
  }
};

decimal8_type::
decimal8_type (const ::xml_schema::decimal& _xsd_decimal_base)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, wchar_t, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal > (_xsd_decimal_base)
{
  this->_facet_table (_xsd_decimal8_type_facet_table);
}

decimal8_type::
decimal8_type (const decimal8_type& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, wchar_t, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal > (x, f, c)
{
  this->_facet_table (_xsd_decimal8_type_facet_table);
}

decimal8_type* decimal8_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class decimal8_type (*this, f, c);
}

decimal8_type::
~decimal8_type ()
{
}

// percent_type
//

static const ::xsd::cxx::tree::facet _xsd_percent_type_facet_table[] = 
{
  {
    ::xsd::cxx::tree::facet::fraction_digits, 6UL
  },

  {
    ::xsd::cxx::tree::facet::total_digits, 18UL
  },

  {
    ::xsd::cxx::tree::facet::none, 0UL
  }
};

percent_type::
percent_type (const ::xml_schema::decimal& _xsd_decimal_base)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, wchar_t, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal > (_xsd_decimal_base)
{
  this->_facet_table (_xsd_percent_type_facet_table);
}

percent_type::
percent_type (const percent_type& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, wchar_t, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal > (x, f, c)
{
  this->_facet_table (_xsd_percent_type_facet_table);
}

percent_type* percent_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class percent_type (*this, f, c);
}

percent_type::
~percent_type ()
{
}

// documentviewertype_type
//

documentviewertype_type* documentviewertype_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class documentviewertype_type (*this, f, c);
}

documentviewertype_type::value documentviewertype_type::
_xsd_documentviewertype_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_documentviewertype_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_documentviewertype_type_indexes_,
                    _xsd_documentviewertype_type_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_documentviewertype_type_indexes_ + 2 || _xsd_documentviewertype_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const documentviewertype_type::
_xsd_documentviewertype_type_literals_[2] =
{
  L"STD",
  L"IE"
};

const documentviewertype_type::value documentviewertype_type::
_xsd_documentviewertype_type_indexes_[2] =
{
  ::documentviewertype_type::IE,
  ::documentviewertype_type::STD
};

// matchfieldrange_type
//

matchfieldrange_type* matchfieldrange_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class matchfieldrange_type (*this, f, c);
}

matchfieldrange_type::value matchfieldrange_type::
_xsd_matchfieldrange_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_matchfieldrange_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_matchfieldrange_type_indexes_,
                    _xsd_matchfieldrange_type_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_matchfieldrange_type_indexes_ + 3 || _xsd_matchfieldrange_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const matchfieldrange_type::
_xsd_matchfieldrange_type_literals_[3] =
{
  L"id",
  L"code",
  L"key"
};

const matchfieldrange_type::value matchfieldrange_type::
_xsd_matchfieldrange_type_indexes_[3] =
{
  ::matchfieldrange_type::code,
  ::matchfieldrange_type::id,
  ::matchfieldrange_type::key
};

// matchfielduser_type
//

matchfielduser_type* matchfielduser_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class matchfielduser_type (*this, f, c);
}

matchfielduser_type::value matchfielduser_type::
_xsd_matchfielduser_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_matchfielduser_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_matchfielduser_type_indexes_,
                    _xsd_matchfielduser_type_indexes_ + 4,
                    *this,
                    c));

  if (i == _xsd_matchfielduser_type_indexes_ + 4 || _xsd_matchfielduser_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const matchfielduser_type::
_xsd_matchfielduser_type_literals_[4] =
{
  L"id",
  L"code",
  L"extern3",
  L"login"
};

const matchfielduser_type::value matchfielduser_type::
_xsd_matchfielduser_type_indexes_[4] =
{
  ::matchfielduser_type::code,
  ::matchfielduser_type::extern3,
  ::matchfielduser_type::id,
  ::matchfielduser_type::login
};

// matchfieldresponse_type
//

matchfieldresponse_type* matchfieldresponse_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class matchfieldresponse_type (*this, f, c);
}

matchfieldresponse_type::value matchfieldresponse_type::
_xsd_matchfieldresponse_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_matchfieldresponse_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_matchfieldresponse_type_indexes_,
                    _xsd_matchfieldresponse_type_indexes_ + 1,
                    *this,
                    c));

  if (i == _xsd_matchfieldresponse_type_indexes_ + 1 || _xsd_matchfieldresponse_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const matchfieldresponse_type::
_xsd_matchfieldresponse_type_literals_[1] =
{
  L"id"
};

const matchfieldresponse_type::value matchfieldresponse_type::
_xsd_matchfieldresponse_type_indexes_[1] =
{
  ::matchfieldresponse_type::id
};

// matchfieldcity_type
//

matchfieldcity_type* matchfieldcity_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class matchfieldcity_type (*this, f, c);
}

matchfieldcity_type::value matchfieldcity_type::
_xsd_matchfieldcity_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_matchfieldcity_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_matchfieldcity_type_indexes_,
                    _xsd_matchfieldcity_type_indexes_ + 1,
                    *this,
                    c));

  if (i == _xsd_matchfieldcity_type_indexes_ + 1 || _xsd_matchfieldcity_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const matchfieldcity_type::
_xsd_matchfieldcity_type_literals_[1] =
{
  L"zipcode"
};

const matchfieldcity_type::value matchfieldcity_type::
_xsd_matchfieldcity_type_indexes_[1] =
{
  ::matchfieldcity_type::zipcode
};

// matchfielddocument_type
//

matchfielddocument_type* matchfielddocument_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class matchfielddocument_type (*this, f, c);
}

matchfielddocument_type::value matchfielddocument_type::
_xsd_matchfielddocument_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_matchfielddocument_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_matchfielddocument_type_indexes_,
                    _xsd_matchfielddocument_type_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_matchfielddocument_type_indexes_ + 2 || _xsd_matchfielddocument_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const matchfielddocument_type::
_xsd_matchfielddocument_type_literals_[2] =
{
  L"id",
  L"name"
};

const matchfielddocument_type::value matchfielddocument_type::
_xsd_matchfielddocument_type_indexes_[2] =
{
  ::matchfielddocument_type::id,
  ::matchfielddocument_type::name
};

// matchfieldkeyvalue_type
//

matchfieldkeyvalue_type* matchfieldkeyvalue_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class matchfieldkeyvalue_type (*this, f, c);
}

matchfieldkeyvalue_type::value matchfieldkeyvalue_type::
_xsd_matchfieldkeyvalue_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_matchfieldkeyvalue_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_matchfieldkeyvalue_type_indexes_,
                    _xsd_matchfieldkeyvalue_type_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_matchfieldkeyvalue_type_indexes_ + 2 || _xsd_matchfieldkeyvalue_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const matchfieldkeyvalue_type::
_xsd_matchfieldkeyvalue_type_literals_[2] =
{
  L"id",
  L"code"
};

const matchfieldkeyvalue_type::value matchfieldkeyvalue_type::
_xsd_matchfieldkeyvalue_type_indexes_[2] =
{
  ::matchfieldkeyvalue_type::code,
  ::matchfieldkeyvalue_type::id
};

// matchfieldparish_type
//

matchfieldparish_type* matchfieldparish_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class matchfieldparish_type (*this, f, c);
}

matchfieldparish_type::value matchfieldparish_type::
_xsd_matchfieldparish_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_matchfieldparish_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_matchfieldparish_type_indexes_,
                    _xsd_matchfieldparish_type_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_matchfieldparish_type_indexes_ + 3 || _xsd_matchfieldparish_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const matchfieldparish_type::
_xsd_matchfieldparish_type_literals_[3] =
{
  L"id",
  L"code",
  L"parish"
};

const matchfieldparish_type::value matchfieldparish_type::
_xsd_matchfieldparish_type_indexes_[3] =
{
  ::matchfieldparish_type::code,
  ::matchfieldparish_type::id,
  ::matchfieldparish_type::parish
};

// matchfieldcontact_type
//

matchfieldcontact_type* matchfieldcontact_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class matchfieldcontact_type (*this, f, c);
}

matchfieldcontact_type::value matchfieldcontact_type::
_xsd_matchfieldcontact_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_matchfieldcontact_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_matchfieldcontact_type_indexes_,
                    _xsd_matchfieldcontact_type_indexes_ + 4,
                    *this,
                    c));

  if (i == _xsd_matchfieldcontact_type_indexes_ + 4 || _xsd_matchfieldcontact_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const matchfieldcontact_type::
_xsd_matchfieldcontact_type_literals_[4] =
{
  L"id",
  L"keyid",
  L"synonym",
  L"vatid"
};

const matchfieldcontact_type::value matchfieldcontact_type::
_xsd_matchfieldcontact_type_indexes_[4] =
{
  ::matchfieldcontact_type::id,
  ::matchfieldcontact_type::keyid,
  ::matchfieldcontact_type::synonym,
  ::matchfieldcontact_type::vatid
};

// matchfieldcounterpart_type
//

matchfieldcounterpart_type* matchfieldcounterpart_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class matchfieldcounterpart_type (*this, f, c);
}

matchfieldcounterpart_type::value matchfieldcounterpart_type::
_xsd_matchfieldcounterpart_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_matchfieldcounterpart_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_matchfieldcounterpart_type_indexes_,
                    _xsd_matchfieldcounterpart_type_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_matchfieldcounterpart_type_indexes_ + 3 || _xsd_matchfieldcounterpart_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const matchfieldcounterpart_type::
_xsd_matchfieldcounterpart_type_literals_[3] =
{
  L"id",
  L"lastname",
  L"mail"
};

const matchfieldcounterpart_type::value matchfieldcounterpart_type::
_xsd_matchfieldcounterpart_type_indexes_[3] =
{
  ::matchfieldcounterpart_type::id,
  ::matchfieldcounterpart_type::lastname,
  ::matchfieldcounterpart_type::mail
};

// matchfieldproject_type
//

matchfieldproject_type* matchfieldproject_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class matchfieldproject_type (*this, f, c);
}

matchfieldproject_type::value matchfieldproject_type::
_xsd_matchfieldproject_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_matchfieldproject_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_matchfieldproject_type_indexes_,
                    _xsd_matchfieldproject_type_indexes_ + 6,
                    *this,
                    c));

  if (i == _xsd_matchfieldproject_type_indexes_ + 6 || _xsd_matchfieldproject_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const matchfieldproject_type::
_xsd_matchfieldproject_type_literals_[6] =
{
  L"id",
  L"code",
  L"number",
  L"extern3",
  L"extern3;partstruct",
  L"part"
};

const matchfieldproject_type::value matchfieldproject_type::
_xsd_matchfieldproject_type_indexes_[6] =
{
  ::matchfieldproject_type::code,
  ::matchfieldproject_type::extern3,
  ::matchfieldproject_type::extern3_partstruct,
  ::matchfieldproject_type::id,
  ::matchfieldproject_type::number,
  ::matchfieldproject_type::part
};

// matchfieldpart_type
//

matchfieldpart_type* matchfieldpart_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class matchfieldpart_type (*this, f, c);
}

matchfieldpart_type::value matchfieldpart_type::
_xsd_matchfieldpart_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_matchfieldpart_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_matchfieldpart_type_indexes_,
                    _xsd_matchfieldpart_type_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_matchfieldpart_type_indexes_ + 3 || _xsd_matchfieldpart_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const matchfieldpart_type::
_xsd_matchfieldpart_type_literals_[3] =
{
  L"id",
  L"code",
  L"extern3"
};

const matchfieldpart_type::value matchfieldpart_type::
_xsd_matchfieldpart_type_indexes_[3] =
{
  ::matchfieldpart_type::code,
  ::matchfieldpart_type::extern3,
  ::matchfieldpart_type::id
};

// matchfieldplacing_type
//

matchfieldplacing_type* matchfieldplacing_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class matchfieldplacing_type (*this, f, c);
}

matchfieldplacing_type::value matchfieldplacing_type::
_xsd_matchfieldplacing_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_matchfieldplacing_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_matchfieldplacing_type_indexes_,
                    _xsd_matchfieldplacing_type_indexes_ + 5,
                    *this,
                    c));

  if (i == _xsd_matchfieldplacing_type_indexes_ + 5 || _xsd_matchfieldplacing_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const matchfieldplacing_type::
_xsd_matchfieldplacing_type_literals_[5] =
{
  L"id",
  L"code",
  L"code;partcode1",
  L"code;groupcode",
  L"extern3"
};

const matchfieldplacing_type::value matchfieldplacing_type::
_xsd_matchfieldplacing_type_indexes_[5] =
{
  ::matchfieldplacing_type::code,
  ::matchfieldplacing_type::code_groupcode,
  ::matchfieldplacing_type::code_partcode1,
  ::matchfieldplacing_type::extern3,
  ::matchfieldplacing_type::id
};

// matchfieldrevision_type
//

matchfieldrevision_type* matchfieldrevision_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class matchfieldrevision_type (*this, f, c);
}

matchfieldrevision_type::value matchfieldrevision_type::
_xsd_matchfieldrevision_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_matchfieldrevision_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_matchfieldrevision_type_indexes_,
                    _xsd_matchfieldrevision_type_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_matchfieldrevision_type_indexes_ + 2 || _xsd_matchfieldrevision_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const matchfieldrevision_type::
_xsd_matchfieldrevision_type_literals_[2] =
{
  L"id",
  L"number"
};

const matchfieldrevision_type::value matchfieldrevision_type::
_xsd_matchfieldrevision_type_indexes_[2] =
{
  ::matchfieldrevision_type::id,
  ::matchfieldrevision_type::number
};

// matchfieldorder_type
//

matchfieldorder_type* matchfieldorder_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class matchfieldorder_type (*this, f, c);
}

matchfieldorder_type::value matchfieldorder_type::
_xsd_matchfieldorder_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_matchfieldorder_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_matchfieldorder_type_indexes_,
                    _xsd_matchfieldorder_type_indexes_ + 7,
                    *this,
                    c));

  if (i == _xsd_matchfieldorder_type_indexes_ + 7 || _xsd_matchfieldorder_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const matchfieldorder_type::
_xsd_matchfieldorder_type_literals_[7] =
{
  L"id",
  L"number",
  L"numbercol",
  L"numbercol;parentkey",
  L"contract",
  L"extern3",
  L"placingkey;vendorkey"
};

const matchfieldorder_type::value matchfieldorder_type::
_xsd_matchfieldorder_type_indexes_[7] =
{
  ::matchfieldorder_type::contract,
  ::matchfieldorder_type::extern3,
  ::matchfieldorder_type::id,
  ::matchfieldorder_type::number,
  ::matchfieldorder_type::numbercol,
  ::matchfieldorder_type::numbercol_parentkey,
  ::matchfieldorder_type::placingkey_vendorkey
};

// matchfieldaddition_type
//

matchfieldaddition_type* matchfieldaddition_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class matchfieldaddition_type (*this, f, c);
}

matchfieldaddition_type::value matchfieldaddition_type::
_xsd_matchfieldaddition_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_matchfieldaddition_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_matchfieldaddition_type_indexes_,
                    _xsd_matchfieldaddition_type_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_matchfieldaddition_type_indexes_ + 3 || _xsd_matchfieldaddition_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const matchfieldaddition_type::
_xsd_matchfieldaddition_type_literals_[3] =
{
  L"id",
  L"number",
  L"statuscode"
};

const matchfieldaddition_type::value matchfieldaddition_type::
_xsd_matchfieldaddition_type_indexes_[3] =
{
  ::matchfieldaddition_type::id,
  ::matchfieldaddition_type::number,
  ::matchfieldaddition_type::statuscode
};

// matchfieldevident_type
//

matchfieldevident_type* matchfieldevident_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class matchfieldevident_type (*this, f, c);
}

matchfieldevident_type::value matchfieldevident_type::
_xsd_matchfieldevident_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_matchfieldevident_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_matchfieldevident_type_indexes_,
                    _xsd_matchfieldevident_type_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_matchfieldevident_type_indexes_ + 3 || _xsd_matchfieldevident_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const matchfieldevident_type::
_xsd_matchfieldevident_type_literals_[3] =
{
  L"id",
  L"number",
  L"numberproject"
};

const matchfieldevident_type::value matchfieldevident_type::
_xsd_matchfieldevident_type_indexes_[3] =
{
  ::matchfieldevident_type::id,
  ::matchfieldevident_type::number,
  ::matchfieldevident_type::numberproject
};

// matchfieldbackup_type
//

matchfieldbackup_type* matchfieldbackup_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class matchfieldbackup_type (*this, f, c);
}

matchfieldbackup_type::value matchfieldbackup_type::
_xsd_matchfieldbackup_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_matchfieldbackup_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_matchfieldbackup_type_indexes_,
                    _xsd_matchfieldbackup_type_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_matchfieldbackup_type_indexes_ + 2 || _xsd_matchfieldbackup_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const matchfieldbackup_type::
_xsd_matchfieldbackup_type_literals_[2] =
{
  L"id",
  L"code"
};

const matchfieldbackup_type::value matchfieldbackup_type::
_xsd_matchfieldbackup_type_indexes_[2] =
{
  ::matchfieldbackup_type::code,
  ::matchfieldbackup_type::id
};

// matchfieldavaorder_type
//

matchfieldavaorder_type* matchfieldavaorder_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class matchfieldavaorder_type (*this, f, c);
}

matchfieldavaorder_type::value matchfieldavaorder_type::
_xsd_matchfieldavaorder_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_matchfieldavaorder_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_matchfieldavaorder_type_indexes_,
                    _xsd_matchfieldavaorder_type_indexes_ + 4,
                    *this,
                    c));

  if (i == _xsd_matchfieldavaorder_type_indexes_ + 4 || _xsd_matchfieldavaorder_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const matchfieldavaorder_type::
_xsd_matchfieldavaorder_type_literals_[4] =
{
  L"id",
  L"number",
  L"order",
  L"code"
};

const matchfieldavaorder_type::value matchfieldavaorder_type::
_xsd_matchfieldavaorder_type_indexes_[4] =
{
  ::matchfieldavaorder_type::code,
  ::matchfieldavaorder_type::id,
  ::matchfieldavaorder_type::number,
  ::matchfieldavaorder_type::order
};

// matchfieldavaunit_type
//

matchfieldavaunit_type* matchfieldavaunit_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class matchfieldavaunit_type (*this, f, c);
}

matchfieldavaunit_type::value matchfieldavaunit_type::
_xsd_matchfieldavaunit_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_matchfieldavaunit_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_matchfieldavaunit_type_indexes_,
                    _xsd_matchfieldavaunit_type_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_matchfieldavaunit_type_indexes_ + 2 || _xsd_matchfieldavaunit_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const matchfieldavaunit_type::
_xsd_matchfieldavaunit_type_literals_[2] =
{
  L"id",
  L"code"
};

const matchfieldavaunit_type::value matchfieldavaunit_type::
_xsd_matchfieldavaunit_type_indexes_[2] =
{
  ::matchfieldavaunit_type::code,
  ::matchfieldavaunit_type::id
};

// matchfieldinvoice_type
//

matchfieldinvoice_type* matchfieldinvoice_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class matchfieldinvoice_type (*this, f, c);
}

matchfieldinvoice_type::value matchfieldinvoice_type::
_xsd_matchfieldinvoice_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_matchfieldinvoice_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_matchfieldinvoice_type_indexes_,
                    _xsd_matchfieldinvoice_type_indexes_ + 5,
                    *this,
                    c));

  if (i == _xsd_matchfieldinvoice_type_indexes_ + 5 || _xsd_matchfieldinvoice_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const matchfieldinvoice_type::
_xsd_matchfieldinvoice_type_literals_[5] =
{
  L"id",
  L"number",
  L"extern1",
  L"extern2",
  L"extern3"
};

const matchfieldinvoice_type::value matchfieldinvoice_type::
_xsd_matchfieldinvoice_type_indexes_[5] =
{
  ::matchfieldinvoice_type::extern1,
  ::matchfieldinvoice_type::extern2,
  ::matchfieldinvoice_type::extern3,
  ::matchfieldinvoice_type::id,
  ::matchfieldinvoice_type::number
};

// matchfieldpayment_type
//

matchfieldpayment_type* matchfieldpayment_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class matchfieldpayment_type (*this, f, c);
}

matchfieldpayment_type::value matchfieldpayment_type::
_xsd_matchfieldpayment_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_matchfieldpayment_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_matchfieldpayment_type_indexes_,
                    _xsd_matchfieldpayment_type_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_matchfieldpayment_type_indexes_ + 2 || _xsd_matchfieldpayment_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const matchfieldpayment_type::
_xsd_matchfieldpayment_type_literals_[2] =
{
  L"id",
  L"number"
};

const matchfieldpayment_type::value matchfieldpayment_type::
_xsd_matchfieldpayment_type_indexes_[2] =
{
  ::matchfieldpayment_type::id,
  ::matchfieldpayment_type::number
};

// matchfieldbank_type
//

matchfieldbank_type* matchfieldbank_type::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class matchfieldbank_type (*this, f, c);
}

matchfieldbank_type::value matchfieldbank_type::
_xsd_matchfieldbank_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_matchfieldbank_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_matchfieldbank_type_indexes_,
                    _xsd_matchfieldbank_type_indexes_ + 4,
                    *this,
                    c));

  if (i == _xsd_matchfieldbank_type_indexes_ + 4 || _xsd_matchfieldbank_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
  }

  return *i;
}

const wchar_t* const matchfieldbank_type::
_xsd_matchfieldbank_type_literals_[4] =
{
  L"id",
  L"bin",
  L"blz",
  L"swift"
};

const matchfieldbank_type::value matchfieldbank_type::
_xsd_matchfieldbank_type_indexes_[4] =
{
  ::matchfieldbank_type::bin,
  ::matchfieldbank_type::blz,
  ::matchfieldbank_type::id,
  ::matchfieldbank_type::swift
};

// coordata
//

const coordata::external_type coordata::external_default_value_ (
  L"STD");

const coordata::version_type coordata::version_default_value_ (
  L"2.7");

coordata::
coordata ()
: ::xml_schema::type (),
  bkm_response_ (this),
  bkm_user_ (this),
  bkm_range_ (this),
  bkm_bank_ (this),
  bkm_parish_ (this),
  bkm_city_ (this),
  bkm_contact_ (this),
  bkm_counterpart_ (this),
  bkm_part_ (this),
  bkm_placing_ (this),
  bkm_invoice_ (this),
  bkm_payment_ (this),
  ava_unit_ (this),
  bkm_project_ (this),
  name_ (this),
  mandant_ (this),
  exchangeid_ (this),
  external_ (external_default_value (), this),
  version_ (version_default_value (), this),
  response_ (this),
  winuser_ (this),
  winuserkey_ (this),
  infodate_ (this),
  info_ (this),
  infouser_ (this)
{
}

coordata::
coordata (const coordata& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  bkm_response_ (x.bkm_response_, f, this),
  bkm_user_ (x.bkm_user_, f, this),
  bkm_range_ (x.bkm_range_, f, this),
  bkm_bank_ (x.bkm_bank_, f, this),
  bkm_parish_ (x.bkm_parish_, f, this),
  bkm_city_ (x.bkm_city_, f, this),
  bkm_contact_ (x.bkm_contact_, f, this),
  bkm_counterpart_ (x.bkm_counterpart_, f, this),
  bkm_part_ (x.bkm_part_, f, this),
  bkm_placing_ (x.bkm_placing_, f, this),
  bkm_invoice_ (x.bkm_invoice_, f, this),
  bkm_payment_ (x.bkm_payment_, f, this),
  ava_unit_ (x.ava_unit_, f, this),
  bkm_project_ (x.bkm_project_, f, this),
  name_ (x.name_, f, this),
  mandant_ (x.mandant_, f, this),
  exchangeid_ (x.exchangeid_, f, this),
  external_ (x.external_, f, this),
  version_ (x.version_, f, this),
  response_ (x.response_, f, this),
  winuser_ (x.winuser_, f, this),
  winuserkey_ (x.winuserkey_, f, this),
  infodate_ (x.infodate_, f, this),
  info_ (x.info_, f, this),
  infouser_ (x.infouser_, f, this)
{
}

coordata* coordata::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class coordata (*this, f, c);
}

coordata& coordata::
operator= (const coordata& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->bkm_response_ = x.bkm_response_;
    this->bkm_user_ = x.bkm_user_;
    this->bkm_range_ = x.bkm_range_;
    this->bkm_bank_ = x.bkm_bank_;
    this->bkm_parish_ = x.bkm_parish_;
    this->bkm_city_ = x.bkm_city_;
    this->bkm_contact_ = x.bkm_contact_;
    this->bkm_counterpart_ = x.bkm_counterpart_;
    this->bkm_part_ = x.bkm_part_;
    this->bkm_placing_ = x.bkm_placing_;
    this->bkm_invoice_ = x.bkm_invoice_;
    this->bkm_payment_ = x.bkm_payment_;
    this->ava_unit_ = x.ava_unit_;
    this->bkm_project_ = x.bkm_project_;
    this->name_ = x.name_;
    this->mandant_ = x.mandant_;
    this->exchangeid_ = x.exchangeid_;
    this->external_ = x.external_;
    this->version_ = x.version_;
    this->response_ = x.response_;
    this->winuser_ = x.winuser_;
    this->winuserkey_ = x.winuserkey_;
    this->infodate_ = x.infodate_;
    this->info_ = x.info_;
    this->infouser_ = x.infouser_;
  }

  return *this;
}

coordata::
~coordata ()
{
}

// bkm_response
//

bkm_response::
bkm_response (const status_type& status,
              const externalkey_type& externalkey)
: ::xml_schema::type (),
  id_ (this),
  status_ (status, this),
  externalkey_ (externalkey, this),
  matchfield_ (this),
  scope_ (this),
  name_ (this),
  code_ (this),
  detail_ (this),
  message_ (this),
  extern3_ (this)
{
}

bkm_response::
bkm_response (const bkm_response& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  status_ (x.status_, f, this),
  externalkey_ (x.externalkey_, f, this),
  matchfield_ (x.matchfield_, f, this),
  scope_ (x.scope_, f, this),
  name_ (x.name_, f, this),
  code_ (x.code_, f, this),
  detail_ (x.detail_, f, this),
  message_ (x.message_, f, this),
  extern3_ (x.extern3_, f, this)
{
}

bkm_response* bkm_response::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_response (*this, f, c);
}

bkm_response& bkm_response::
operator= (const bkm_response& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->status_ = x.status_;
    this->externalkey_ = x.externalkey_;
    this->matchfield_ = x.matchfield_;
    this->scope_ = x.scope_;
    this->name_ = x.name_;
    this->code_ = x.code_;
    this->detail_ = x.detail_;
    this->message_ = x.message_;
    this->extern3_ = x.extern3_;
  }

  return *this;
}

bkm_response::
~bkm_response ()
{
}

// bkm_user
//

bkm_user::
bkm_user (const externalkey_type& externalkey)
: ::xml_schema::type (),
  id_ (this),
  code_ (this),
  login_ (this),
  firstname_ (this),
  lastname_ (this),
  externalkey_ (externalkey, this),
  matchfield_ (this),
  controlcode_ (this),
  statuscode_ (this),
  extern1_ (this),
  extern2_ (this),
  extern3_ (this),
  phone_ (this),
  direct_ (this),
  fax_ (this),
  mobile_ (this),
  email_ (this),
  packages_ (this),
  workplace_ (this),
  workroles_ (this),
  access_ (this),
  allowpassword_ (this),
  desc_ (this),
  remark_ (this),
  note_ (this)
{
}

bkm_user::
bkm_user (const bkm_user& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  code_ (x.code_, f, this),
  login_ (x.login_, f, this),
  firstname_ (x.firstname_, f, this),
  lastname_ (x.lastname_, f, this),
  externalkey_ (x.externalkey_, f, this),
  matchfield_ (x.matchfield_, f, this),
  controlcode_ (x.controlcode_, f, this),
  statuscode_ (x.statuscode_, f, this),
  extern1_ (x.extern1_, f, this),
  extern2_ (x.extern2_, f, this),
  extern3_ (x.extern3_, f, this),
  phone_ (x.phone_, f, this),
  direct_ (x.direct_, f, this),
  fax_ (x.fax_, f, this),
  mobile_ (x.mobile_, f, this),
  email_ (x.email_, f, this),
  packages_ (x.packages_, f, this),
  workplace_ (x.workplace_, f, this),
  workroles_ (x.workroles_, f, this),
  access_ (x.access_, f, this),
  allowpassword_ (x.allowpassword_, f, this),
  desc_ (x.desc_, f, this),
  remark_ (x.remark_, f, this),
  note_ (x.note_, f, this)
{
}

bkm_user* bkm_user::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_user (*this, f, c);
}

bkm_user& bkm_user::
operator= (const bkm_user& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->code_ = x.code_;
    this->login_ = x.login_;
    this->firstname_ = x.firstname_;
    this->lastname_ = x.lastname_;
    this->externalkey_ = x.externalkey_;
    this->matchfield_ = x.matchfield_;
    this->controlcode_ = x.controlcode_;
    this->statuscode_ = x.statuscode_;
    this->extern1_ = x.extern1_;
    this->extern2_ = x.extern2_;
    this->extern3_ = x.extern3_;
    this->phone_ = x.phone_;
    this->direct_ = x.direct_;
    this->fax_ = x.fax_;
    this->mobile_ = x.mobile_;
    this->email_ = x.email_;
    this->packages_ = x.packages_;
    this->workplace_ = x.workplace_;
    this->workroles_ = x.workroles_;
    this->access_ = x.access_;
    this->allowpassword_ = x.allowpassword_;
    this->desc_ = x.desc_;
    this->remark_ = x.remark_;
    this->note_ = x.note_;
  }

  return *this;
}

bkm_user::
~bkm_user ()
{
}

// bkm_range
//

bkm_range::
bkm_range (const rangecode_type& rangecode,
           const externalkey_type& externalkey)
: ::xml_schema::type (),
  id_ (this),
  rangecode_ (rangecode, this),
  externalkey_ (externalkey, this),
  matchfield_ (this),
  controlcode_ (this),
  keyid_ (this),
  item_ (this),
  code_ (this),
  note_ (this),
  remark_ (this)
{
}

bkm_range::
bkm_range (const bkm_range& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  rangecode_ (x.rangecode_, f, this),
  externalkey_ (x.externalkey_, f, this),
  matchfield_ (x.matchfield_, f, this),
  controlcode_ (x.controlcode_, f, this),
  keyid_ (x.keyid_, f, this),
  item_ (x.item_, f, this),
  code_ (x.code_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this)
{
}

bkm_range* bkm_range::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_range (*this, f, c);
}

bkm_range& bkm_range::
operator= (const bkm_range& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->rangecode_ = x.rangecode_;
    this->externalkey_ = x.externalkey_;
    this->matchfield_ = x.matchfield_;
    this->controlcode_ = x.controlcode_;
    this->keyid_ = x.keyid_;
    this->item_ = x.item_;
    this->code_ = x.code_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
  }

  return *this;
}

bkm_range::
~bkm_range ()
{
}

// bkm_city
//

bkm_city::
bkm_city (const externalkey_type& externalkey)
: ::xml_schema::type (),
  id_ (this),
  externalkey_ (externalkey, this),
  matchfield_ (this),
  controlcode_ (this),
  city_ (this),
  zipcode_ (this),
  statecode_ (this),
  areacode_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this)
{
}

bkm_city::
bkm_city (const bkm_city& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  externalkey_ (x.externalkey_, f, this),
  matchfield_ (x.matchfield_, f, this),
  controlcode_ (x.controlcode_, f, this),
  city_ (x.city_, f, this),
  zipcode_ (x.zipcode_, f, this),
  statecode_ (x.statecode_, f, this),
  areacode_ (x.areacode_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this)
{
}

bkm_city* bkm_city::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_city (*this, f, c);
}

bkm_city& bkm_city::
operator= (const bkm_city& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->externalkey_ = x.externalkey_;
    this->matchfield_ = x.matchfield_;
    this->controlcode_ = x.controlcode_;
    this->city_ = x.city_;
    this->zipcode_ = x.zipcode_;
    this->statecode_ = x.statecode_;
    this->areacode_ = x.areacode_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
  }

  return *this;
}

bkm_city::
~bkm_city ()
{
}

// bkm_bank
//

bkm_bank::
bkm_bank (const externalkey_type& externalkey)
: ::xml_schema::type (),
  id_ (this),
  externalkey_ (externalkey, this),
  matchfield_ (this),
  controlcode_ (this),
  blz_ (this),
  swift_ (this),
  bin_ (this),
  bank_ (this),
  city_ (this),
  zipcode_ (this),
  street_ (this),
  phone_ (this),
  fax_ (this),
  email_ (this),
  homepage_ (this),
  statecode_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this)
{
}

bkm_bank::
bkm_bank (const bkm_bank& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  externalkey_ (x.externalkey_, f, this),
  matchfield_ (x.matchfield_, f, this),
  controlcode_ (x.controlcode_, f, this),
  blz_ (x.blz_, f, this),
  swift_ (x.swift_, f, this),
  bin_ (x.bin_, f, this),
  bank_ (x.bank_, f, this),
  city_ (x.city_, f, this),
  zipcode_ (x.zipcode_, f, this),
  street_ (x.street_, f, this),
  phone_ (x.phone_, f, this),
  fax_ (x.fax_, f, this),
  email_ (x.email_, f, this),
  homepage_ (x.homepage_, f, this),
  statecode_ (x.statecode_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this)
{
}

bkm_bank* bkm_bank::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_bank (*this, f, c);
}

bkm_bank& bkm_bank::
operator= (const bkm_bank& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->externalkey_ = x.externalkey_;
    this->matchfield_ = x.matchfield_;
    this->controlcode_ = x.controlcode_;
    this->blz_ = x.blz_;
    this->swift_ = x.swift_;
    this->bin_ = x.bin_;
    this->bank_ = x.bank_;
    this->city_ = x.city_;
    this->zipcode_ = x.zipcode_;
    this->street_ = x.street_;
    this->phone_ = x.phone_;
    this->fax_ = x.fax_;
    this->email_ = x.email_;
    this->homepage_ = x.homepage_;
    this->statecode_ = x.statecode_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
  }

  return *this;
}

bkm_bank::
~bkm_bank ()
{
}

// bkm_parish
//

bkm_parish::
bkm_parish (const externalkey_type& externalkey)
: ::xml_schema::type (),
  id_ (this),
  externalkey_ (externalkey, this),
  managerkey_ (this),
  parentkey_ (this),
  matchfield_ (this),
  controlcode_ (this),
  name_ (this),
  parish_ (this),
  code_ (this),
  levelcode_ (this),
  city_ (this),
  zipcode_ (this),
  street_ (this),
  phone_ (this),
  fax_ (this),
  email_ (this),
  homepage_ (this),
  statecode_ (this),
  garage_ (this),
  parking_ (this),
  commercial_ (this),
  object_ (this),
  area_ (this),
  duplex_ (this),
  underground_ (this),
  statuscode_ (this),
  groupcode_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this)
{
}

bkm_parish::
bkm_parish (const bkm_parish& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  externalkey_ (x.externalkey_, f, this),
  managerkey_ (x.managerkey_, f, this),
  parentkey_ (x.parentkey_, f, this),
  matchfield_ (x.matchfield_, f, this),
  controlcode_ (x.controlcode_, f, this),
  name_ (x.name_, f, this),
  parish_ (x.parish_, f, this),
  code_ (x.code_, f, this),
  levelcode_ (x.levelcode_, f, this),
  city_ (x.city_, f, this),
  zipcode_ (x.zipcode_, f, this),
  street_ (x.street_, f, this),
  phone_ (x.phone_, f, this),
  fax_ (x.fax_, f, this),
  email_ (x.email_, f, this),
  homepage_ (x.homepage_, f, this),
  statecode_ (x.statecode_, f, this),
  garage_ (x.garage_, f, this),
  parking_ (x.parking_, f, this),
  commercial_ (x.commercial_, f, this),
  object_ (x.object_, f, this),
  area_ (x.area_, f, this),
  duplex_ (x.duplex_, f, this),
  underground_ (x.underground_, f, this),
  statuscode_ (x.statuscode_, f, this),
  groupcode_ (x.groupcode_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this)
{
}

bkm_parish* bkm_parish::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_parish (*this, f, c);
}

bkm_parish& bkm_parish::
operator= (const bkm_parish& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->externalkey_ = x.externalkey_;
    this->managerkey_ = x.managerkey_;
    this->parentkey_ = x.parentkey_;
    this->matchfield_ = x.matchfield_;
    this->controlcode_ = x.controlcode_;
    this->name_ = x.name_;
    this->parish_ = x.parish_;
    this->code_ = x.code_;
    this->levelcode_ = x.levelcode_;
    this->city_ = x.city_;
    this->zipcode_ = x.zipcode_;
    this->street_ = x.street_;
    this->phone_ = x.phone_;
    this->fax_ = x.fax_;
    this->email_ = x.email_;
    this->homepage_ = x.homepage_;
    this->statecode_ = x.statecode_;
    this->garage_ = x.garage_;
    this->parking_ = x.parking_;
    this->commercial_ = x.commercial_;
    this->object_ = x.object_;
    this->area_ = x.area_;
    this->duplex_ = x.duplex_;
    this->underground_ = x.underground_;
    this->statuscode_ = x.statuscode_;
    this->groupcode_ = x.groupcode_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
  }

  return *this;
}

bkm_parish::
~bkm_parish ()
{
}

// bkm_contact
//

bkm_contact::
bkm_contact (const externalkey_type& externalkey)
: ::xml_schema::type (),
  id_ (this),
  externalkey_ (externalkey, this),
  matchfield_ (this),
  controlcode_ (this),
  keyid_ (this),
  taxid_ (this),
  synonym_ (this),
  name1_ (this),
  name2_ (this),
  name3_ (this),
  city_ (this),
  zipcode_ (this),
  street_ (this),
  extern1_ (this),
  extern2_ (this),
  extern3_ (this),
  phone_ (this),
  phone2_ (this),
  phone3_ (this),
  fax_ (this),
  email_ (this),
  homepage_ (this),
  vatid_ (this),
  vatexemption_ (this),
  statecode_ (this),
  statuscode_ (this),
  groupcode_ (this),
  business_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this)
{
}

bkm_contact::
bkm_contact (const bkm_contact& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  externalkey_ (x.externalkey_, f, this),
  matchfield_ (x.matchfield_, f, this),
  controlcode_ (x.controlcode_, f, this),
  keyid_ (x.keyid_, f, this),
  taxid_ (x.taxid_, f, this),
  synonym_ (x.synonym_, f, this),
  name1_ (x.name1_, f, this),
  name2_ (x.name2_, f, this),
  name3_ (x.name3_, f, this),
  city_ (x.city_, f, this),
  zipcode_ (x.zipcode_, f, this),
  street_ (x.street_, f, this),
  extern1_ (x.extern1_, f, this),
  extern2_ (x.extern2_, f, this),
  extern3_ (x.extern3_, f, this),
  phone_ (x.phone_, f, this),
  phone2_ (x.phone2_, f, this),
  phone3_ (x.phone3_, f, this),
  fax_ (x.fax_, f, this),
  email_ (x.email_, f, this),
  homepage_ (x.homepage_, f, this),
  vatid_ (x.vatid_, f, this),
  vatexemption_ (x.vatexemption_, f, this),
  statecode_ (x.statecode_, f, this),
  statuscode_ (x.statuscode_, f, this),
  groupcode_ (x.groupcode_, f, this),
  business_ (x.business_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this)
{
}

bkm_contact* bkm_contact::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_contact (*this, f, c);
}

bkm_contact& bkm_contact::
operator= (const bkm_contact& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->externalkey_ = x.externalkey_;
    this->matchfield_ = x.matchfield_;
    this->controlcode_ = x.controlcode_;
    this->keyid_ = x.keyid_;
    this->taxid_ = x.taxid_;
    this->synonym_ = x.synonym_;
    this->name1_ = x.name1_;
    this->name2_ = x.name2_;
    this->name3_ = x.name3_;
    this->city_ = x.city_;
    this->zipcode_ = x.zipcode_;
    this->street_ = x.street_;
    this->extern1_ = x.extern1_;
    this->extern2_ = x.extern2_;
    this->extern3_ = x.extern3_;
    this->phone_ = x.phone_;
    this->phone2_ = x.phone2_;
    this->phone3_ = x.phone3_;
    this->fax_ = x.fax_;
    this->email_ = x.email_;
    this->homepage_ = x.homepage_;
    this->vatid_ = x.vatid_;
    this->vatexemption_ = x.vatexemption_;
    this->statecode_ = x.statecode_;
    this->statuscode_ = x.statuscode_;
    this->groupcode_ = x.groupcode_;
    this->business_ = x.business_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
  }

  return *this;
}

bkm_contact::
~bkm_contact ()
{
}

// bkm_counterpart
//

bkm_counterpart::
bkm_counterpart (const externalkey_type& externalkey,
                 const contactkey_type& contactkey,
                 const lastname_type& lastname)
: ::xml_schema::type (),
  id_ (this),
  externalkey_ (externalkey, this),
  contactkey_ (contactkey, this),
  matchfield_ (this),
  controlcode_ (this),
  lastname_ (lastname, this),
  firstname_ (this),
  code_ (this),
  role_ (this),
  department_ (this),
  phone1_ (this),
  phone2_ (this),
  mobile_ (this),
  fax_ (this),
  mail_ (this),
  titlecode_ (this),
  salutecode_ (this),
  statuscode_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this)
{
}

bkm_counterpart::
bkm_counterpart (const bkm_counterpart& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  externalkey_ (x.externalkey_, f, this),
  contactkey_ (x.contactkey_, f, this),
  matchfield_ (x.matchfield_, f, this),
  controlcode_ (x.controlcode_, f, this),
  lastname_ (x.lastname_, f, this),
  firstname_ (x.firstname_, f, this),
  code_ (x.code_, f, this),
  role_ (x.role_, f, this),
  department_ (x.department_, f, this),
  phone1_ (x.phone1_, f, this),
  phone2_ (x.phone2_, f, this),
  mobile_ (x.mobile_, f, this),
  fax_ (x.fax_, f, this),
  mail_ (x.mail_, f, this),
  titlecode_ (x.titlecode_, f, this),
  salutecode_ (x.salutecode_, f, this),
  statuscode_ (x.statuscode_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this)
{
}

bkm_counterpart* bkm_counterpart::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_counterpart (*this, f, c);
}

bkm_counterpart& bkm_counterpart::
operator= (const bkm_counterpart& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->externalkey_ = x.externalkey_;
    this->contactkey_ = x.contactkey_;
    this->matchfield_ = x.matchfield_;
    this->controlcode_ = x.controlcode_;
    this->lastname_ = x.lastname_;
    this->firstname_ = x.firstname_;
    this->code_ = x.code_;
    this->role_ = x.role_;
    this->department_ = x.department_;
    this->phone1_ = x.phone1_;
    this->phone2_ = x.phone2_;
    this->mobile_ = x.mobile_;
    this->fax_ = x.fax_;
    this->mail_ = x.mail_;
    this->titlecode_ = x.titlecode_;
    this->salutecode_ = x.salutecode_;
    this->statuscode_ = x.statuscode_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
  }

  return *this;
}

bkm_counterpart::
~bkm_counterpart ()
{
}

// bkm_project
//

bkm_project::
bkm_project (const externalkey_type& externalkey)
: ::xml_schema::type (),
  bkm_part_ (this),
  bkm_splititem_ (this),
  bkm_placing_ (this),
  bkm_revision_ (this),
  bkm_order_ (this),
  bkm_addition_ (this),
  bkm_evident_ (this),
  bkm_invoice_ (this),
  bkm_payment_ (this),
  bkm_backup_ (this),
  ava_order_ (this),
  ret_order_ (this),
  ret_invoice_ (this),
  ret_payment_ (this),
  bkm_document_ (this),
  bkm_keyvalue_ (this),
  id_ (this),
  external_ (this),
  externalkey_ (externalkey, this),
  matchfield_ (this),
  controlcode_ (this),
  managerkey_ (this),
  code_ (this),
  part_ (this),
  number_ (this),
  projectstart_ (this),
  projectend_ (this),
  currency_ (this),
  currencykey_ (this),
  orderercode_ (this),
  ordererkey_ (this),
  ordererkeyid_ (this),
  city_ (this),
  zipcode_ (this),
  street_ (this),
  statecode_ (this),
  statuscode_ (this),
  groupcode_ (this),
  parishcode_ (this),
  parishcode1_ (this),
  parishcode2_ (this),
  parishcode3_ (this),
  parishcode4_ (this),
  returnreal_ (this),
  returnsold_ (this),
  vatprz_ (this),
  extern1_ (this),
  extern2_ (this),
  extern3_ (this),
  userfield1_ (this),
  userfield2_ (this),
  userfield3_ (this),
  user_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this)
{
}

bkm_project::
bkm_project (const bkm_project& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  bkm_part_ (x.bkm_part_, f, this),
  bkm_splititem_ (x.bkm_splititem_, f, this),
  bkm_placing_ (x.bkm_placing_, f, this),
  bkm_revision_ (x.bkm_revision_, f, this),
  bkm_order_ (x.bkm_order_, f, this),
  bkm_addition_ (x.bkm_addition_, f, this),
  bkm_evident_ (x.bkm_evident_, f, this),
  bkm_invoice_ (x.bkm_invoice_, f, this),
  bkm_payment_ (x.bkm_payment_, f, this),
  bkm_backup_ (x.bkm_backup_, f, this),
  ava_order_ (x.ava_order_, f, this),
  ret_order_ (x.ret_order_, f, this),
  ret_invoice_ (x.ret_invoice_, f, this),
  ret_payment_ (x.ret_payment_, f, this),
  bkm_document_ (x.bkm_document_, f, this),
  bkm_keyvalue_ (x.bkm_keyvalue_, f, this),
  id_ (x.id_, f, this),
  external_ (x.external_, f, this),
  externalkey_ (x.externalkey_, f, this),
  matchfield_ (x.matchfield_, f, this),
  controlcode_ (x.controlcode_, f, this),
  managerkey_ (x.managerkey_, f, this),
  code_ (x.code_, f, this),
  part_ (x.part_, f, this),
  number_ (x.number_, f, this),
  projectstart_ (x.projectstart_, f, this),
  projectend_ (x.projectend_, f, this),
  currency_ (x.currency_, f, this),
  currencykey_ (x.currencykey_, f, this),
  orderercode_ (x.orderercode_, f, this),
  ordererkey_ (x.ordererkey_, f, this),
  ordererkeyid_ (x.ordererkeyid_, f, this),
  city_ (x.city_, f, this),
  zipcode_ (x.zipcode_, f, this),
  street_ (x.street_, f, this),
  statecode_ (x.statecode_, f, this),
  statuscode_ (x.statuscode_, f, this),
  groupcode_ (x.groupcode_, f, this),
  parishcode_ (x.parishcode_, f, this),
  parishcode1_ (x.parishcode1_, f, this),
  parishcode2_ (x.parishcode2_, f, this),
  parishcode3_ (x.parishcode3_, f, this),
  parishcode4_ (x.parishcode4_, f, this),
  returnreal_ (x.returnreal_, f, this),
  returnsold_ (x.returnsold_, f, this),
  vatprz_ (x.vatprz_, f, this),
  extern1_ (x.extern1_, f, this),
  extern2_ (x.extern2_, f, this),
  extern3_ (x.extern3_, f, this),
  userfield1_ (x.userfield1_, f, this),
  userfield2_ (x.userfield2_, f, this),
  userfield3_ (x.userfield3_, f, this),
  user_ (x.user_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this)
{
}

bkm_project* bkm_project::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_project (*this, f, c);
}

bkm_project& bkm_project::
operator= (const bkm_project& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->bkm_part_ = x.bkm_part_;
    this->bkm_splititem_ = x.bkm_splititem_;
    this->bkm_placing_ = x.bkm_placing_;
    this->bkm_revision_ = x.bkm_revision_;
    this->bkm_order_ = x.bkm_order_;
    this->bkm_addition_ = x.bkm_addition_;
    this->bkm_evident_ = x.bkm_evident_;
    this->bkm_invoice_ = x.bkm_invoice_;
    this->bkm_payment_ = x.bkm_payment_;
    this->bkm_backup_ = x.bkm_backup_;
    this->ava_order_ = x.ava_order_;
    this->ret_order_ = x.ret_order_;
    this->ret_invoice_ = x.ret_invoice_;
    this->ret_payment_ = x.ret_payment_;
    this->bkm_document_ = x.bkm_document_;
    this->bkm_keyvalue_ = x.bkm_keyvalue_;
    this->id_ = x.id_;
    this->external_ = x.external_;
    this->externalkey_ = x.externalkey_;
    this->matchfield_ = x.matchfield_;
    this->controlcode_ = x.controlcode_;
    this->managerkey_ = x.managerkey_;
    this->code_ = x.code_;
    this->part_ = x.part_;
    this->number_ = x.number_;
    this->projectstart_ = x.projectstart_;
    this->projectend_ = x.projectend_;
    this->currency_ = x.currency_;
    this->currencykey_ = x.currencykey_;
    this->orderercode_ = x.orderercode_;
    this->ordererkey_ = x.ordererkey_;
    this->ordererkeyid_ = x.ordererkeyid_;
    this->city_ = x.city_;
    this->zipcode_ = x.zipcode_;
    this->street_ = x.street_;
    this->statecode_ = x.statecode_;
    this->statuscode_ = x.statuscode_;
    this->groupcode_ = x.groupcode_;
    this->parishcode_ = x.parishcode_;
    this->parishcode1_ = x.parishcode1_;
    this->parishcode2_ = x.parishcode2_;
    this->parishcode3_ = x.parishcode3_;
    this->parishcode4_ = x.parishcode4_;
    this->returnreal_ = x.returnreal_;
    this->returnsold_ = x.returnsold_;
    this->vatprz_ = x.vatprz_;
    this->extern1_ = x.extern1_;
    this->extern2_ = x.extern2_;
    this->extern3_ = x.extern3_;
    this->userfield1_ = x.userfield1_;
    this->userfield2_ = x.userfield2_;
    this->userfield3_ = x.userfield3_;
    this->user_ = x.user_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
  }

  return *this;
}

bkm_project::
~bkm_project ()
{
}

// bkm_part
//

bkm_part::
bkm_part (const externalkey_type& externalkey)
: ::xml_schema::type (),
  id_ (this),
  externalkey_ (externalkey, this),
  projectkey_ (this),
  parishkey1_ (this),
  parishkey2_ (this),
  returnreal_ (this),
  returnsold_ (this),
  matchfield_ (this),
  controlcode_ (this),
  code_ (this),
  part_ (this),
  partstart_ (this),
  partend_ (this),
  currency_ (this),
  number_ (this),
  city_ (this),
  zipcode_ (this),
  street_ (this),
  statecode_ (this),
  deliverycode_ (this),
  typecode_ (this),
  statuscode_ (this),
  groupcode_ (this),
  vatprz_ (this),
  extern1_ (this),
  extern2_ (this),
  extern3_ (this),
  userfield1_ (this),
  userfield2_ (this),
  userfield3_ (this),
  user_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this)
{
}

bkm_part::
bkm_part (const bkm_part& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  externalkey_ (x.externalkey_, f, this),
  projectkey_ (x.projectkey_, f, this),
  parishkey1_ (x.parishkey1_, f, this),
  parishkey2_ (x.parishkey2_, f, this),
  returnreal_ (x.returnreal_, f, this),
  returnsold_ (x.returnsold_, f, this),
  matchfield_ (x.matchfield_, f, this),
  controlcode_ (x.controlcode_, f, this),
  code_ (x.code_, f, this),
  part_ (x.part_, f, this),
  partstart_ (x.partstart_, f, this),
  partend_ (x.partend_, f, this),
  currency_ (x.currency_, f, this),
  number_ (x.number_, f, this),
  city_ (x.city_, f, this),
  zipcode_ (x.zipcode_, f, this),
  street_ (x.street_, f, this),
  statecode_ (x.statecode_, f, this),
  deliverycode_ (x.deliverycode_, f, this),
  typecode_ (x.typecode_, f, this),
  statuscode_ (x.statuscode_, f, this),
  groupcode_ (x.groupcode_, f, this),
  vatprz_ (x.vatprz_, f, this),
  extern1_ (x.extern1_, f, this),
  extern2_ (x.extern2_, f, this),
  extern3_ (x.extern3_, f, this),
  userfield1_ (x.userfield1_, f, this),
  userfield2_ (x.userfield2_, f, this),
  userfield3_ (x.userfield3_, f, this),
  user_ (x.user_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this)
{
}

bkm_part* bkm_part::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_part (*this, f, c);
}

bkm_part& bkm_part::
operator= (const bkm_part& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->externalkey_ = x.externalkey_;
    this->projectkey_ = x.projectkey_;
    this->parishkey1_ = x.parishkey1_;
    this->parishkey2_ = x.parishkey2_;
    this->returnreal_ = x.returnreal_;
    this->returnsold_ = x.returnsold_;
    this->matchfield_ = x.matchfield_;
    this->controlcode_ = x.controlcode_;
    this->code_ = x.code_;
    this->part_ = x.part_;
    this->partstart_ = x.partstart_;
    this->partend_ = x.partend_;
    this->currency_ = x.currency_;
    this->number_ = x.number_;
    this->city_ = x.city_;
    this->zipcode_ = x.zipcode_;
    this->street_ = x.street_;
    this->statecode_ = x.statecode_;
    this->deliverycode_ = x.deliverycode_;
    this->typecode_ = x.typecode_;
    this->statuscode_ = x.statuscode_;
    this->groupcode_ = x.groupcode_;
    this->vatprz_ = x.vatprz_;
    this->extern1_ = x.extern1_;
    this->extern2_ = x.extern2_;
    this->extern3_ = x.extern3_;
    this->userfield1_ = x.userfield1_;
    this->userfield2_ = x.userfield2_;
    this->userfield3_ = x.userfield3_;
    this->user_ = x.user_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
  }

  return *this;
}

bkm_part::
~bkm_part ()
{
}

// bkm_splititem
//

bkm_splititem::
bkm_splititem ()
: ::xml_schema::type (),
  id_ (this),
  code_ (this),
  name_ (this),
  splitcode_ (this)
{
}

bkm_splititem::
bkm_splititem (const bkm_splititem& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  code_ (x.code_, f, this),
  name_ (x.name_, f, this),
  splitcode_ (x.splitcode_, f, this)
{
}

bkm_splititem* bkm_splititem::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_splititem (*this, f, c);
}

bkm_splititem& bkm_splititem::
operator= (const bkm_splititem& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->code_ = x.code_;
    this->name_ = x.name_;
    this->splitcode_ = x.splitcode_;
  }

  return *this;
}

bkm_splititem::
~bkm_splititem ()
{
}

// bkm_placing
//

bkm_placing::
bkm_placing (const externalkey_type& externalkey)
: ::xml_schema::type (),
  id_ (this),
  externalkey_ (externalkey, this),
  projectkey_ (this),
  partcode_ (this),
  partcode1_ (this),
  matchfield_ (this),
  controlcode_ (this),
  code_ (this),
  placing_ (this),
  extern1_ (this),
  extern2_ (this),
  extern3_ (this),
  budget_ (this),
  budgetcustom_ (this),
  lstgstart_ (this),
  lstgend_ (this),
  vatprz_ (this),
  costobjectcode_ (this),
  costobjectname_ (this),
  costunitcode1_ (this),
  costunitname1_ (this),
  costunitcode2_ (this),
  costunitname2_ (this),
  statuscode_ (this),
  statusname_ (this),
  groupcode_ (this),
  groupname_ (this),
  userfield1_ (this),
  userfield2_ (this),
  userfield3_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this)
{
}

bkm_placing::
bkm_placing (const bkm_placing& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  externalkey_ (x.externalkey_, f, this),
  projectkey_ (x.projectkey_, f, this),
  partcode_ (x.partcode_, f, this),
  partcode1_ (x.partcode1_, f, this),
  matchfield_ (x.matchfield_, f, this),
  controlcode_ (x.controlcode_, f, this),
  code_ (x.code_, f, this),
  placing_ (x.placing_, f, this),
  extern1_ (x.extern1_, f, this),
  extern2_ (x.extern2_, f, this),
  extern3_ (x.extern3_, f, this),
  budget_ (x.budget_, f, this),
  budgetcustom_ (x.budgetcustom_, f, this),
  lstgstart_ (x.lstgstart_, f, this),
  lstgend_ (x.lstgend_, f, this),
  vatprz_ (x.vatprz_, f, this),
  costobjectcode_ (x.costobjectcode_, f, this),
  costobjectname_ (x.costobjectname_, f, this),
  costunitcode1_ (x.costunitcode1_, f, this),
  costunitname1_ (x.costunitname1_, f, this),
  costunitcode2_ (x.costunitcode2_, f, this),
  costunitname2_ (x.costunitname2_, f, this),
  statuscode_ (x.statuscode_, f, this),
  statusname_ (x.statusname_, f, this),
  groupcode_ (x.groupcode_, f, this),
  groupname_ (x.groupname_, f, this),
  userfield1_ (x.userfield1_, f, this),
  userfield2_ (x.userfield2_, f, this),
  userfield3_ (x.userfield3_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this)
{
}

bkm_placing* bkm_placing::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_placing (*this, f, c);
}

bkm_placing& bkm_placing::
operator= (const bkm_placing& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->externalkey_ = x.externalkey_;
    this->projectkey_ = x.projectkey_;
    this->partcode_ = x.partcode_;
    this->partcode1_ = x.partcode1_;
    this->matchfield_ = x.matchfield_;
    this->controlcode_ = x.controlcode_;
    this->code_ = x.code_;
    this->placing_ = x.placing_;
    this->extern1_ = x.extern1_;
    this->extern2_ = x.extern2_;
    this->extern3_ = x.extern3_;
    this->budget_ = x.budget_;
    this->budgetcustom_ = x.budgetcustom_;
    this->lstgstart_ = x.lstgstart_;
    this->lstgend_ = x.lstgend_;
    this->vatprz_ = x.vatprz_;
    this->costobjectcode_ = x.costobjectcode_;
    this->costobjectname_ = x.costobjectname_;
    this->costunitcode1_ = x.costunitcode1_;
    this->costunitname1_ = x.costunitname1_;
    this->costunitcode2_ = x.costunitcode2_;
    this->costunitname2_ = x.costunitname2_;
    this->statuscode_ = x.statuscode_;
    this->statusname_ = x.statusname_;
    this->groupcode_ = x.groupcode_;
    this->groupname_ = x.groupname_;
    this->userfield1_ = x.userfield1_;
    this->userfield2_ = x.userfield2_;
    this->userfield3_ = x.userfield3_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
  }

  return *this;
}

bkm_placing::
~bkm_placing ()
{
}

// bkm_revision
//

bkm_revision::
bkm_revision (const externalkey_type& externalkey)
: ::xml_schema::type (),
  bkm_revisionitem_ (this),
  ret_revisionitem_ (this),
  id_ (this),
  externalkey_ (externalkey, this),
  projectkey_ (this),
  matchfield_ (this),
  controlcode_ (this),
  number_ (this),
  releasenumber_ (this),
  extern1_ (this),
  extern2_ (this),
  extern3_ (this),
  revision_ (this),
  dateeffect_ (this),
  releasedby_ (this),
  revisionbtr_ (this),
  releasedbtr_ (this),
  requestdate_ (this),
  releasedate_ (this),
  vatprz_ (this),
  statuscode_ (this),
  statusname_ (this),
  statusinfo_ (this),
  statusinfodate_ (this),
  statusinfouser_ (this),
  groupcode_ (this),
  groupname_ (this),
  categorycode_ (this),
  categoryname_ (this),
  requestercode_ (this),
  requesterkey_ (this),
  requesterkeyid_ (this),
  causercode_ (this),
  causerkey_ (this),
  causerkeyid_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this)
{
}

bkm_revision::
bkm_revision (const bkm_revision& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  bkm_revisionitem_ (x.bkm_revisionitem_, f, this),
  ret_revisionitem_ (x.ret_revisionitem_, f, this),
  id_ (x.id_, f, this),
  externalkey_ (x.externalkey_, f, this),
  projectkey_ (x.projectkey_, f, this),
  matchfield_ (x.matchfield_, f, this),
  controlcode_ (x.controlcode_, f, this),
  number_ (x.number_, f, this),
  releasenumber_ (x.releasenumber_, f, this),
  extern1_ (x.extern1_, f, this),
  extern2_ (x.extern2_, f, this),
  extern3_ (x.extern3_, f, this),
  revision_ (x.revision_, f, this),
  dateeffect_ (x.dateeffect_, f, this),
  releasedby_ (x.releasedby_, f, this),
  revisionbtr_ (x.revisionbtr_, f, this),
  releasedbtr_ (x.releasedbtr_, f, this),
  requestdate_ (x.requestdate_, f, this),
  releasedate_ (x.releasedate_, f, this),
  vatprz_ (x.vatprz_, f, this),
  statuscode_ (x.statuscode_, f, this),
  statusname_ (x.statusname_, f, this),
  statusinfo_ (x.statusinfo_, f, this),
  statusinfodate_ (x.statusinfodate_, f, this),
  statusinfouser_ (x.statusinfouser_, f, this),
  groupcode_ (x.groupcode_, f, this),
  groupname_ (x.groupname_, f, this),
  categorycode_ (x.categorycode_, f, this),
  categoryname_ (x.categoryname_, f, this),
  requestercode_ (x.requestercode_, f, this),
  requesterkey_ (x.requesterkey_, f, this),
  requesterkeyid_ (x.requesterkeyid_, f, this),
  causercode_ (x.causercode_, f, this),
  causerkey_ (x.causerkey_, f, this),
  causerkeyid_ (x.causerkeyid_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this)
{
}

bkm_revision* bkm_revision::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_revision (*this, f, c);
}

bkm_revision& bkm_revision::
operator= (const bkm_revision& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->bkm_revisionitem_ = x.bkm_revisionitem_;
    this->ret_revisionitem_ = x.ret_revisionitem_;
    this->id_ = x.id_;
    this->externalkey_ = x.externalkey_;
    this->projectkey_ = x.projectkey_;
    this->matchfield_ = x.matchfield_;
    this->controlcode_ = x.controlcode_;
    this->number_ = x.number_;
    this->releasenumber_ = x.releasenumber_;
    this->extern1_ = x.extern1_;
    this->extern2_ = x.extern2_;
    this->extern3_ = x.extern3_;
    this->revision_ = x.revision_;
    this->dateeffect_ = x.dateeffect_;
    this->releasedby_ = x.releasedby_;
    this->revisionbtr_ = x.revisionbtr_;
    this->releasedbtr_ = x.releasedbtr_;
    this->requestdate_ = x.requestdate_;
    this->releasedate_ = x.releasedate_;
    this->vatprz_ = x.vatprz_;
    this->statuscode_ = x.statuscode_;
    this->statusname_ = x.statusname_;
    this->statusinfo_ = x.statusinfo_;
    this->statusinfodate_ = x.statusinfodate_;
    this->statusinfouser_ = x.statusinfouser_;
    this->groupcode_ = x.groupcode_;
    this->groupname_ = x.groupname_;
    this->categorycode_ = x.categorycode_;
    this->categoryname_ = x.categoryname_;
    this->requestercode_ = x.requestercode_;
    this->requesterkey_ = x.requesterkey_;
    this->requesterkeyid_ = x.requesterkeyid_;
    this->causercode_ = x.causercode_;
    this->causerkey_ = x.causerkey_;
    this->causerkeyid_ = x.causerkeyid_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
  }

  return *this;
}

bkm_revision::
~bkm_revision ()
{
}

// bkm_revisionitem
//

bkm_revisionitem::
bkm_revisionitem (const externalkey_type& externalkey)
: ::xml_schema::type (),
  id_ (this),
  externalkey_ (externalkey, this),
  placingkey_ (this),
  placingcode_ (this),
  placingname_ (this),
  code_ (this),
  revisionbtr_ (this),
  releasedbtr_ (this),
  vatprz_ (this),
  ratingprz_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this)
{
}

bkm_revisionitem::
bkm_revisionitem (const bkm_revisionitem& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  externalkey_ (x.externalkey_, f, this),
  placingkey_ (x.placingkey_, f, this),
  placingcode_ (x.placingcode_, f, this),
  placingname_ (x.placingname_, f, this),
  code_ (x.code_, f, this),
  revisionbtr_ (x.revisionbtr_, f, this),
  releasedbtr_ (x.releasedbtr_, f, this),
  vatprz_ (x.vatprz_, f, this),
  ratingprz_ (x.ratingprz_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this)
{
}

bkm_revisionitem* bkm_revisionitem::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_revisionitem (*this, f, c);
}

bkm_revisionitem& bkm_revisionitem::
operator= (const bkm_revisionitem& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->externalkey_ = x.externalkey_;
    this->placingkey_ = x.placingkey_;
    this->placingcode_ = x.placingcode_;
    this->placingname_ = x.placingname_;
    this->code_ = x.code_;
    this->revisionbtr_ = x.revisionbtr_;
    this->releasedbtr_ = x.releasedbtr_;
    this->vatprz_ = x.vatprz_;
    this->ratingprz_ = x.ratingprz_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
  }

  return *this;
}

bkm_revisionitem::
~bkm_revisionitem ()
{
}

// ret_revisionitem
//

ret_revisionitem::
ret_revisionitem ()
: ::xml_schema::type (),
  id_ (this),
  orderkey_ (this),
  ordercode_ (this),
  ordername_ (this),
  code_ (this),
  budget_ (this),
  vatprz_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this)
{
}

ret_revisionitem::
ret_revisionitem (const ret_revisionitem& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  orderkey_ (x.orderkey_, f, this),
  ordercode_ (x.ordercode_, f, this),
  ordername_ (x.ordername_, f, this),
  code_ (x.code_, f, this),
  budget_ (x.budget_, f, this),
  vatprz_ (x.vatprz_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this)
{
}

ret_revisionitem* ret_revisionitem::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ret_revisionitem (*this, f, c);
}

ret_revisionitem& ret_revisionitem::
operator= (const ret_revisionitem& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->orderkey_ = x.orderkey_;
    this->ordercode_ = x.ordercode_;
    this->ordername_ = x.ordername_;
    this->code_ = x.code_;
    this->budget_ = x.budget_;
    this->vatprz_ = x.vatprz_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
  }

  return *this;
}

ret_revisionitem::
~ret_revisionitem ()
{
}

// bkm_order
//

bkm_order::
bkm_order (const externalkey_type& externalkey)
: ::xml_schema::type (),
  bkm_invoicedef_ (this),
  bkm_keyvalue_ (this),
  id_ (this),
  external_ (this),
  externalkey_ (externalkey, this),
  projectkey_ (this),
  matchfield_ (this),
  partcode_ (this),
  controlcode_ (this),
  vendorcode_ (this),
  vendorkey_ (this),
  vendorname_ (this),
  vendorname2_ (this),
  vendorname3_ (this),
  vendorkeyid_ (this),
  placingkey_ (this),
  placingcode_ (this),
  placingname_ (this),
  number_ (this),
  numbercol_ (this),
  order_ (this),
  contract_ (this),
  extern1_ (this),
  extern2_ (this),
  extern3_ (this),
  currency_ (this),
  orderbtr_ (this),
  rebatebtr_ (this),
  orderdate_ (this),
  indexdate_ (this),
  lstgstart_ (this),
  lstgend_ (this),
  offerdate_ (this),
  liabilityperiod_ (this),
  discountprz_ (this),
  skontoprz_ (this),
  vatprz_ (this),
  statuscode_ (this),
  statusname_ (this),
  groupcode_ (this),
  groupname_ (this),
  ordertypecode_ (this),
  ordertypename_ (this),
  userfield1_ (this),
  userfield2_ (this),
  userfield3_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this),
  vatopt_ (this),
  collect_ (this),
  parentkey_ (this)
{
}

bkm_order::
bkm_order (const bkm_order& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  bkm_invoicedef_ (x.bkm_invoicedef_, f, this),
  bkm_keyvalue_ (x.bkm_keyvalue_, f, this),
  id_ (x.id_, f, this),
  external_ (x.external_, f, this),
  externalkey_ (x.externalkey_, f, this),
  projectkey_ (x.projectkey_, f, this),
  matchfield_ (x.matchfield_, f, this),
  partcode_ (x.partcode_, f, this),
  controlcode_ (x.controlcode_, f, this),
  vendorcode_ (x.vendorcode_, f, this),
  vendorkey_ (x.vendorkey_, f, this),
  vendorname_ (x.vendorname_, f, this),
  vendorname2_ (x.vendorname2_, f, this),
  vendorname3_ (x.vendorname3_, f, this),
  vendorkeyid_ (x.vendorkeyid_, f, this),
  placingkey_ (x.placingkey_, f, this),
  placingcode_ (x.placingcode_, f, this),
  placingname_ (x.placingname_, f, this),
  number_ (x.number_, f, this),
  numbercol_ (x.numbercol_, f, this),
  order_ (x.order_, f, this),
  contract_ (x.contract_, f, this),
  extern1_ (x.extern1_, f, this),
  extern2_ (x.extern2_, f, this),
  extern3_ (x.extern3_, f, this),
  currency_ (x.currency_, f, this),
  orderbtr_ (x.orderbtr_, f, this),
  rebatebtr_ (x.rebatebtr_, f, this),
  orderdate_ (x.orderdate_, f, this),
  indexdate_ (x.indexdate_, f, this),
  lstgstart_ (x.lstgstart_, f, this),
  lstgend_ (x.lstgend_, f, this),
  offerdate_ (x.offerdate_, f, this),
  liabilityperiod_ (x.liabilityperiod_, f, this),
  discountprz_ (x.discountprz_, f, this),
  skontoprz_ (x.skontoprz_, f, this),
  vatprz_ (x.vatprz_, f, this),
  statuscode_ (x.statuscode_, f, this),
  statusname_ (x.statusname_, f, this),
  groupcode_ (x.groupcode_, f, this),
  groupname_ (x.groupname_, f, this),
  ordertypecode_ (x.ordertypecode_, f, this),
  ordertypename_ (x.ordertypename_, f, this),
  userfield1_ (x.userfield1_, f, this),
  userfield2_ (x.userfield2_, f, this),
  userfield3_ (x.userfield3_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this),
  vatopt_ (x.vatopt_, f, this),
  collect_ (x.collect_, f, this),
  parentkey_ (x.parentkey_, f, this)
{
}

bkm_order* bkm_order::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_order (*this, f, c);
}

bkm_order& bkm_order::
operator= (const bkm_order& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->bkm_invoicedef_ = x.bkm_invoicedef_;
    this->bkm_keyvalue_ = x.bkm_keyvalue_;
    this->id_ = x.id_;
    this->external_ = x.external_;
    this->externalkey_ = x.externalkey_;
    this->projectkey_ = x.projectkey_;
    this->matchfield_ = x.matchfield_;
    this->partcode_ = x.partcode_;
    this->controlcode_ = x.controlcode_;
    this->vendorcode_ = x.vendorcode_;
    this->vendorkey_ = x.vendorkey_;
    this->vendorname_ = x.vendorname_;
    this->vendorname2_ = x.vendorname2_;
    this->vendorname3_ = x.vendorname3_;
    this->vendorkeyid_ = x.vendorkeyid_;
    this->placingkey_ = x.placingkey_;
    this->placingcode_ = x.placingcode_;
    this->placingname_ = x.placingname_;
    this->number_ = x.number_;
    this->numbercol_ = x.numbercol_;
    this->order_ = x.order_;
    this->contract_ = x.contract_;
    this->extern1_ = x.extern1_;
    this->extern2_ = x.extern2_;
    this->extern3_ = x.extern3_;
    this->currency_ = x.currency_;
    this->orderbtr_ = x.orderbtr_;
    this->rebatebtr_ = x.rebatebtr_;
    this->orderdate_ = x.orderdate_;
    this->indexdate_ = x.indexdate_;
    this->lstgstart_ = x.lstgstart_;
    this->lstgend_ = x.lstgend_;
    this->offerdate_ = x.offerdate_;
    this->liabilityperiod_ = x.liabilityperiod_;
    this->discountprz_ = x.discountprz_;
    this->skontoprz_ = x.skontoprz_;
    this->vatprz_ = x.vatprz_;
    this->statuscode_ = x.statuscode_;
    this->statusname_ = x.statusname_;
    this->groupcode_ = x.groupcode_;
    this->groupname_ = x.groupname_;
    this->ordertypecode_ = x.ordertypecode_;
    this->ordertypename_ = x.ordertypename_;
    this->userfield1_ = x.userfield1_;
    this->userfield2_ = x.userfield2_;
    this->userfield3_ = x.userfield3_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
    this->vatopt_ = x.vatopt_;
    this->collect_ = x.collect_;
    this->parentkey_ = x.parentkey_;
  }

  return *this;
}

bkm_order::
~bkm_order ()
{
}

// bkm_addition
//

bkm_addition::
bkm_addition (const externalkey_type& externalkey)
: ::xml_schema::type (),
  id_ (this),
  externalkey_ (externalkey, this),
  controlcode_ (this),
  matchfield_ (this),
  projectkey_ (this),
  orderkey_ (this),
  number_ (this),
  numberproject_ (this),
  addition_ (this),
  extern1_ (this),
  extern2_ (this),
  extern3_ (this),
  additionbtr_ (this),
  discountprz_ (this),
  orderdate_ (this),
  offerdate_ (this),
  statuscode_ (this),
  statusname_ (this),
  groupcode_ (this),
  groupname_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this)
{
}

bkm_addition::
bkm_addition (const bkm_addition& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  externalkey_ (x.externalkey_, f, this),
  controlcode_ (x.controlcode_, f, this),
  matchfield_ (x.matchfield_, f, this),
  projectkey_ (x.projectkey_, f, this),
  orderkey_ (x.orderkey_, f, this),
  number_ (x.number_, f, this),
  numberproject_ (x.numberproject_, f, this),
  addition_ (x.addition_, f, this),
  extern1_ (x.extern1_, f, this),
  extern2_ (x.extern2_, f, this),
  extern3_ (x.extern3_, f, this),
  additionbtr_ (x.additionbtr_, f, this),
  discountprz_ (x.discountprz_, f, this),
  orderdate_ (x.orderdate_, f, this),
  offerdate_ (x.offerdate_, f, this),
  statuscode_ (x.statuscode_, f, this),
  statusname_ (x.statusname_, f, this),
  groupcode_ (x.groupcode_, f, this),
  groupname_ (x.groupname_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this)
{
}

bkm_addition* bkm_addition::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_addition (*this, f, c);
}

bkm_addition& bkm_addition::
operator= (const bkm_addition& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->externalkey_ = x.externalkey_;
    this->controlcode_ = x.controlcode_;
    this->matchfield_ = x.matchfield_;
    this->projectkey_ = x.projectkey_;
    this->orderkey_ = x.orderkey_;
    this->number_ = x.number_;
    this->numberproject_ = x.numberproject_;
    this->addition_ = x.addition_;
    this->extern1_ = x.extern1_;
    this->extern2_ = x.extern2_;
    this->extern3_ = x.extern3_;
    this->additionbtr_ = x.additionbtr_;
    this->discountprz_ = x.discountprz_;
    this->orderdate_ = x.orderdate_;
    this->offerdate_ = x.offerdate_;
    this->statuscode_ = x.statuscode_;
    this->statusname_ = x.statusname_;
    this->groupcode_ = x.groupcode_;
    this->groupname_ = x.groupname_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
  }

  return *this;
}

bkm_addition::
~bkm_addition ()
{
}

// bkm_evident
//

bkm_evident::
bkm_evident (const externalkey_type& externalkey)
: ::xml_schema::type (),
  id_ (this),
  externalkey_ (externalkey, this),
  controlcode_ (this),
  matchfield_ (this),
  projectkey_ (this),
  orderkey_ (this),
  number_ (this),
  numberproject_ (this),
  extern1_ (this),
  extern2_ (this),
  extern3_ (this),
  evident_ (this),
  evidentnote_ (this),
  evidentbtr_ (this),
  offerbtr_ (this),
  ratedbtr_ (this),
  entrydate_ (this),
  signdate_ (this),
  statuscode_ (this),
  statusname_ (this),
  groupcode_ (this),
  groupname_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this)
{
}

bkm_evident::
bkm_evident (const bkm_evident& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  externalkey_ (x.externalkey_, f, this),
  controlcode_ (x.controlcode_, f, this),
  matchfield_ (x.matchfield_, f, this),
  projectkey_ (x.projectkey_, f, this),
  orderkey_ (x.orderkey_, f, this),
  number_ (x.number_, f, this),
  numberproject_ (x.numberproject_, f, this),
  extern1_ (x.extern1_, f, this),
  extern2_ (x.extern2_, f, this),
  extern3_ (x.extern3_, f, this),
  evident_ (x.evident_, f, this),
  evidentnote_ (x.evidentnote_, f, this),
  evidentbtr_ (x.evidentbtr_, f, this),
  offerbtr_ (x.offerbtr_, f, this),
  ratedbtr_ (x.ratedbtr_, f, this),
  entrydate_ (x.entrydate_, f, this),
  signdate_ (x.signdate_, f, this),
  statuscode_ (x.statuscode_, f, this),
  statusname_ (x.statusname_, f, this),
  groupcode_ (x.groupcode_, f, this),
  groupname_ (x.groupname_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this)
{
}

bkm_evident* bkm_evident::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_evident (*this, f, c);
}

bkm_evident& bkm_evident::
operator= (const bkm_evident& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->externalkey_ = x.externalkey_;
    this->controlcode_ = x.controlcode_;
    this->matchfield_ = x.matchfield_;
    this->projectkey_ = x.projectkey_;
    this->orderkey_ = x.orderkey_;
    this->number_ = x.number_;
    this->numberproject_ = x.numberproject_;
    this->extern1_ = x.extern1_;
    this->extern2_ = x.extern2_;
    this->extern3_ = x.extern3_;
    this->evident_ = x.evident_;
    this->evidentnote_ = x.evidentnote_;
    this->evidentbtr_ = x.evidentbtr_;
    this->offerbtr_ = x.offerbtr_;
    this->ratedbtr_ = x.ratedbtr_;
    this->entrydate_ = x.entrydate_;
    this->signdate_ = x.signdate_;
    this->statuscode_ = x.statuscode_;
    this->statusname_ = x.statusname_;
    this->groupcode_ = x.groupcode_;
    this->groupname_ = x.groupname_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
  }

  return *this;
}

bkm_evident::
~bkm_evident ()
{
}

// bkm_backup
//

bkm_backup::
bkm_backup (const externalkey_type& externalkey)
: ::xml_schema::type (),
  id_ (this),
  externalkey_ (externalkey, this),
  controlcode_ (this),
  matchfield_ (this),
  projectkey_ (this),
  orderkey_ (this),
  code_ (this),
  extern1_ (this),
  extern2_ (this),
  extern3_ (this),
  backup_ (this),
  contractid_ (this),
  backupbtr_ (this),
  issuedate_ (this),
  periodofnotice_ (this),
  returndate_ (this),
  quitdate_ (this),
  validfromdate_ (this),
  validtodate_ (this),
  warrantyfromdate_ (this),
  warrantytodate_ (this),
  account_ (this),
  iban_ (this),
  bankkey_ (this),
  bankswift_ (this),
  typecode_ (this),
  typename__ (this),
  statuscode_ (this),
  statusname_ (this),
  groupcode_ (this),
  groupname_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this)
{
}

bkm_backup::
bkm_backup (const bkm_backup& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  externalkey_ (x.externalkey_, f, this),
  controlcode_ (x.controlcode_, f, this),
  matchfield_ (x.matchfield_, f, this),
  projectkey_ (x.projectkey_, f, this),
  orderkey_ (x.orderkey_, f, this),
  code_ (x.code_, f, this),
  extern1_ (x.extern1_, f, this),
  extern2_ (x.extern2_, f, this),
  extern3_ (x.extern3_, f, this),
  backup_ (x.backup_, f, this),
  contractid_ (x.contractid_, f, this),
  backupbtr_ (x.backupbtr_, f, this),
  issuedate_ (x.issuedate_, f, this),
  periodofnotice_ (x.periodofnotice_, f, this),
  returndate_ (x.returndate_, f, this),
  quitdate_ (x.quitdate_, f, this),
  validfromdate_ (x.validfromdate_, f, this),
  validtodate_ (x.validtodate_, f, this),
  warrantyfromdate_ (x.warrantyfromdate_, f, this),
  warrantytodate_ (x.warrantytodate_, f, this),
  account_ (x.account_, f, this),
  iban_ (x.iban_, f, this),
  bankkey_ (x.bankkey_, f, this),
  bankswift_ (x.bankswift_, f, this),
  typecode_ (x.typecode_, f, this),
  typename__ (x.typename__, f, this),
  statuscode_ (x.statuscode_, f, this),
  statusname_ (x.statusname_, f, this),
  groupcode_ (x.groupcode_, f, this),
  groupname_ (x.groupname_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this)
{
}

bkm_backup* bkm_backup::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_backup (*this, f, c);
}

bkm_backup& bkm_backup::
operator= (const bkm_backup& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->externalkey_ = x.externalkey_;
    this->controlcode_ = x.controlcode_;
    this->matchfield_ = x.matchfield_;
    this->projectkey_ = x.projectkey_;
    this->orderkey_ = x.orderkey_;
    this->code_ = x.code_;
    this->extern1_ = x.extern1_;
    this->extern2_ = x.extern2_;
    this->extern3_ = x.extern3_;
    this->backup_ = x.backup_;
    this->contractid_ = x.contractid_;
    this->backupbtr_ = x.backupbtr_;
    this->issuedate_ = x.issuedate_;
    this->periodofnotice_ = x.periodofnotice_;
    this->returndate_ = x.returndate_;
    this->quitdate_ = x.quitdate_;
    this->validfromdate_ = x.validfromdate_;
    this->validtodate_ = x.validtodate_;
    this->warrantyfromdate_ = x.warrantyfromdate_;
    this->warrantytodate_ = x.warrantytodate_;
    this->account_ = x.account_;
    this->iban_ = x.iban_;
    this->bankkey_ = x.bankkey_;
    this->bankswift_ = x.bankswift_;
    this->typecode_ = x.typecode_;
    this->typename__ = x.typename__;
    this->statuscode_ = x.statuscode_;
    this->statusname_ = x.statusname_;
    this->groupcode_ = x.groupcode_;
    this->groupname_ = x.groupname_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
  }

  return *this;
}

bkm_backup::
~bkm_backup ()
{
}

// bkm_invdeftype
//

bkm_invdeftype::
bkm_invdeftype (const invoicedef_type& invoicedef)
: ::xml_schema::type (),
  code_ (this),
  invoicedef_ (invoicedef, this),
  valueprz_ (this)
{
}

bkm_invdeftype::
bkm_invdeftype (const bkm_invdeftype& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  code_ (x.code_, f, this),
  invoicedef_ (x.invoicedef_, f, this),
  valueprz_ (x.valueprz_, f, this)
{
}

bkm_invdeftype* bkm_invdeftype::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_invdeftype (*this, f, c);
}

bkm_invdeftype& bkm_invdeftype::
operator= (const bkm_invdeftype& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->code_ = x.code_;
    this->invoicedef_ = x.invoicedef_;
    this->valueprz_ = x.valueprz_;
  }

  return *this;
}

bkm_invdeftype::
~bkm_invdeftype ()
{
}

// bkm_invoice
//

bkm_invoice::
bkm_invoice (const externalkey_type& externalkey)
: ::xml_schema::type (),
  bkm_invoicepos_ (this),
  bkm_splitinvoice_ (this),
  id_ (this),
  externalkey_ (externalkey, this),
  matchfield_ (this),
  partcode_ (this),
  controlcode_ (this),
  projectkey_ (this),
  orderkey_ (this),
  external_ (this),
  calculation_ (this),
  typecode_ (this),
  typecount_ (this),
  number_ (this),
  numbercol_ (this),
  invoicedate_ (this),
  entrydate_ (this),
  entry2date_ (this),
  verifydate_ (this),
  discountdate_ (this),
  discountnto_ (this),
  agingdate_ (this),
  respitedate_ (this),
  extern1_ (this),
  extern2_ (this),
  extern3_ (this),
  range_ (this),
  period_ (this),
  barcode_ (this),
  verifier_ (this),
  statuscode_ (this),
  statusname_ (this),
  groupcode_ (this),
  groupname_ (this),
  totalnto_ (this),
  ntoverified_ (this),
  amountnto_ (this),
  deducted_ (this),
  deductedvat_ (this),
  anwbtr_ (this),
  anwbtrnto_ (this),
  anwskobtr_ (this),
  anwskonto_ (this),
  vatbtr_ (this),
  vatprz_ (this),
  skontobto_ (this),
  skontonto_ (this),
  skontoprz_ (this),
  drl_ (this),
  drlvat_ (this),
  drlprz_ (this),
  drlsurety_ (this),
  drlsuretyvat_ (this),
  hrl_ (this),
  hrlvat_ (this),
  hrlprz_ (this),
  hrlsurety_ (this),
  hrlsuretyvat_ (this),
  userfield1_ (this),
  userfield2_ (this),
  userfield3_ (this),
  custom1_ (this),
  custom2_ (this),
  custom3_ (this),
  custom4_ (this),
  custom5_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this),
  liabilityperiod1_ (this),
  collect_ (this),
  parentkey_ (this)
{
}

bkm_invoice::
bkm_invoice (const bkm_invoice& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  bkm_invoicepos_ (x.bkm_invoicepos_, f, this),
  bkm_splitinvoice_ (x.bkm_splitinvoice_, f, this),
  id_ (x.id_, f, this),
  externalkey_ (x.externalkey_, f, this),
  matchfield_ (x.matchfield_, f, this),
  partcode_ (x.partcode_, f, this),
  controlcode_ (x.controlcode_, f, this),
  projectkey_ (x.projectkey_, f, this),
  orderkey_ (x.orderkey_, f, this),
  external_ (x.external_, f, this),
  calculation_ (x.calculation_, f, this),
  typecode_ (x.typecode_, f, this),
  typecount_ (x.typecount_, f, this),
  number_ (x.number_, f, this),
  numbercol_ (x.numbercol_, f, this),
  invoicedate_ (x.invoicedate_, f, this),
  entrydate_ (x.entrydate_, f, this),
  entry2date_ (x.entry2date_, f, this),
  verifydate_ (x.verifydate_, f, this),
  discountdate_ (x.discountdate_, f, this),
  discountnto_ (x.discountnto_, f, this),
  agingdate_ (x.agingdate_, f, this),
  respitedate_ (x.respitedate_, f, this),
  extern1_ (x.extern1_, f, this),
  extern2_ (x.extern2_, f, this),
  extern3_ (x.extern3_, f, this),
  range_ (x.range_, f, this),
  period_ (x.period_, f, this),
  barcode_ (x.barcode_, f, this),
  verifier_ (x.verifier_, f, this),
  statuscode_ (x.statuscode_, f, this),
  statusname_ (x.statusname_, f, this),
  groupcode_ (x.groupcode_, f, this),
  groupname_ (x.groupname_, f, this),
  totalnto_ (x.totalnto_, f, this),
  ntoverified_ (x.ntoverified_, f, this),
  amountnto_ (x.amountnto_, f, this),
  deducted_ (x.deducted_, f, this),
  deductedvat_ (x.deductedvat_, f, this),
  anwbtr_ (x.anwbtr_, f, this),
  anwbtrnto_ (x.anwbtrnto_, f, this),
  anwskobtr_ (x.anwskobtr_, f, this),
  anwskonto_ (x.anwskonto_, f, this),
  vatbtr_ (x.vatbtr_, f, this),
  vatprz_ (x.vatprz_, f, this),
  skontobto_ (x.skontobto_, f, this),
  skontonto_ (x.skontonto_, f, this),
  skontoprz_ (x.skontoprz_, f, this),
  drl_ (x.drl_, f, this),
  drlvat_ (x.drlvat_, f, this),
  drlprz_ (x.drlprz_, f, this),
  drlsurety_ (x.drlsurety_, f, this),
  drlsuretyvat_ (x.drlsuretyvat_, f, this),
  hrl_ (x.hrl_, f, this),
  hrlvat_ (x.hrlvat_, f, this),
  hrlprz_ (x.hrlprz_, f, this),
  hrlsurety_ (x.hrlsurety_, f, this),
  hrlsuretyvat_ (x.hrlsuretyvat_, f, this),
  userfield1_ (x.userfield1_, f, this),
  userfield2_ (x.userfield2_, f, this),
  userfield3_ (x.userfield3_, f, this),
  custom1_ (x.custom1_, f, this),
  custom2_ (x.custom2_, f, this),
  custom3_ (x.custom3_, f, this),
  custom4_ (x.custom4_, f, this),
  custom5_ (x.custom5_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this),
  liabilityperiod1_ (x.liabilityperiod1_, f, this),
  collect_ (x.collect_, f, this),
  parentkey_ (x.parentkey_, f, this)
{
}

bkm_invoice* bkm_invoice::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_invoice (*this, f, c);
}

bkm_invoice& bkm_invoice::
operator= (const bkm_invoice& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->bkm_invoicepos_ = x.bkm_invoicepos_;
    this->bkm_splitinvoice_ = x.bkm_splitinvoice_;
    this->id_ = x.id_;
    this->externalkey_ = x.externalkey_;
    this->matchfield_ = x.matchfield_;
    this->partcode_ = x.partcode_;
    this->controlcode_ = x.controlcode_;
    this->projectkey_ = x.projectkey_;
    this->orderkey_ = x.orderkey_;
    this->external_ = x.external_;
    this->calculation_ = x.calculation_;
    this->typecode_ = x.typecode_;
    this->typecount_ = x.typecount_;
    this->number_ = x.number_;
    this->numbercol_ = x.numbercol_;
    this->invoicedate_ = x.invoicedate_;
    this->entrydate_ = x.entrydate_;
    this->entry2date_ = x.entry2date_;
    this->verifydate_ = x.verifydate_;
    this->discountdate_ = x.discountdate_;
    this->discountnto_ = x.discountnto_;
    this->agingdate_ = x.agingdate_;
    this->respitedate_ = x.respitedate_;
    this->extern1_ = x.extern1_;
    this->extern2_ = x.extern2_;
    this->extern3_ = x.extern3_;
    this->range_ = x.range_;
    this->period_ = x.period_;
    this->barcode_ = x.barcode_;
    this->verifier_ = x.verifier_;
    this->statuscode_ = x.statuscode_;
    this->statusname_ = x.statusname_;
    this->groupcode_ = x.groupcode_;
    this->groupname_ = x.groupname_;
    this->totalnto_ = x.totalnto_;
    this->ntoverified_ = x.ntoverified_;
    this->amountnto_ = x.amountnto_;
    this->deducted_ = x.deducted_;
    this->deductedvat_ = x.deductedvat_;
    this->anwbtr_ = x.anwbtr_;
    this->anwbtrnto_ = x.anwbtrnto_;
    this->anwskobtr_ = x.anwskobtr_;
    this->anwskonto_ = x.anwskonto_;
    this->vatbtr_ = x.vatbtr_;
    this->vatprz_ = x.vatprz_;
    this->skontobto_ = x.skontobto_;
    this->skontonto_ = x.skontonto_;
    this->skontoprz_ = x.skontoprz_;
    this->drl_ = x.drl_;
    this->drlvat_ = x.drlvat_;
    this->drlprz_ = x.drlprz_;
    this->drlsurety_ = x.drlsurety_;
    this->drlsuretyvat_ = x.drlsuretyvat_;
    this->hrl_ = x.hrl_;
    this->hrlvat_ = x.hrlvat_;
    this->hrlprz_ = x.hrlprz_;
    this->hrlsurety_ = x.hrlsurety_;
    this->hrlsuretyvat_ = x.hrlsuretyvat_;
    this->userfield1_ = x.userfield1_;
    this->userfield2_ = x.userfield2_;
    this->userfield3_ = x.userfield3_;
    this->custom1_ = x.custom1_;
    this->custom2_ = x.custom2_;
    this->custom3_ = x.custom3_;
    this->custom4_ = x.custom4_;
    this->custom5_ = x.custom5_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
    this->liabilityperiod1_ = x.liabilityperiod1_;
    this->collect_ = x.collect_;
    this->parentkey_ = x.parentkey_;
  }

  return *this;
}

bkm_invoice::
~bkm_invoice ()
{
}

// bkm_invoicedef
//

bkm_invoicedef::
bkm_invoicedef (const typecode_type& typecode)
: ::xml_schema::type (),
  bkm_invdeftype_ (this),
  typecode_ (typecode, this),
  skontoperiod_ (this),
  checkperiod_ (this),
  spanunitcode_ (this)
{
}

bkm_invoicedef::
bkm_invoicedef (const bkm_invoicedef& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  bkm_invdeftype_ (x.bkm_invdeftype_, f, this),
  typecode_ (x.typecode_, f, this),
  skontoperiod_ (x.skontoperiod_, f, this),
  checkperiod_ (x.checkperiod_, f, this),
  spanunitcode_ (x.spanunitcode_, f, this)
{
}

bkm_invoicedef* bkm_invoicedef::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_invoicedef (*this, f, c);
}

bkm_invoicedef& bkm_invoicedef::
operator= (const bkm_invoicedef& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->bkm_invdeftype_ = x.bkm_invdeftype_;
    this->typecode_ = x.typecode_;
    this->skontoperiod_ = x.skontoperiod_;
    this->checkperiod_ = x.checkperiod_;
    this->spanunitcode_ = x.spanunitcode_;
  }

  return *this;
}

bkm_invoicedef::
~bkm_invoicedef ()
{
}

// bkm_invoicepos
//

bkm_invoicepos::
bkm_invoicepos ()
: ::xml_schema::type (),
  id_ (this),
  code_ (this),
  sortid_ (this),
  invoicedeftype_ (this),
  current_ (this),
  totalvalue_ (this),
  valuento_ (this),
  valuevat_ (this),
  valueprz_ (this)
{
}

bkm_invoicepos::
bkm_invoicepos (const bkm_invoicepos& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  code_ (x.code_, f, this),
  sortid_ (x.sortid_, f, this),
  invoicedeftype_ (x.invoicedeftype_, f, this),
  current_ (x.current_, f, this),
  totalvalue_ (x.totalvalue_, f, this),
  valuento_ (x.valuento_, f, this),
  valuevat_ (x.valuevat_, f, this),
  valueprz_ (x.valueprz_, f, this)
{
}

bkm_invoicepos* bkm_invoicepos::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_invoicepos (*this, f, c);
}

bkm_invoicepos& bkm_invoicepos::
operator= (const bkm_invoicepos& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->code_ = x.code_;
    this->sortid_ = x.sortid_;
    this->invoicedeftype_ = x.invoicedeftype_;
    this->current_ = x.current_;
    this->totalvalue_ = x.totalvalue_;
    this->valuento_ = x.valuento_;
    this->valuevat_ = x.valuevat_;
    this->valueprz_ = x.valueprz_;
  }

  return *this;
}

bkm_invoicepos::
~bkm_invoicepos ()
{
}

// bkm_splitinvoice
//

bkm_splitinvoice::
bkm_splitinvoice ()
: ::xml_schema::type (),
  splititemid_ (this),
  amountnto_ (this),
  deducted_ (this),
  deductedvat_ (this),
  drl_ (this),
  drlvat_ (this),
  hrl_ (this),
  hrlvat_ (this),
  vatbtr_ (this),
  discountnto_ (this),
  drlsurety_ (this),
  drlsuretyvat_ (this),
  hrlsurety_ (this),
  hrlsuretyvat_ (this),
  skontonto_ (this),
  anwbtrnto_ (this),
  anwskonto_ (this),
  anwbtr_ (this),
  anwskobtr_ (this),
  skontobto_ (this)
{
}

bkm_splitinvoice::
bkm_splitinvoice (const bkm_splitinvoice& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  splititemid_ (x.splititemid_, f, this),
  amountnto_ (x.amountnto_, f, this),
  deducted_ (x.deducted_, f, this),
  deductedvat_ (x.deductedvat_, f, this),
  drl_ (x.drl_, f, this),
  drlvat_ (x.drlvat_, f, this),
  hrl_ (x.hrl_, f, this),
  hrlvat_ (x.hrlvat_, f, this),
  vatbtr_ (x.vatbtr_, f, this),
  discountnto_ (x.discountnto_, f, this),
  drlsurety_ (x.drlsurety_, f, this),
  drlsuretyvat_ (x.drlsuretyvat_, f, this),
  hrlsurety_ (x.hrlsurety_, f, this),
  hrlsuretyvat_ (x.hrlsuretyvat_, f, this),
  skontonto_ (x.skontonto_, f, this),
  anwbtrnto_ (x.anwbtrnto_, f, this),
  anwskonto_ (x.anwskonto_, f, this),
  anwbtr_ (x.anwbtr_, f, this),
  anwskobtr_ (x.anwskobtr_, f, this),
  skontobto_ (x.skontobto_, f, this)
{
}

bkm_splitinvoice* bkm_splitinvoice::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_splitinvoice (*this, f, c);
}

bkm_splitinvoice& bkm_splitinvoice::
operator= (const bkm_splitinvoice& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->splititemid_ = x.splititemid_;
    this->amountnto_ = x.amountnto_;
    this->deducted_ = x.deducted_;
    this->deductedvat_ = x.deductedvat_;
    this->drl_ = x.drl_;
    this->drlvat_ = x.drlvat_;
    this->hrl_ = x.hrl_;
    this->hrlvat_ = x.hrlvat_;
    this->vatbtr_ = x.vatbtr_;
    this->discountnto_ = x.discountnto_;
    this->drlsurety_ = x.drlsurety_;
    this->drlsuretyvat_ = x.drlsuretyvat_;
    this->hrlsurety_ = x.hrlsurety_;
    this->hrlsuretyvat_ = x.hrlsuretyvat_;
    this->skontonto_ = x.skontonto_;
    this->anwbtrnto_ = x.anwbtrnto_;
    this->anwskonto_ = x.anwskonto_;
    this->anwbtr_ = x.anwbtr_;
    this->anwskobtr_ = x.anwskobtr_;
    this->skontobto_ = x.skontobto_;
  }

  return *this;
}

bkm_splitinvoice::
~bkm_splitinvoice ()
{
}

// bkm_payment
//

bkm_payment::
bkm_payment (const externalkey_type& externalkey,
             const invoicekey_type& invoicekey)
: ::xml_schema::type (),
  id_ (this),
  externalkey_ (externalkey, this),
  invoicekey_ (invoicekey, this),
  matchfield_ (this),
  partcode_ (this),
  controlcode_ (this),
  number_ (this),
  external_ (this),
  extern1_ (this),
  extern2_ (this),
  extern3_ (this),
  payment_ (this),
  paymentvat_ (this),
  paymentdate_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this)
{
}

bkm_payment::
bkm_payment (const bkm_payment& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  externalkey_ (x.externalkey_, f, this),
  invoicekey_ (x.invoicekey_, f, this),
  matchfield_ (x.matchfield_, f, this),
  partcode_ (x.partcode_, f, this),
  controlcode_ (x.controlcode_, f, this),
  number_ (x.number_, f, this),
  external_ (x.external_, f, this),
  extern1_ (x.extern1_, f, this),
  extern2_ (x.extern2_, f, this),
  extern3_ (x.extern3_, f, this),
  payment_ (x.payment_, f, this),
  paymentvat_ (x.paymentvat_, f, this),
  paymentdate_ (x.paymentdate_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this)
{
}

bkm_payment* bkm_payment::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_payment (*this, f, c);
}

bkm_payment& bkm_payment::
operator= (const bkm_payment& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->externalkey_ = x.externalkey_;
    this->invoicekey_ = x.invoicekey_;
    this->matchfield_ = x.matchfield_;
    this->partcode_ = x.partcode_;
    this->controlcode_ = x.controlcode_;
    this->number_ = x.number_;
    this->external_ = x.external_;
    this->extern1_ = x.extern1_;
    this->extern2_ = x.extern2_;
    this->extern3_ = x.extern3_;
    this->payment_ = x.payment_;
    this->paymentvat_ = x.paymentvat_;
    this->paymentdate_ = x.paymentdate_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
  }

  return *this;
}

bkm_payment::
~bkm_payment ()
{
}

// ava_unit
//

ava_unit::
ava_unit (const code_type& code,
          const externalkey_type& externalkey)
: ::xml_schema::type (),
  id_ (this),
  code_ (code, this),
  normcode_ (this),
  unit_ (this),
  externalkey_ (externalkey, this),
  matchfield_ (this),
  controlcode_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this)
{
}

ava_unit::
ava_unit (const ava_unit& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  code_ (x.code_, f, this),
  normcode_ (x.normcode_, f, this),
  unit_ (x.unit_, f, this),
  externalkey_ (x.externalkey_, f, this),
  matchfield_ (x.matchfield_, f, this),
  controlcode_ (x.controlcode_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this)
{
}

ava_unit* ava_unit::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ava_unit (*this, f, c);
}

ava_unit& ava_unit::
operator= (const ava_unit& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->code_ = x.code_;
    this->normcode_ = x.normcode_;
    this->unit_ = x.unit_;
    this->externalkey_ = x.externalkey_;
    this->matchfield_ = x.matchfield_;
    this->controlcode_ = x.controlcode_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
  }

  return *this;
}

ava_unit::
~ava_unit ()
{
}

// ava_order
//

ava_order::
ava_order (const externalkey_type& externalkey)
: ::xml_schema::type (),
  ava_orderpos_ (this),
  id_ (this),
  externalkey_ (externalkey, this),
  projectkey_ (this),
  bkmorderid_ (this),
  bkmorderkey_ (this),
  masterkey_ (this),
  matchfield_ (this),
  controlcode_ (this),
  normcode_ (this),
  number_ (this),
  order_ (this),
  wage_ (this),
  other_ (this),
  posprice_ (this),
  limitdate_ (this),
  indexdate_ (this),
  discountprz_ (this),
  skontoprz_ (this),
  vatprz_ (this),
  statuscode_ (this),
  statusname_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this)
{
}

ava_order::
ava_order (const ava_order& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  ava_orderpos_ (x.ava_orderpos_, f, this),
  id_ (x.id_, f, this),
  externalkey_ (x.externalkey_, f, this),
  projectkey_ (x.projectkey_, f, this),
  bkmorderid_ (x.bkmorderid_, f, this),
  bkmorderkey_ (x.bkmorderkey_, f, this),
  masterkey_ (x.masterkey_, f, this),
  matchfield_ (x.matchfield_, f, this),
  controlcode_ (x.controlcode_, f, this),
  normcode_ (x.normcode_, f, this),
  number_ (x.number_, f, this),
  order_ (x.order_, f, this),
  wage_ (x.wage_, f, this),
  other_ (x.other_, f, this),
  posprice_ (x.posprice_, f, this),
  limitdate_ (x.limitdate_, f, this),
  indexdate_ (x.indexdate_, f, this),
  discountprz_ (x.discountprz_, f, this),
  skontoprz_ (x.skontoprz_, f, this),
  vatprz_ (x.vatprz_, f, this),
  statuscode_ (x.statuscode_, f, this),
  statusname_ (x.statusname_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this)
{
}

ava_order* ava_order::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ava_order (*this, f, c);
}

ava_order& ava_order::
operator= (const ava_order& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->ava_orderpos_ = x.ava_orderpos_;
    this->id_ = x.id_;
    this->externalkey_ = x.externalkey_;
    this->projectkey_ = x.projectkey_;
    this->bkmorderid_ = x.bkmorderid_;
    this->bkmorderkey_ = x.bkmorderkey_;
    this->masterkey_ = x.masterkey_;
    this->matchfield_ = x.matchfield_;
    this->controlcode_ = x.controlcode_;
    this->normcode_ = x.normcode_;
    this->number_ = x.number_;
    this->order_ = x.order_;
    this->wage_ = x.wage_;
    this->other_ = x.other_;
    this->posprice_ = x.posprice_;
    this->limitdate_ = x.limitdate_;
    this->indexdate_ = x.indexdate_;
    this->discountprz_ = x.discountprz_;
    this->skontoprz_ = x.skontoprz_;
    this->vatprz_ = x.vatprz_;
    this->statuscode_ = x.statuscode_;
    this->statusname_ = x.statusname_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
  }

  return *this;
}

ava_order::
~ava_order ()
{
}

// ava_orderpos
//

ava_orderpos::
ava_orderpos (const externalkey_type& externalkey)
: ::xml_schema::type (),
  id_ (this),
  externalkey_ (externalkey, this),
  poscode_ (this),
  itemnumber_ (this),
  controlcode_ (this),
  keyword_ (this),
  unitcode_ (this),
  unitkey_ (this),
  groupcode_ (this),
  text_ (this),
  comment_ (this),
  wage_ (this),
  other_ (this),
  quantity_ (this),
  unitprice_ (this),
  posprice_ (this),
  discountprz_ (this),
  vatprz_ (this),
  statuscode_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this)
{
}

ava_orderpos::
ava_orderpos (const ava_orderpos& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  externalkey_ (x.externalkey_, f, this),
  poscode_ (x.poscode_, f, this),
  itemnumber_ (x.itemnumber_, f, this),
  controlcode_ (x.controlcode_, f, this),
  keyword_ (x.keyword_, f, this),
  unitcode_ (x.unitcode_, f, this),
  unitkey_ (x.unitkey_, f, this),
  groupcode_ (x.groupcode_, f, this),
  text_ (x.text_, f, this),
  comment_ (x.comment_, f, this),
  wage_ (x.wage_, f, this),
  other_ (x.other_, f, this),
  quantity_ (x.quantity_, f, this),
  unitprice_ (x.unitprice_, f, this),
  posprice_ (x.posprice_, f, this),
  discountprz_ (x.discountprz_, f, this),
  vatprz_ (x.vatprz_, f, this),
  statuscode_ (x.statuscode_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this)
{
}

ava_orderpos* ava_orderpos::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ava_orderpos (*this, f, c);
}

ava_orderpos& ava_orderpos::
operator= (const ava_orderpos& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->externalkey_ = x.externalkey_;
    this->poscode_ = x.poscode_;
    this->itemnumber_ = x.itemnumber_;
    this->controlcode_ = x.controlcode_;
    this->keyword_ = x.keyword_;
    this->unitcode_ = x.unitcode_;
    this->unitkey_ = x.unitkey_;
    this->groupcode_ = x.groupcode_;
    this->text_ = x.text_;
    this->comment_ = x.comment_;
    this->wage_ = x.wage_;
    this->other_ = x.other_;
    this->quantity_ = x.quantity_;
    this->unitprice_ = x.unitprice_;
    this->posprice_ = x.posprice_;
    this->discountprz_ = x.discountprz_;
    this->vatprz_ = x.vatprz_;
    this->statuscode_ = x.statuscode_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
  }

  return *this;
}

ava_orderpos::
~ava_orderpos ()
{
}

// bkm_document
//

bkm_document::
bkm_document (const externalkey_type& externalkey,
              const scope_type& scope,
              const scopekey_type& scopekey)
: ::xml_schema::type (),
  id_ (this),
  externalkey_ (externalkey, this),
  scope_ (scope, this),
  scopekey_ (scopekey, this),
  matchfield_ (this),
  controlcode_ (this),
  name_ (this),
  extension_ (this),
  zipformat_ (this),
  link_ (this),
  data_ (this),
  filename_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this),
  viewertype_ (this),
  main_ (this)
{
}

bkm_document::
bkm_document (const bkm_document& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  externalkey_ (x.externalkey_, f, this),
  scope_ (x.scope_, f, this),
  scopekey_ (x.scopekey_, f, this),
  matchfield_ (x.matchfield_, f, this),
  controlcode_ (x.controlcode_, f, this),
  name_ (x.name_, f, this),
  extension_ (x.extension_, f, this),
  zipformat_ (x.zipformat_, f, this),
  link_ (x.link_, f, this),
  data_ (x.data_, f, this),
  filename_ (x.filename_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this),
  viewertype_ (x.viewertype_, f, this),
  main_ (x.main_, f, this)
{
}

bkm_document* bkm_document::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_document (*this, f, c);
}

bkm_document& bkm_document::
operator= (const bkm_document& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->externalkey_ = x.externalkey_;
    this->scope_ = x.scope_;
    this->scopekey_ = x.scopekey_;
    this->matchfield_ = x.matchfield_;
    this->controlcode_ = x.controlcode_;
    this->name_ = x.name_;
    this->extension_ = x.extension_;
    this->zipformat_ = x.zipformat_;
    this->link_ = x.link_;
    this->data_ = x.data_;
    this->filename_ = x.filename_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
    this->viewertype_ = x.viewertype_;
    this->main_ = x.main_;
  }

  return *this;
}

bkm_document::
~bkm_document ()
{
}

// bkm_keyvalue
//

bkm_keyvalue::
bkm_keyvalue (const externalkey_type& externalkey,
              const scope_type& scope,
              const scopekey_type& scopekey,
              const valuetypekey_type& valuetypekey,
              const valuekey_type& valuekey)
: ::xml_schema::type (),
  bkm_contact_ (this),
  bkm_counterpart_ (this),
  bkm_user_ (this),
  bkm_range_ (this),
  id_ (this),
  externalkey_ (externalkey, this),
  scope_ (scope, this),
  scopekey_ (scopekey, this),
  valuetypekey_ (valuetypekey, this),
  matchfield_ (this),
  controlcode_ (this),
  code_ (this),
  name_ (this),
  value_ (this),
  valuekey_ (valuekey, this),
  desc_ (this),
  note_ (this),
  remark_ (this)
{
}

bkm_keyvalue::
bkm_keyvalue (const bkm_keyvalue& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  bkm_contact_ (x.bkm_contact_, f, this),
  bkm_counterpart_ (x.bkm_counterpart_, f, this),
  bkm_user_ (x.bkm_user_, f, this),
  bkm_range_ (x.bkm_range_, f, this),
  id_ (x.id_, f, this),
  externalkey_ (x.externalkey_, f, this),
  scope_ (x.scope_, f, this),
  scopekey_ (x.scopekey_, f, this),
  valuetypekey_ (x.valuetypekey_, f, this),
  matchfield_ (x.matchfield_, f, this),
  controlcode_ (x.controlcode_, f, this),
  code_ (x.code_, f, this),
  name_ (x.name_, f, this),
  value_ (x.value_, f, this),
  valuekey_ (x.valuekey_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this)
{
}

bkm_keyvalue* bkm_keyvalue::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class bkm_keyvalue (*this, f, c);
}

bkm_keyvalue& bkm_keyvalue::
operator= (const bkm_keyvalue& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->bkm_contact_ = x.bkm_contact_;
    this->bkm_counterpart_ = x.bkm_counterpart_;
    this->bkm_user_ = x.bkm_user_;
    this->bkm_range_ = x.bkm_range_;
    this->id_ = x.id_;
    this->externalkey_ = x.externalkey_;
    this->scope_ = x.scope_;
    this->scopekey_ = x.scopekey_;
    this->valuetypekey_ = x.valuetypekey_;
    this->matchfield_ = x.matchfield_;
    this->controlcode_ = x.controlcode_;
    this->code_ = x.code_;
    this->name_ = x.name_;
    this->value_ = x.value_;
    this->valuekey_ = x.valuekey_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
  }

  return *this;
}

bkm_keyvalue::
~bkm_keyvalue ()
{
}

// ret_order
//

ret_order::
ret_order (const externalkey_type& externalkey)
: ::xml_schema::type (),
  id_ (this),
  externalkey_ (externalkey, this),
  projectkey_ (this),
  matchfield_ (this),
  partcode_ (this),
  controlcode_ (this),
  customerkey_ (this),
  customerkeyid_ (this),
  customercode_ (this),
  customername_ (this),
  customercounterpartkey_ (this),
  number_ (this),
  order_ (this),
  contract_ (this),
  extern1_ (this),
  extern2_ (this),
  extern3_ (this),
  currency_ (this),
  exchange_ (this),
  budget_ (this),
  budgetvat_ (this),
  rental_ (this),
  rentalvat_ (this),
  vatprz_ (this),
  statuscode_ (this),
  statusname_ (this),
  groupcode_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this)
{
}

ret_order::
ret_order (const ret_order& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  id_ (x.id_, f, this),
  externalkey_ (x.externalkey_, f, this),
  projectkey_ (x.projectkey_, f, this),
  matchfield_ (x.matchfield_, f, this),
  partcode_ (x.partcode_, f, this),
  controlcode_ (x.controlcode_, f, this),
  customerkey_ (x.customerkey_, f, this),
  customerkeyid_ (x.customerkeyid_, f, this),
  customercode_ (x.customercode_, f, this),
  customername_ (x.customername_, f, this),
  customercounterpartkey_ (x.customercounterpartkey_, f, this),
  number_ (x.number_, f, this),
  order_ (x.order_, f, this),
  contract_ (x.contract_, f, this),
  extern1_ (x.extern1_, f, this),
  extern2_ (x.extern2_, f, this),
  extern3_ (x.extern3_, f, this),
  currency_ (x.currency_, f, this),
  exchange_ (x.exchange_, f, this),
  budget_ (x.budget_, f, this),
  budgetvat_ (x.budgetvat_, f, this),
  rental_ (x.rental_, f, this),
  rentalvat_ (x.rentalvat_, f, this),
  vatprz_ (x.vatprz_, f, this),
  statuscode_ (x.statuscode_, f, this),
  statusname_ (x.statusname_, f, this),
  groupcode_ (x.groupcode_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this)
{
}

ret_order* ret_order::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ret_order (*this, f, c);
}

ret_order& ret_order::
operator= (const ret_order& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->id_ = x.id_;
    this->externalkey_ = x.externalkey_;
    this->projectkey_ = x.projectkey_;
    this->matchfield_ = x.matchfield_;
    this->partcode_ = x.partcode_;
    this->controlcode_ = x.controlcode_;
    this->customerkey_ = x.customerkey_;
    this->customerkeyid_ = x.customerkeyid_;
    this->customercode_ = x.customercode_;
    this->customername_ = x.customername_;
    this->customercounterpartkey_ = x.customercounterpartkey_;
    this->number_ = x.number_;
    this->order_ = x.order_;
    this->contract_ = x.contract_;
    this->extern1_ = x.extern1_;
    this->extern2_ = x.extern2_;
    this->extern3_ = x.extern3_;
    this->currency_ = x.currency_;
    this->exchange_ = x.exchange_;
    this->budget_ = x.budget_;
    this->budgetvat_ = x.budgetvat_;
    this->rental_ = x.rental_;
    this->rentalvat_ = x.rentalvat_;
    this->vatprz_ = x.vatprz_;
    this->statuscode_ = x.statuscode_;
    this->statusname_ = x.statusname_;
    this->groupcode_ = x.groupcode_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
  }

  return *this;
}

ret_order::
~ret_order ()
{
}

// ret_invoice
//

ret_invoice::
ret_invoice (const externalkey_type& externalkey)
: ::xml_schema::type (),
  bkm_keyvalue_ (this),
  id_ (this),
  externalkey_ (externalkey, this),
  matchfield_ (this),
  controlcode_ (this),
  projectkey_ (this),
  orderkey_ (this),
  external_ (this),
  calculation_ (this),
  typecode_ (this),
  typecount_ (this),
  number_ (this),
  name_ (this),
  invoicedate_ (this),
  invoicevat_ (this),
  targetdate_ (this),
  payment_ (this),
  paymentdate_ (this),
  paymentvat_ (this),
  extern1_ (this),
  extern2_ (this),
  extern3_ (this),
  lstgyear_ (this),
  barcode_ (this),
  statuscode_ (this),
  statusname_ (this),
  deducted_ (this),
  deductedvat_ (this),
  totalnto_ (this),
  totalvat_ (this),
  vatprz_ (this),
  rateprz_ (this),
  currency_ (this),
  exchange_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this),
  skontoperiod_ (this),
  checkperiod_ (this),
  documentdate_ (this)
{
}

ret_invoice::
ret_invoice (const ret_invoice& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  bkm_keyvalue_ (x.bkm_keyvalue_, f, this),
  id_ (x.id_, f, this),
  externalkey_ (x.externalkey_, f, this),
  matchfield_ (x.matchfield_, f, this),
  controlcode_ (x.controlcode_, f, this),
  projectkey_ (x.projectkey_, f, this),
  orderkey_ (x.orderkey_, f, this),
  external_ (x.external_, f, this),
  calculation_ (x.calculation_, f, this),
  typecode_ (x.typecode_, f, this),
  typecount_ (x.typecount_, f, this),
  number_ (x.number_, f, this),
  name_ (x.name_, f, this),
  invoicedate_ (x.invoicedate_, f, this),
  invoicevat_ (x.invoicevat_, f, this),
  targetdate_ (x.targetdate_, f, this),
  payment_ (x.payment_, f, this),
  paymentdate_ (x.paymentdate_, f, this),
  paymentvat_ (x.paymentvat_, f, this),
  extern1_ (x.extern1_, f, this),
  extern2_ (x.extern2_, f, this),
  extern3_ (x.extern3_, f, this),
  lstgyear_ (x.lstgyear_, f, this),
  barcode_ (x.barcode_, f, this),
  statuscode_ (x.statuscode_, f, this),
  statusname_ (x.statusname_, f, this),
  deducted_ (x.deducted_, f, this),
  deductedvat_ (x.deductedvat_, f, this),
  totalnto_ (x.totalnto_, f, this),
  totalvat_ (x.totalvat_, f, this),
  vatprz_ (x.vatprz_, f, this),
  rateprz_ (x.rateprz_, f, this),
  currency_ (x.currency_, f, this),
  exchange_ (x.exchange_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this),
  skontoperiod_ (x.skontoperiod_, f, this),
  checkperiod_ (x.checkperiod_, f, this),
  documentdate_ (x.documentdate_, f, this)
{
}

ret_invoice* ret_invoice::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ret_invoice (*this, f, c);
}

ret_invoice& ret_invoice::
operator= (const ret_invoice& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->bkm_keyvalue_ = x.bkm_keyvalue_;
    this->id_ = x.id_;
    this->externalkey_ = x.externalkey_;
    this->matchfield_ = x.matchfield_;
    this->controlcode_ = x.controlcode_;
    this->projectkey_ = x.projectkey_;
    this->orderkey_ = x.orderkey_;
    this->external_ = x.external_;
    this->calculation_ = x.calculation_;
    this->typecode_ = x.typecode_;
    this->typecount_ = x.typecount_;
    this->number_ = x.number_;
    this->name_ = x.name_;
    this->invoicedate_ = x.invoicedate_;
    this->invoicevat_ = x.invoicevat_;
    this->targetdate_ = x.targetdate_;
    this->payment_ = x.payment_;
    this->paymentdate_ = x.paymentdate_;
    this->paymentvat_ = x.paymentvat_;
    this->extern1_ = x.extern1_;
    this->extern2_ = x.extern2_;
    this->extern3_ = x.extern3_;
    this->lstgyear_ = x.lstgyear_;
    this->barcode_ = x.barcode_;
    this->statuscode_ = x.statuscode_;
    this->statusname_ = x.statusname_;
    this->deducted_ = x.deducted_;
    this->deductedvat_ = x.deductedvat_;
    this->totalnto_ = x.totalnto_;
    this->totalvat_ = x.totalvat_;
    this->vatprz_ = x.vatprz_;
    this->rateprz_ = x.rateprz_;
    this->currency_ = x.currency_;
    this->exchange_ = x.exchange_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
    this->skontoperiod_ = x.skontoperiod_;
    this->checkperiod_ = x.checkperiod_;
    this->documentdate_ = x.documentdate_;
  }

  return *this;
}

ret_invoice::
~ret_invoice ()
{
}

// ret_payment
//

ret_payment::
ret_payment (const externalkey_type& externalkey,
             const invoicekey_type& invoicekey)
: ::xml_schema::type (),
  externalkey_ (externalkey, this),
  invoicekey_ (invoicekey, this),
  controlcode_ (this),
  number_ (this),
  external_ (this),
  extern1_ (this),
  extern2_ (this),
  extern3_ (this),
  statuscode_ (this),
  payment_ (this),
  paymentvat_ (this),
  paymentdate_ (this),
  currency_ (this),
  exchange_ (this),
  desc_ (this),
  note_ (this),
  remark_ (this)
{
}

ret_payment::
ret_payment (const ret_payment& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  externalkey_ (x.externalkey_, f, this),
  invoicekey_ (x.invoicekey_, f, this),
  controlcode_ (x.controlcode_, f, this),
  number_ (x.number_, f, this),
  external_ (x.external_, f, this),
  extern1_ (x.extern1_, f, this),
  extern2_ (x.extern2_, f, this),
  extern3_ (x.extern3_, f, this),
  statuscode_ (x.statuscode_, f, this),
  payment_ (x.payment_, f, this),
  paymentvat_ (x.paymentvat_, f, this),
  paymentdate_ (x.paymentdate_, f, this),
  currency_ (x.currency_, f, this),
  exchange_ (x.exchange_, f, this),
  desc_ (x.desc_, f, this),
  note_ (x.note_, f, this),
  remark_ (x.remark_, f, this)
{
}

ret_payment* ret_payment::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ret_payment (*this, f, c);
}

ret_payment& ret_payment::
operator= (const ret_payment& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->externalkey_ = x.externalkey_;
    this->invoicekey_ = x.invoicekey_;
    this->controlcode_ = x.controlcode_;
    this->number_ = x.number_;
    this->external_ = x.external_;
    this->extern1_ = x.extern1_;
    this->extern2_ = x.extern2_;
    this->extern3_ = x.extern3_;
    this->statuscode_ = x.statuscode_;
    this->payment_ = x.payment_;
    this->paymentvat_ = x.paymentvat_;
    this->paymentdate_ = x.paymentdate_;
    this->currency_ = x.currency_;
    this->exchange_ = x.exchange_;
    this->desc_ = x.desc_;
    this->note_ = x.note_;
    this->remark_ = x.remark_;
  }

  return *this;
}

ret_payment::
~ret_payment ()
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const bool_type& i)
{
  e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, wchar_t, ::xml_schema::simple_type >& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const bool_type& i)
{
  a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, wchar_t, ::xml_schema::simple_type >& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const bool_type& i)
{
  l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, wchar_t, ::xml_schema::simple_type >& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const collect_type& i)
{
  e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, wchar_t, ::xml_schema::simple_type >& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const collect_type& i)
{
  a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, wchar_t, ::xml_schema::simple_type >& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const collect_type& i)
{
  l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, wchar_t, ::xml_schema::simple_type >& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const text256_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const text256_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const text256_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const text128_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const text128_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const text128_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const text64_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const text64_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const text64_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const text48_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const text48_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const text48_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const text32_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const text32_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const text32_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const text16_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const text16_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const text16_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const text12_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const text12_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const text12_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const text8_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const text8_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const text8_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const text4_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const text4_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const text4_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const invoicetype_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const invoicetype_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const invoicetype_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const scope_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const scope_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const scope_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const valuedata_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const valuedata_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const valuedata_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const normdata_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const normdata_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const normdata_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const externalkey_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const externalkey_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const externalkey_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const decimal_type& i)
{
  e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, wchar_t, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const decimal_type& i)
{
  a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, wchar_t, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const decimal_type& i)
{
  l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, wchar_t, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const decimal8_type& i)
{
  e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, wchar_t, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const decimal8_type& i)
{
  a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, wchar_t, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const decimal8_type& i)
{
  l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, wchar_t, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const percent_type& i)
{
  e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, wchar_t, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const percent_type& i)
{
  a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, wchar_t, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const percent_type& i)
{
  l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, wchar_t, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const documentviewertype_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const documentviewertype_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const documentviewertype_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const matchfieldrange_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const matchfieldrange_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const matchfieldrange_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const matchfielduser_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const matchfielduser_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const matchfielduser_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const matchfieldresponse_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const matchfieldresponse_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const matchfieldresponse_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const matchfieldcity_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const matchfieldcity_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const matchfieldcity_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const matchfielddocument_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const matchfielddocument_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const matchfielddocument_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const matchfieldkeyvalue_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const matchfieldkeyvalue_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const matchfieldkeyvalue_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const matchfieldparish_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const matchfieldparish_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const matchfieldparish_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const matchfieldcontact_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const matchfieldcontact_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const matchfieldcontact_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const matchfieldcounterpart_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const matchfieldcounterpart_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const matchfieldcounterpart_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const matchfieldproject_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const matchfieldproject_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const matchfieldproject_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const matchfieldpart_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const matchfieldpart_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const matchfieldpart_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const matchfieldplacing_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const matchfieldplacing_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const matchfieldplacing_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const matchfieldrevision_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const matchfieldrevision_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const matchfieldrevision_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const matchfieldorder_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const matchfieldorder_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const matchfieldorder_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const matchfieldaddition_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const matchfieldaddition_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const matchfieldaddition_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const matchfieldevident_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const matchfieldevident_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const matchfieldevident_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const matchfieldbackup_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const matchfieldbackup_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const matchfieldbackup_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const matchfieldavaorder_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const matchfieldavaorder_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const matchfieldavaorder_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const matchfieldavaunit_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const matchfieldavaunit_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const matchfieldavaunit_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const matchfieldinvoice_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const matchfieldinvoice_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const matchfieldinvoice_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const matchfieldpayment_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const matchfieldpayment_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const matchfieldpayment_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const matchfieldbank_type& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const matchfieldbank_type& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const matchfieldbank_type& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
coordata_ (::std::ostream& o,
           const ::coordata& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::coordata_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
coordata_ (::std::ostream& o,
           const ::coordata& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::coordata_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
coordata_ (::std::ostream& o,
           const ::coordata& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::coordata_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
coordata_ (::xercesc::XMLFormatTarget& t,
           const ::coordata& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::coordata_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
coordata_ (::xercesc::XMLFormatTarget& t,
           const ::coordata& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::coordata_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
coordata_ (::xercesc::XMLFormatTarget& t,
           const ::coordata& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::coordata_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
coordata_ (::xercesc::DOMDocument& d,
           const ::coordata& s,
           ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"coordata" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"coordata",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
coordata_ (const ::coordata& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"coordata",
      L"",
      m, f));

  ::coordata_ (*d, s, f);
  return d;
}

void
bkm_response_ (::std::ostream& o,
               const ::bkm_response& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_response_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_response_ (::std::ostream& o,
               const ::bkm_response& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_response_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_response_ (::std::ostream& o,
               const ::bkm_response& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_response_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_response_ (::xercesc::XMLFormatTarget& t,
               const ::bkm_response& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_response_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_response_ (::xercesc::XMLFormatTarget& t,
               const ::bkm_response& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_response_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_response_ (::xercesc::XMLFormatTarget& t,
               const ::bkm_response& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_response_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_response_ (::xercesc::DOMDocument& d,
               const ::bkm_response& s,
               ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.response" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.response",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_response_ (const ::bkm_response& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.response",
      L"",
      m, f));

  ::bkm_response_ (*d, s, f);
  return d;
}

void
bkm_user_ (::std::ostream& o,
           const ::bkm_user& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_user_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_user_ (::std::ostream& o,
           const ::bkm_user& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_user_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_user_ (::std::ostream& o,
           const ::bkm_user& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_user_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_user_ (::xercesc::XMLFormatTarget& t,
           const ::bkm_user& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_user_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_user_ (::xercesc::XMLFormatTarget& t,
           const ::bkm_user& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_user_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_user_ (::xercesc::XMLFormatTarget& t,
           const ::bkm_user& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_user_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_user_ (::xercesc::DOMDocument& d,
           const ::bkm_user& s,
           ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.user" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.user",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_user_ (const ::bkm_user& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.user",
      L"",
      m, f));

  ::bkm_user_ (*d, s, f);
  return d;
}

void
bkm_range_ (::std::ostream& o,
            const ::bkm_range& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_range_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_range_ (::std::ostream& o,
            const ::bkm_range& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_range_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_range_ (::std::ostream& o,
            const ::bkm_range& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_range_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_range_ (::xercesc::XMLFormatTarget& t,
            const ::bkm_range& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_range_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_range_ (::xercesc::XMLFormatTarget& t,
            const ::bkm_range& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_range_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_range_ (::xercesc::XMLFormatTarget& t,
            const ::bkm_range& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_range_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_range_ (::xercesc::DOMDocument& d,
            const ::bkm_range& s,
            ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.range" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.range",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_range_ (const ::bkm_range& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.range",
      L"",
      m, f));

  ::bkm_range_ (*d, s, f);
  return d;
}

void
bkm_city_ (::std::ostream& o,
           const ::bkm_city& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_city_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_city_ (::std::ostream& o,
           const ::bkm_city& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_city_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_city_ (::std::ostream& o,
           const ::bkm_city& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_city_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_city_ (::xercesc::XMLFormatTarget& t,
           const ::bkm_city& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_city_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_city_ (::xercesc::XMLFormatTarget& t,
           const ::bkm_city& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_city_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_city_ (::xercesc::XMLFormatTarget& t,
           const ::bkm_city& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_city_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_city_ (::xercesc::DOMDocument& d,
           const ::bkm_city& s,
           ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.city" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.city",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_city_ (const ::bkm_city& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.city",
      L"",
      m, f));

  ::bkm_city_ (*d, s, f);
  return d;
}

void
bkm_bank_ (::std::ostream& o,
           const ::bkm_bank& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_bank_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_bank_ (::std::ostream& o,
           const ::bkm_bank& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_bank_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_bank_ (::std::ostream& o,
           const ::bkm_bank& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_bank_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_bank_ (::xercesc::XMLFormatTarget& t,
           const ::bkm_bank& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_bank_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_bank_ (::xercesc::XMLFormatTarget& t,
           const ::bkm_bank& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_bank_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_bank_ (::xercesc::XMLFormatTarget& t,
           const ::bkm_bank& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_bank_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_bank_ (::xercesc::DOMDocument& d,
           const ::bkm_bank& s,
           ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.bank" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.bank",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_bank_ (const ::bkm_bank& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.bank",
      L"",
      m, f));

  ::bkm_bank_ (*d, s, f);
  return d;
}

void
bkm_parish_ (::std::ostream& o,
             const ::bkm_parish& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_parish_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_parish_ (::std::ostream& o,
             const ::bkm_parish& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_parish_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_parish_ (::std::ostream& o,
             const ::bkm_parish& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_parish_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_parish_ (::xercesc::XMLFormatTarget& t,
             const ::bkm_parish& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_parish_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_parish_ (::xercesc::XMLFormatTarget& t,
             const ::bkm_parish& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_parish_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_parish_ (::xercesc::XMLFormatTarget& t,
             const ::bkm_parish& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_parish_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_parish_ (::xercesc::DOMDocument& d,
             const ::bkm_parish& s,
             ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.parish" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.parish",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_parish_ (const ::bkm_parish& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.parish",
      L"",
      m, f));

  ::bkm_parish_ (*d, s, f);
  return d;
}

void
bkm_contact_ (::std::ostream& o,
              const ::bkm_contact& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_contact_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_contact_ (::std::ostream& o,
              const ::bkm_contact& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_contact_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_contact_ (::std::ostream& o,
              const ::bkm_contact& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_contact_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_contact_ (::xercesc::XMLFormatTarget& t,
              const ::bkm_contact& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_contact_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_contact_ (::xercesc::XMLFormatTarget& t,
              const ::bkm_contact& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_contact_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_contact_ (::xercesc::XMLFormatTarget& t,
              const ::bkm_contact& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_contact_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_contact_ (::xercesc::DOMDocument& d,
              const ::bkm_contact& s,
              ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.contact" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.contact",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_contact_ (const ::bkm_contact& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.contact",
      L"",
      m, f));

  ::bkm_contact_ (*d, s, f);
  return d;
}

void
bkm_counterpart_ (::std::ostream& o,
                  const ::bkm_counterpart& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_counterpart_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_counterpart_ (::std::ostream& o,
                  const ::bkm_counterpart& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_counterpart_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_counterpart_ (::std::ostream& o,
                  const ::bkm_counterpart& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_counterpart_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_counterpart_ (::xercesc::XMLFormatTarget& t,
                  const ::bkm_counterpart& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_counterpart_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_counterpart_ (::xercesc::XMLFormatTarget& t,
                  const ::bkm_counterpart& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_counterpart_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_counterpart_ (::xercesc::XMLFormatTarget& t,
                  const ::bkm_counterpart& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_counterpart_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_counterpart_ (::xercesc::DOMDocument& d,
                  const ::bkm_counterpart& s,
                  ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.counterpart" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.counterpart",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_counterpart_ (const ::bkm_counterpart& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.counterpart",
      L"",
      m, f));

  ::bkm_counterpart_ (*d, s, f);
  return d;
}

void
bkm_project_ (::std::ostream& o,
              const ::bkm_project& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_project_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_project_ (::std::ostream& o,
              const ::bkm_project& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_project_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_project_ (::std::ostream& o,
              const ::bkm_project& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_project_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_project_ (::xercesc::XMLFormatTarget& t,
              const ::bkm_project& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_project_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_project_ (::xercesc::XMLFormatTarget& t,
              const ::bkm_project& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_project_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_project_ (::xercesc::XMLFormatTarget& t,
              const ::bkm_project& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_project_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_project_ (::xercesc::DOMDocument& d,
              const ::bkm_project& s,
              ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.project" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.project",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_project_ (const ::bkm_project& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.project",
      L"",
      m, f));

  ::bkm_project_ (*d, s, f);
  return d;
}

void
bkm_part_ (::std::ostream& o,
           const ::bkm_part& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_part_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_part_ (::std::ostream& o,
           const ::bkm_part& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_part_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_part_ (::std::ostream& o,
           const ::bkm_part& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_part_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_part_ (::xercesc::XMLFormatTarget& t,
           const ::bkm_part& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_part_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_part_ (::xercesc::XMLFormatTarget& t,
           const ::bkm_part& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_part_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_part_ (::xercesc::XMLFormatTarget& t,
           const ::bkm_part& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_part_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_part_ (::xercesc::DOMDocument& d,
           const ::bkm_part& s,
           ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.part" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.part",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_part_ (const ::bkm_part& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.part",
      L"",
      m, f));

  ::bkm_part_ (*d, s, f);
  return d;
}

void
bkm_splititem_ (::std::ostream& o,
                const ::bkm_splititem& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_splititem_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_splititem_ (::std::ostream& o,
                const ::bkm_splititem& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_splititem_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_splititem_ (::std::ostream& o,
                const ::bkm_splititem& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_splititem_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_splititem_ (::xercesc::XMLFormatTarget& t,
                const ::bkm_splititem& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_splititem_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_splititem_ (::xercesc::XMLFormatTarget& t,
                const ::bkm_splititem& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_splititem_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_splititem_ (::xercesc::XMLFormatTarget& t,
                const ::bkm_splititem& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_splititem_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_splititem_ (::xercesc::DOMDocument& d,
                const ::bkm_splititem& s,
                ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.splititem" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.splititem",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_splititem_ (const ::bkm_splititem& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.splititem",
      L"",
      m, f));

  ::bkm_splititem_ (*d, s, f);
  return d;
}

void
bkm_placing_ (::std::ostream& o,
              const ::bkm_placing& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_placing_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_placing_ (::std::ostream& o,
              const ::bkm_placing& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_placing_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_placing_ (::std::ostream& o,
              const ::bkm_placing& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_placing_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_placing_ (::xercesc::XMLFormatTarget& t,
              const ::bkm_placing& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_placing_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_placing_ (::xercesc::XMLFormatTarget& t,
              const ::bkm_placing& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_placing_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_placing_ (::xercesc::XMLFormatTarget& t,
              const ::bkm_placing& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_placing_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_placing_ (::xercesc::DOMDocument& d,
              const ::bkm_placing& s,
              ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.placing" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.placing",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_placing_ (const ::bkm_placing& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.placing",
      L"",
      m, f));

  ::bkm_placing_ (*d, s, f);
  return d;
}

void
bkm_revision_ (::std::ostream& o,
               const ::bkm_revision& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_revision_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_revision_ (::std::ostream& o,
               const ::bkm_revision& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_revision_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_revision_ (::std::ostream& o,
               const ::bkm_revision& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_revision_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_revision_ (::xercesc::XMLFormatTarget& t,
               const ::bkm_revision& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_revision_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_revision_ (::xercesc::XMLFormatTarget& t,
               const ::bkm_revision& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_revision_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_revision_ (::xercesc::XMLFormatTarget& t,
               const ::bkm_revision& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_revision_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_revision_ (::xercesc::DOMDocument& d,
               const ::bkm_revision& s,
               ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.revision" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.revision",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_revision_ (const ::bkm_revision& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.revision",
      L"",
      m, f));

  ::bkm_revision_ (*d, s, f);
  return d;
}

void
bkm_revisionitem_ (::std::ostream& o,
                   const ::bkm_revisionitem& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_revisionitem_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_revisionitem_ (::std::ostream& o,
                   const ::bkm_revisionitem& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_revisionitem_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_revisionitem_ (::std::ostream& o,
                   const ::bkm_revisionitem& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_revisionitem_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_revisionitem_ (::xercesc::XMLFormatTarget& t,
                   const ::bkm_revisionitem& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_revisionitem_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_revisionitem_ (::xercesc::XMLFormatTarget& t,
                   const ::bkm_revisionitem& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_revisionitem_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_revisionitem_ (::xercesc::XMLFormatTarget& t,
                   const ::bkm_revisionitem& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_revisionitem_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_revisionitem_ (::xercesc::DOMDocument& d,
                   const ::bkm_revisionitem& s,
                   ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.revisionitem" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.revisionitem",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_revisionitem_ (const ::bkm_revisionitem& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.revisionitem",
      L"",
      m, f));

  ::bkm_revisionitem_ (*d, s, f);
  return d;
}

void
ret_revisionitem_ (::std::ostream& o,
                   const ::ret_revisionitem& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_revisionitem_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
ret_revisionitem_ (::std::ostream& o,
                   const ::ret_revisionitem& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_revisionitem_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ret_revisionitem_ (::std::ostream& o,
                   const ::ret_revisionitem& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_revisionitem_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ret_revisionitem_ (::xercesc::XMLFormatTarget& t,
                   const ::ret_revisionitem& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_revisionitem_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
ret_revisionitem_ (::xercesc::XMLFormatTarget& t,
                   const ::ret_revisionitem& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_revisionitem_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ret_revisionitem_ (::xercesc::XMLFormatTarget& t,
                   const ::ret_revisionitem& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_revisionitem_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ret_revisionitem_ (::xercesc::DOMDocument& d,
                   const ::ret_revisionitem& s,
                   ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"ret.revisionitem" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"ret.revisionitem",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
ret_revisionitem_ (const ::ret_revisionitem& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"ret.revisionitem",
      L"",
      m, f));

  ::ret_revisionitem_ (*d, s, f);
  return d;
}

void
bkm_order_ (::std::ostream& o,
            const ::bkm_order& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_order_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_order_ (::std::ostream& o,
            const ::bkm_order& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_order_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_order_ (::std::ostream& o,
            const ::bkm_order& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_order_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_order_ (::xercesc::XMLFormatTarget& t,
            const ::bkm_order& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_order_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_order_ (::xercesc::XMLFormatTarget& t,
            const ::bkm_order& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_order_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_order_ (::xercesc::XMLFormatTarget& t,
            const ::bkm_order& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_order_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_order_ (::xercesc::DOMDocument& d,
            const ::bkm_order& s,
            ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.order" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.order",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_order_ (const ::bkm_order& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.order",
      L"",
      m, f));

  ::bkm_order_ (*d, s, f);
  return d;
}

void
bkm_addition_ (::std::ostream& o,
               const ::bkm_addition& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_addition_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_addition_ (::std::ostream& o,
               const ::bkm_addition& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_addition_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_addition_ (::std::ostream& o,
               const ::bkm_addition& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_addition_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_addition_ (::xercesc::XMLFormatTarget& t,
               const ::bkm_addition& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_addition_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_addition_ (::xercesc::XMLFormatTarget& t,
               const ::bkm_addition& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_addition_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_addition_ (::xercesc::XMLFormatTarget& t,
               const ::bkm_addition& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_addition_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_addition_ (::xercesc::DOMDocument& d,
               const ::bkm_addition& s,
               ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.addition" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.addition",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_addition_ (const ::bkm_addition& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.addition",
      L"",
      m, f));

  ::bkm_addition_ (*d, s, f);
  return d;
}

void
bkm_evident_ (::std::ostream& o,
              const ::bkm_evident& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_evident_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_evident_ (::std::ostream& o,
              const ::bkm_evident& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_evident_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_evident_ (::std::ostream& o,
              const ::bkm_evident& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_evident_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_evident_ (::xercesc::XMLFormatTarget& t,
              const ::bkm_evident& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_evident_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_evident_ (::xercesc::XMLFormatTarget& t,
              const ::bkm_evident& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_evident_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_evident_ (::xercesc::XMLFormatTarget& t,
              const ::bkm_evident& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_evident_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_evident_ (::xercesc::DOMDocument& d,
              const ::bkm_evident& s,
              ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.evident" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.evident",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_evident_ (const ::bkm_evident& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.evident",
      L"",
      m, f));

  ::bkm_evident_ (*d, s, f);
  return d;
}

void
bkm_backup_ (::std::ostream& o,
             const ::bkm_backup& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_backup_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_backup_ (::std::ostream& o,
             const ::bkm_backup& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_backup_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_backup_ (::std::ostream& o,
             const ::bkm_backup& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_backup_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_backup_ (::xercesc::XMLFormatTarget& t,
             const ::bkm_backup& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_backup_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_backup_ (::xercesc::XMLFormatTarget& t,
             const ::bkm_backup& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_backup_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_backup_ (::xercesc::XMLFormatTarget& t,
             const ::bkm_backup& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_backup_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_backup_ (::xercesc::DOMDocument& d,
             const ::bkm_backup& s,
             ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.backup" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.backup",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_backup_ (const ::bkm_backup& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.backup",
      L"",
      m, f));

  ::bkm_backup_ (*d, s, f);
  return d;
}

void
bkm_invdeftype_ (::std::ostream& o,
                 const ::bkm_invdeftype& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invdeftype_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_invdeftype_ (::std::ostream& o,
                 const ::bkm_invdeftype& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invdeftype_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_invdeftype_ (::std::ostream& o,
                 const ::bkm_invdeftype& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invdeftype_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_invdeftype_ (::xercesc::XMLFormatTarget& t,
                 const ::bkm_invdeftype& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invdeftype_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_invdeftype_ (::xercesc::XMLFormatTarget& t,
                 const ::bkm_invdeftype& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invdeftype_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_invdeftype_ (::xercesc::XMLFormatTarget& t,
                 const ::bkm_invdeftype& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invdeftype_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_invdeftype_ (::xercesc::DOMDocument& d,
                 const ::bkm_invdeftype& s,
                 ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.invdeftype" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.invdeftype",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_invdeftype_ (const ::bkm_invdeftype& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.invdeftype",
      L"",
      m, f));

  ::bkm_invdeftype_ (*d, s, f);
  return d;
}

void
bkm_invoice_ (::std::ostream& o,
              const ::bkm_invoice& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invoice_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_invoice_ (::std::ostream& o,
              const ::bkm_invoice& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invoice_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_invoice_ (::std::ostream& o,
              const ::bkm_invoice& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invoice_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_invoice_ (::xercesc::XMLFormatTarget& t,
              const ::bkm_invoice& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invoice_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_invoice_ (::xercesc::XMLFormatTarget& t,
              const ::bkm_invoice& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invoice_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_invoice_ (::xercesc::XMLFormatTarget& t,
              const ::bkm_invoice& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invoice_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_invoice_ (::xercesc::DOMDocument& d,
              const ::bkm_invoice& s,
              ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.invoice" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.invoice",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_invoice_ (const ::bkm_invoice& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.invoice",
      L"",
      m, f));

  ::bkm_invoice_ (*d, s, f);
  return d;
}

void
bkm_invoicedef_ (::std::ostream& o,
                 const ::bkm_invoicedef& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invoicedef_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_invoicedef_ (::std::ostream& o,
                 const ::bkm_invoicedef& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invoicedef_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_invoicedef_ (::std::ostream& o,
                 const ::bkm_invoicedef& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invoicedef_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_invoicedef_ (::xercesc::XMLFormatTarget& t,
                 const ::bkm_invoicedef& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invoicedef_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_invoicedef_ (::xercesc::XMLFormatTarget& t,
                 const ::bkm_invoicedef& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invoicedef_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_invoicedef_ (::xercesc::XMLFormatTarget& t,
                 const ::bkm_invoicedef& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invoicedef_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_invoicedef_ (::xercesc::DOMDocument& d,
                 const ::bkm_invoicedef& s,
                 ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.invoicedef" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.invoicedef",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_invoicedef_ (const ::bkm_invoicedef& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.invoicedef",
      L"",
      m, f));

  ::bkm_invoicedef_ (*d, s, f);
  return d;
}

void
bkm_invoicepos_ (::std::ostream& o,
                 const ::bkm_invoicepos& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invoicepos_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_invoicepos_ (::std::ostream& o,
                 const ::bkm_invoicepos& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invoicepos_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_invoicepos_ (::std::ostream& o,
                 const ::bkm_invoicepos& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invoicepos_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_invoicepos_ (::xercesc::XMLFormatTarget& t,
                 const ::bkm_invoicepos& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invoicepos_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_invoicepos_ (::xercesc::XMLFormatTarget& t,
                 const ::bkm_invoicepos& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invoicepos_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_invoicepos_ (::xercesc::XMLFormatTarget& t,
                 const ::bkm_invoicepos& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_invoicepos_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_invoicepos_ (::xercesc::DOMDocument& d,
                 const ::bkm_invoicepos& s,
                 ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.invoicepos" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.invoicepos",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_invoicepos_ (const ::bkm_invoicepos& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.invoicepos",
      L"",
      m, f));

  ::bkm_invoicepos_ (*d, s, f);
  return d;
}

void
bkm_splitinvoice_ (::std::ostream& o,
                   const ::bkm_splitinvoice& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_splitinvoice_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_splitinvoice_ (::std::ostream& o,
                   const ::bkm_splitinvoice& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_splitinvoice_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_splitinvoice_ (::std::ostream& o,
                   const ::bkm_splitinvoice& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_splitinvoice_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_splitinvoice_ (::xercesc::XMLFormatTarget& t,
                   const ::bkm_splitinvoice& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_splitinvoice_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_splitinvoice_ (::xercesc::XMLFormatTarget& t,
                   const ::bkm_splitinvoice& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_splitinvoice_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_splitinvoice_ (::xercesc::XMLFormatTarget& t,
                   const ::bkm_splitinvoice& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_splitinvoice_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_splitinvoice_ (::xercesc::DOMDocument& d,
                   const ::bkm_splitinvoice& s,
                   ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.splitinvoice" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.splitinvoice",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_splitinvoice_ (const ::bkm_splitinvoice& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.splitinvoice",
      L"",
      m, f));

  ::bkm_splitinvoice_ (*d, s, f);
  return d;
}

void
bkm_payment_ (::std::ostream& o,
              const ::bkm_payment& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_payment_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_payment_ (::std::ostream& o,
              const ::bkm_payment& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_payment_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_payment_ (::std::ostream& o,
              const ::bkm_payment& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_payment_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_payment_ (::xercesc::XMLFormatTarget& t,
              const ::bkm_payment& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_payment_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_payment_ (::xercesc::XMLFormatTarget& t,
              const ::bkm_payment& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_payment_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_payment_ (::xercesc::XMLFormatTarget& t,
              const ::bkm_payment& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_payment_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_payment_ (::xercesc::DOMDocument& d,
              const ::bkm_payment& s,
              ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.payment" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.payment",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_payment_ (const ::bkm_payment& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.payment",
      L"",
      m, f));

  ::bkm_payment_ (*d, s, f);
  return d;
}

void
ava_unit_ (::std::ostream& o,
           const ::ava_unit& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ava_unit_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
ava_unit_ (::std::ostream& o,
           const ::ava_unit& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ava_unit_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ava_unit_ (::std::ostream& o,
           const ::ava_unit& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ava_unit_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ava_unit_ (::xercesc::XMLFormatTarget& t,
           const ::ava_unit& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ava_unit_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
ava_unit_ (::xercesc::XMLFormatTarget& t,
           const ::ava_unit& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ava_unit_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ava_unit_ (::xercesc::XMLFormatTarget& t,
           const ::ava_unit& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ava_unit_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ava_unit_ (::xercesc::DOMDocument& d,
           const ::ava_unit& s,
           ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"ava.unit" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"ava.unit",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
ava_unit_ (const ::ava_unit& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"ava.unit",
      L"",
      m, f));

  ::ava_unit_ (*d, s, f);
  return d;
}

void
ava_order_ (::std::ostream& o,
            const ::ava_order& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ava_order_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
ava_order_ (::std::ostream& o,
            const ::ava_order& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ava_order_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ava_order_ (::std::ostream& o,
            const ::ava_order& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ava_order_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ava_order_ (::xercesc::XMLFormatTarget& t,
            const ::ava_order& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ava_order_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
ava_order_ (::xercesc::XMLFormatTarget& t,
            const ::ava_order& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ava_order_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ava_order_ (::xercesc::XMLFormatTarget& t,
            const ::ava_order& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ava_order_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ava_order_ (::xercesc::DOMDocument& d,
            const ::ava_order& s,
            ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"ava.order" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"ava.order",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
ava_order_ (const ::ava_order& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"ava.order",
      L"",
      m, f));

  ::ava_order_ (*d, s, f);
  return d;
}

void
ava_orderpos_ (::std::ostream& o,
               const ::ava_orderpos& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ava_orderpos_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
ava_orderpos_ (::std::ostream& o,
               const ::ava_orderpos& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ava_orderpos_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ava_orderpos_ (::std::ostream& o,
               const ::ava_orderpos& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ava_orderpos_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ava_orderpos_ (::xercesc::XMLFormatTarget& t,
               const ::ava_orderpos& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ava_orderpos_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
ava_orderpos_ (::xercesc::XMLFormatTarget& t,
               const ::ava_orderpos& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ava_orderpos_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ava_orderpos_ (::xercesc::XMLFormatTarget& t,
               const ::ava_orderpos& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ava_orderpos_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ava_orderpos_ (::xercesc::DOMDocument& d,
               const ::ava_orderpos& s,
               ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"ava.orderpos" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"ava.orderpos",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
ava_orderpos_ (const ::ava_orderpos& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"ava.orderpos",
      L"",
      m, f));

  ::ava_orderpos_ (*d, s, f);
  return d;
}

void
bkm_document_ (::std::ostream& o,
               const ::bkm_document& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_document_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_document_ (::std::ostream& o,
               const ::bkm_document& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_document_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_document_ (::std::ostream& o,
               const ::bkm_document& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_document_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_document_ (::xercesc::XMLFormatTarget& t,
               const ::bkm_document& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_document_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_document_ (::xercesc::XMLFormatTarget& t,
               const ::bkm_document& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_document_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_document_ (::xercesc::XMLFormatTarget& t,
               const ::bkm_document& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_document_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_document_ (::xercesc::DOMDocument& d,
               const ::bkm_document& s,
               ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.document" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.document",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_document_ (const ::bkm_document& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.document",
      L"",
      m, f));

  ::bkm_document_ (*d, s, f);
  return d;
}

void
bkm_keyvalue_ (::std::ostream& o,
               const ::bkm_keyvalue& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_keyvalue_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_keyvalue_ (::std::ostream& o,
               const ::bkm_keyvalue& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_keyvalue_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_keyvalue_ (::std::ostream& o,
               const ::bkm_keyvalue& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_keyvalue_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_keyvalue_ (::xercesc::XMLFormatTarget& t,
               const ::bkm_keyvalue& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_keyvalue_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
bkm_keyvalue_ (::xercesc::XMLFormatTarget& t,
               const ::bkm_keyvalue& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_keyvalue_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_keyvalue_ (::xercesc::XMLFormatTarget& t,
               const ::bkm_keyvalue& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::bkm_keyvalue_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
bkm_keyvalue_ (::xercesc::DOMDocument& d,
               const ::bkm_keyvalue& s,
               ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"bkm.keyvalue" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"bkm.keyvalue",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
bkm_keyvalue_ (const ::bkm_keyvalue& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"bkm.keyvalue",
      L"",
      m, f));

  ::bkm_keyvalue_ (*d, s, f);
  return d;
}

void
ret_order_ (::std::ostream& o,
            const ::ret_order& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_order_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
ret_order_ (::std::ostream& o,
            const ::ret_order& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_order_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ret_order_ (::std::ostream& o,
            const ::ret_order& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_order_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ret_order_ (::xercesc::XMLFormatTarget& t,
            const ::ret_order& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_order_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
ret_order_ (::xercesc::XMLFormatTarget& t,
            const ::ret_order& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_order_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ret_order_ (::xercesc::XMLFormatTarget& t,
            const ::ret_order& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_order_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ret_order_ (::xercesc::DOMDocument& d,
            const ::ret_order& s,
            ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"ret.order" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"ret.order",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
ret_order_ (const ::ret_order& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"ret.order",
      L"",
      m, f));

  ::ret_order_ (*d, s, f);
  return d;
}

void
ret_invoice_ (::std::ostream& o,
              const ::ret_invoice& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_invoice_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
ret_invoice_ (::std::ostream& o,
              const ::ret_invoice& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_invoice_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ret_invoice_ (::std::ostream& o,
              const ::ret_invoice& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_invoice_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ret_invoice_ (::xercesc::XMLFormatTarget& t,
              const ::ret_invoice& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_invoice_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
ret_invoice_ (::xercesc::XMLFormatTarget& t,
              const ::ret_invoice& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_invoice_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ret_invoice_ (::xercesc::XMLFormatTarget& t,
              const ::ret_invoice& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_invoice_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ret_invoice_ (::xercesc::DOMDocument& d,
              const ::ret_invoice& s,
              ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"ret.invoice" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"ret.invoice",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
ret_invoice_ (const ::ret_invoice& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"ret.invoice",
      L"",
      m, f));

  ::ret_invoice_ (*d, s, f);
  return d;
}

void
ret_payment_ (::std::ostream& o,
              const ::ret_payment& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_payment_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
ret_payment_ (::std::ostream& o,
              const ::ret_payment& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_payment_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ret_payment_ (::std::ostream& o,
              const ::ret_payment& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_payment_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ret_payment_ (::xercesc::XMLFormatTarget& t,
              const ::ret_payment& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_payment_ (s, m, f));

  ::xsd::cxx::tree::error_handler< wchar_t > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
  }
}

void
ret_payment_ (::xercesc::XMLFormatTarget& t,
              const ::ret_payment& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_payment_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ret_payment_ (::xercesc::XMLFormatTarget& t,
              const ::ret_payment& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::ret_payment_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< wchar_t > ();
  }
}

void
ret_payment_ (::xercesc::DOMDocument& d,
              const ::ret_payment& s,
              ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< wchar_t > n (
    ::xsd::cxx::xml::dom::name< wchar_t > (e));

  if (n.name () == L"ret.payment" &&
      n.namespace_ () == L"")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"ret.payment",
      L"");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
ret_payment_ (const ::ret_payment& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< wchar_t > (
      L"ret.payment",
      L"",
      m, f));

  ::ret_payment_ (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const coordata& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // bkm.response
  //
  for (coordata::bkm_response_const_iterator
       b (i.bkm_response ().begin ()), n (i.bkm_response ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.response",
        e));

    s << *b;
  }

  // bkm.user
  //
  for (coordata::bkm_user_const_iterator
       b (i.bkm_user ().begin ()), n (i.bkm_user ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.user",
        e));

    s << *b;
  }

  // bkm.range
  //
  if (i.bkm_range ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.range",
        e));

    s << *i.bkm_range ();
  }

  // bkm.bank
  //
  for (coordata::bkm_bank_const_iterator
       b (i.bkm_bank ().begin ()), n (i.bkm_bank ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.bank",
        e));

    s << *b;
  }

  // bkm.parish
  //
  if (i.bkm_parish ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.parish",
        e));

    s << *i.bkm_parish ();
  }

  // bkm.city
  //
  for (coordata::bkm_city_const_iterator
       b (i.bkm_city ().begin ()), n (i.bkm_city ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.city",
        e));

    s << *b;
  }

  // bkm.contact
  //
  for (coordata::bkm_contact_const_iterator
       b (i.bkm_contact ().begin ()), n (i.bkm_contact ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.contact",
        e));

    s << *b;
  }

  // bkm.counterpart
  //
  if (i.bkm_counterpart ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.counterpart",
        e));

    s << *i.bkm_counterpart ();
  }

  // bkm.part
  //
  if (i.bkm_part ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.part",
        e));

    s << *i.bkm_part ();
  }

  // bkm.placing
  //
  if (i.bkm_placing ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.placing",
        e));

    s << *i.bkm_placing ();
  }

  // bkm.invoice
  //
  for (coordata::bkm_invoice_const_iterator
       b (i.bkm_invoice ().begin ()), n (i.bkm_invoice ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.invoice",
        e));

    s << *b;
  }

  // bkm.payment
  //
  if (i.bkm_payment ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.payment",
        e));

    s << *i.bkm_payment ();
  }

  // ava.unit
  //
  if (i.ava_unit ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"ava.unit",
        e));

    s << *i.ava_unit ();
  }

  // bkm.project
  //
  for (coordata::bkm_project_const_iterator
       b (i.bkm_project ().begin ()), n (i.bkm_project ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.project",
        e));

    s << *b;
  }

  // name
  //
  if (i.name ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"name",
        e));

    a << *i.name ();
  }

  // mandant
  //
  if (i.mandant ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"mandant",
        e));

    a << *i.mandant ();
  }

  // exchangeid
  //
  if (i.exchangeid ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"exchangeid",
        e));

    a << *i.exchangeid ();
  }

  // external
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"external",
        e));

    a << i.external ();
  }

  // version
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"version",
        e));

    a << i.version ();
  }

  // response
  //
  if (i.response ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"response",
        e));

    a << *i.response ();
  }

  // winuser
  //
  if (i.winuser ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"winuser",
        e));

    a << *i.winuser ();
  }

  // winuserkey
  //
  if (i.winuserkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"winuserkey",
        e));

    a << *i.winuserkey ();
  }

  // infodate
  //
  if (i.infodate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"infodate",
        e));

    a << *i.infodate ();
  }

  // info
  //
  if (i.info ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"info",
        e));

    a << *i.info ();
  }

  // infouser
  //
  if (i.infouser ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"infouser",
        e));

    a << *i.infouser ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_response& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // status
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"status",
        e));

    a << i.status ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // scope
  //
  if (i.scope ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"scope",
        e));

    a << *i.scope ();
  }

  // name
  //
  if (i.name ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"name",
        e));

    a << *i.name ();
  }

  // code
  //
  if (i.code ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"code",
        e));

    a << *i.code ();
  }

  // detail
  //
  if (i.detail ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"detail",
        e));

    a << *i.detail ();
  }

  // message
  //
  if (i.message ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"message",
        e));

    a << *i.message ();
  }

  // extern3
  //
  if (i.extern3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern3",
        e));

    a << *i.extern3 ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_user& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // code
  //
  if (i.code ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"code",
        e));

    a << *i.code ();
  }

  // login
  //
  if (i.login ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"login",
        e));

    a << *i.login ();
  }

  // firstname
  //
  if (i.firstname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"firstname",
        e));

    a << *i.firstname ();
  }

  // lastname
  //
  if (i.lastname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"lastname",
        e));

    a << *i.lastname ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // statuscode
  //
  if (i.statuscode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statuscode",
        e));

    a << *i.statuscode ();
  }

  // extern1
  //
  if (i.extern1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern1",
        e));

    a << *i.extern1 ();
  }

  // extern2
  //
  if (i.extern2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern2",
        e));

    a << *i.extern2 ();
  }

  // extern3
  //
  if (i.extern3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern3",
        e));

    a << *i.extern3 ();
  }

  // phone
  //
  if (i.phone ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"phone",
        e));

    a << *i.phone ();
  }

  // direct
  //
  if (i.direct ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"direct",
        e));

    a << *i.direct ();
  }

  // fax
  //
  if (i.fax ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"fax",
        e));

    a << *i.fax ();
  }

  // mobile
  //
  if (i.mobile ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"mobile",
        e));

    a << *i.mobile ();
  }

  // email
  //
  if (i.email ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"email",
        e));

    a << *i.email ();
  }

  // packages
  //
  if (i.packages ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"packages",
        e));

    a << *i.packages ();
  }

  // workplace
  //
  if (i.workplace ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"workplace",
        e));

    a << *i.workplace ();
  }

  // workroles
  //
  if (i.workroles ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"workroles",
        e));

    a << *i.workroles ();
  }

  // access
  //
  if (i.access ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"access",
        e));

    a << *i.access ();
  }

  // allowpassword
  //
  if (i.allowpassword ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"allowpassword",
        e));

    a << *i.allowpassword ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_range& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // rangecode
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"rangecode",
        e));

    a << i.rangecode ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // keyid
  //
  if (i.keyid ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"keyid",
        e));

    a << *i.keyid ();
  }

  // item
  //
  if (i.item ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"item",
        e));

    a << *i.item ();
  }

  // code
  //
  if (i.code ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"code",
        e));

    a << *i.code ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_city& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // city
  //
  if (i.city ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"city",
        e));

    a << *i.city ();
  }

  // zipcode
  //
  if (i.zipcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"zipcode",
        e));

    a << *i.zipcode ();
  }

  // statecode
  //
  if (i.statecode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statecode",
        e));

    a << *i.statecode ();
  }

  // areacode
  //
  if (i.areacode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"areacode",
        e));

    a << *i.areacode ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_bank& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // blz
  //
  if (i.blz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"blz",
        e));

    a << *i.blz ();
  }

  // swift
  //
  if (i.swift ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"swift",
        e));

    a << *i.swift ();
  }

  // bin
  //
  if (i.bin ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"bin",
        e));

    a << *i.bin ();
  }

  // bank
  //
  if (i.bank ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"bank",
        e));

    a << *i.bank ();
  }

  // city
  //
  if (i.city ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"city",
        e));

    a << *i.city ();
  }

  // zipcode
  //
  if (i.zipcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"zipcode",
        e));

    a << *i.zipcode ();
  }

  // street
  //
  if (i.street ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"street",
        e));

    a << *i.street ();
  }

  // phone
  //
  if (i.phone ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"phone",
        e));

    a << *i.phone ();
  }

  // fax
  //
  if (i.fax ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"fax",
        e));

    a << *i.fax ();
  }

  // email
  //
  if (i.email ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"email",
        e));

    a << *i.email ();
  }

  // homepage
  //
  if (i.homepage ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"homepage",
        e));

    a << *i.homepage ();
  }

  // statecode
  //
  if (i.statecode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statecode",
        e));

    a << *i.statecode ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_parish& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // managerkey
  //
  if (i.managerkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"managerkey",
        e));

    a << *i.managerkey ();
  }

  // parentkey
  //
  if (i.parentkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"parentkey",
        e));

    a << *i.parentkey ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // name
  //
  if (i.name ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"name",
        e));

    a << *i.name ();
  }

  // parish
  //
  if (i.parish ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"parish",
        e));

    a << *i.parish ();
  }

  // code
  //
  if (i.code ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"code",
        e));

    a << *i.code ();
  }

  // levelcode
  //
  if (i.levelcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"levelcode",
        e));

    a << *i.levelcode ();
  }

  // city
  //
  if (i.city ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"city",
        e));

    a << *i.city ();
  }

  // zipcode
  //
  if (i.zipcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"zipcode",
        e));

    a << *i.zipcode ();
  }

  // street
  //
  if (i.street ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"street",
        e));

    a << *i.street ();
  }

  // phone
  //
  if (i.phone ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"phone",
        e));

    a << *i.phone ();
  }

  // fax
  //
  if (i.fax ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"fax",
        e));

    a << *i.fax ();
  }

  // email
  //
  if (i.email ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"email",
        e));

    a << *i.email ();
  }

  // homepage
  //
  if (i.homepage ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"homepage",
        e));

    a << *i.homepage ();
  }

  // statecode
  //
  if (i.statecode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statecode",
        e));

    a << *i.statecode ();
  }

  // garage
  //
  if (i.garage ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"garage",
        e));

    a << *i.garage ();
  }

  // parking
  //
  if (i.parking ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"parking",
        e));

    a << *i.parking ();
  }

  // commercial
  //
  if (i.commercial ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"commercial",
        e));

    a << *i.commercial ();
  }

  // object
  //
  if (i.object ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"object",
        e));

    a << *i.object ();
  }

  // area
  //
  if (i.area ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"area",
        e));

    a << *i.area ();
  }

  // duplex
  //
  if (i.duplex ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"duplex",
        e));

    a << *i.duplex ();
  }

  // underground
  //
  if (i.underground ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"underground",
        e));

    a << *i.underground ();
  }

  // statuscode
  //
  if (i.statuscode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statuscode",
        e));

    a << *i.statuscode ();
  }

  // groupcode
  //
  if (i.groupcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"groupcode",
        e));

    a << *i.groupcode ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_contact& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // keyid
  //
  if (i.keyid ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"keyid",
        e));

    a << *i.keyid ();
  }

  // taxid
  //
  if (i.taxid ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"taxid",
        e));

    a << *i.taxid ();
  }

  // synonym
  //
  if (i.synonym ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"synonym",
        e));

    a << *i.synonym ();
  }

  // name1
  //
  if (i.name1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"name1",
        e));

    a << *i.name1 ();
  }

  // name2
  //
  if (i.name2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"name2",
        e));

    a << *i.name2 ();
  }

  // name3
  //
  if (i.name3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"name3",
        e));

    a << *i.name3 ();
  }

  // city
  //
  if (i.city ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"city",
        e));

    a << *i.city ();
  }

  // zipcode
  //
  if (i.zipcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"zipcode",
        e));

    a << *i.zipcode ();
  }

  // street
  //
  if (i.street ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"street",
        e));

    a << *i.street ();
  }

  // extern1
  //
  if (i.extern1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern1",
        e));

    a << *i.extern1 ();
  }

  // extern2
  //
  if (i.extern2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern2",
        e));

    a << *i.extern2 ();
  }

  // extern3
  //
  if (i.extern3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern3",
        e));

    a << *i.extern3 ();
  }

  // phone
  //
  if (i.phone ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"phone",
        e));

    a << *i.phone ();
  }

  // phone2
  //
  if (i.phone2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"phone2",
        e));

    a << *i.phone2 ();
  }

  // phone3
  //
  if (i.phone3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"phone3",
        e));

    a << *i.phone3 ();
  }

  // fax
  //
  if (i.fax ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"fax",
        e));

    a << *i.fax ();
  }

  // email
  //
  if (i.email ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"email",
        e));

    a << *i.email ();
  }

  // homepage
  //
  if (i.homepage ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"homepage",
        e));

    a << *i.homepage ();
  }

  // vatid
  //
  if (i.vatid ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vatid",
        e));

    a << *i.vatid ();
  }

  // vatexemption
  //
  if (i.vatexemption ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vatexemption",
        e));

    a << *i.vatexemption ();
  }

  // statecode
  //
  if (i.statecode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statecode",
        e));

    a << *i.statecode ();
  }

  // statuscode
  //
  if (i.statuscode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statuscode",
        e));

    a << *i.statuscode ();
  }

  // groupcode
  //
  if (i.groupcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"groupcode",
        e));

    a << *i.groupcode ();
  }

  // business
  //
  if (i.business ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"business",
        e));

    a << *i.business ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_counterpart& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // contactkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"contactkey",
        e));

    a << i.contactkey ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // lastname
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"lastname",
        e));

    a << i.lastname ();
  }

  // firstname
  //
  if (i.firstname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"firstname",
        e));

    a << *i.firstname ();
  }

  // code
  //
  if (i.code ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"code",
        e));

    a << *i.code ();
  }

  // role
  //
  if (i.role ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"role",
        e));

    a << *i.role ();
  }

  // department
  //
  if (i.department ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"department",
        e));

    a << *i.department ();
  }

  // phone1
  //
  if (i.phone1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"phone1",
        e));

    a << *i.phone1 ();
  }

  // phone2
  //
  if (i.phone2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"phone2",
        e));

    a << *i.phone2 ();
  }

  // mobile
  //
  if (i.mobile ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"mobile",
        e));

    a << *i.mobile ();
  }

  // fax
  //
  if (i.fax ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"fax",
        e));

    a << *i.fax ();
  }

  // mail
  //
  if (i.mail ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"mail",
        e));

    a << *i.mail ();
  }

  // titlecode
  //
  if (i.titlecode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"titlecode",
        e));

    a << *i.titlecode ();
  }

  // salutecode
  //
  if (i.salutecode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"salutecode",
        e));

    a << *i.salutecode ();
  }

  // statuscode
  //
  if (i.statuscode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statuscode",
        e));

    a << *i.statuscode ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_project& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // bkm.part
  //
  for (bkm_project::bkm_part_const_iterator
       b (i.bkm_part ().begin ()), n (i.bkm_part ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.part",
        e));

    s << *b;
  }

  // bkm.splititem
  //
  for (bkm_project::bkm_splititem_const_iterator
       b (i.bkm_splititem ().begin ()), n (i.bkm_splititem ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.splititem",
        e));

    s << *b;
  }

  // bkm.placing
  //
  for (bkm_project::bkm_placing_const_iterator
       b (i.bkm_placing ().begin ()), n (i.bkm_placing ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.placing",
        e));

    s << *b;
  }

  // bkm.revision
  //
  for (bkm_project::bkm_revision_const_iterator
       b (i.bkm_revision ().begin ()), n (i.bkm_revision ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.revision",
        e));

    s << *b;
  }

  // bkm.order
  //
  for (bkm_project::bkm_order_const_iterator
       b (i.bkm_order ().begin ()), n (i.bkm_order ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.order",
        e));

    s << *b;
  }

  // bkm.addition
  //
  for (bkm_project::bkm_addition_const_iterator
       b (i.bkm_addition ().begin ()), n (i.bkm_addition ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.addition",
        e));

    s << *b;
  }

  // bkm.evident
  //
  for (bkm_project::bkm_evident_const_iterator
       b (i.bkm_evident ().begin ()), n (i.bkm_evident ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.evident",
        e));

    s << *b;
  }

  // bkm.invoice
  //
  for (bkm_project::bkm_invoice_const_iterator
       b (i.bkm_invoice ().begin ()), n (i.bkm_invoice ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.invoice",
        e));

    s << *b;
  }

  // bkm.payment
  //
  for (bkm_project::bkm_payment_const_iterator
       b (i.bkm_payment ().begin ()), n (i.bkm_payment ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.payment",
        e));

    s << *b;
  }

  // bkm.backup
  //
  for (bkm_project::bkm_backup_const_iterator
       b (i.bkm_backup ().begin ()), n (i.bkm_backup ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.backup",
        e));

    s << *b;
  }

  // ava.order
  //
  for (bkm_project::ava_order_const_iterator
       b (i.ava_order ().begin ()), n (i.ava_order ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"ava.order",
        e));

    s << *b;
  }

  // ret.order
  //
  for (bkm_project::ret_order_const_iterator
       b (i.ret_order ().begin ()), n (i.ret_order ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"ret.order",
        e));

    s << *b;
  }

  // ret.invoice
  //
  for (bkm_project::ret_invoice_const_iterator
       b (i.ret_invoice ().begin ()), n (i.ret_invoice ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"ret.invoice",
        e));

    s << *b;
  }

  // ret.payment
  //
  for (bkm_project::ret_payment_const_iterator
       b (i.ret_payment ().begin ()), n (i.ret_payment ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"ret.payment",
        e));

    s << *b;
  }

  // bkm.document
  //
  for (bkm_project::bkm_document_const_iterator
       b (i.bkm_document ().begin ()), n (i.bkm_document ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.document",
        e));

    s << *b;
  }

  // bkm.keyvalue
  //
  for (bkm_project::bkm_keyvalue_const_iterator
       b (i.bkm_keyvalue ().begin ()), n (i.bkm_keyvalue ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.keyvalue",
        e));

    s << *b;
  }

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // external
  //
  if (i.external ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"external",
        e));

    a << *i.external ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // managerkey
  //
  if (i.managerkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"managerkey",
        e));

    a << *i.managerkey ();
  }

  // code
  //
  if (i.code ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"code",
        e));

    a << *i.code ();
  }

  // part
  //
  if (i.part ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"part",
        e));

    a << *i.part ();
  }

  // number
  //
  if (i.number ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"number",
        e));

    a << *i.number ();
  }

  // projectstart
  //
  if (i.projectstart ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"projectstart",
        e));

    a << *i.projectstart ();
  }

  // projectend
  //
  if (i.projectend ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"projectend",
        e));

    a << *i.projectend ();
  }

  // currency
  //
  if (i.currency ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"currency",
        e));

    a << *i.currency ();
  }

  // currencykey
  //
  if (i.currencykey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"currencykey",
        e));

    a << *i.currencykey ();
  }

  // orderercode
  //
  if (i.orderercode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"orderercode",
        e));

    a << *i.orderercode ();
  }

  // ordererkey
  //
  if (i.ordererkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"ordererkey",
        e));

    a << *i.ordererkey ();
  }

  // ordererkeyid
  //
  if (i.ordererkeyid ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"ordererkeyid",
        e));

    a << *i.ordererkeyid ();
  }

  // city
  //
  if (i.city ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"city",
        e));

    a << *i.city ();
  }

  // zipcode
  //
  if (i.zipcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"zipcode",
        e));

    a << *i.zipcode ();
  }

  // street
  //
  if (i.street ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"street",
        e));

    a << *i.street ();
  }

  // statecode
  //
  if (i.statecode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statecode",
        e));

    a << *i.statecode ();
  }

  // statuscode
  //
  if (i.statuscode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statuscode",
        e));

    a << *i.statuscode ();
  }

  // groupcode
  //
  if (i.groupcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"groupcode",
        e));

    a << *i.groupcode ();
  }

  // parishcode
  //
  if (i.parishcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"parishcode",
        e));

    a << *i.parishcode ();
  }

  // parishcode1
  //
  if (i.parishcode1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"parishcode1",
        e));

    a << *i.parishcode1 ();
  }

  // parishcode2
  //
  if (i.parishcode2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"parishcode2",
        e));

    a << *i.parishcode2 ();
  }

  // parishcode3
  //
  if (i.parishcode3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"parishcode3",
        e));

    a << *i.parishcode3 ();
  }

  // parishcode4
  //
  if (i.parishcode4 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"parishcode4",
        e));

    a << *i.parishcode4 ();
  }

  // returnreal
  //
  if (i.returnreal ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"returnreal",
        e));

    a << *i.returnreal ();
  }

  // returnsold
  //
  if (i.returnsold ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"returnsold",
        e));

    a << *i.returnsold ();
  }

  // vatprz
  //
  if (i.vatprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vatprz",
        e));

    a << *i.vatprz ();
  }

  // extern1
  //
  if (i.extern1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern1",
        e));

    a << *i.extern1 ();
  }

  // extern2
  //
  if (i.extern2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern2",
        e));

    a << *i.extern2 ();
  }

  // extern3
  //
  if (i.extern3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern3",
        e));

    a << *i.extern3 ();
  }

  // userfield1
  //
  if (i.userfield1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"userfield1",
        e));

    a << *i.userfield1 ();
  }

  // userfield2
  //
  if (i.userfield2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"userfield2",
        e));

    a << *i.userfield2 ();
  }

  // userfield3
  //
  if (i.userfield3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"userfield3",
        e));

    a << *i.userfield3 ();
  }

  // user
  //
  if (i.user ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"user",
        e));

    a << *i.user ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_part& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // projectkey
  //
  if (i.projectkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"projectkey",
        e));

    a << *i.projectkey ();
  }

  // parishkey1
  //
  if (i.parishkey1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"parishkey1",
        e));

    a << *i.parishkey1 ();
  }

  // parishkey2
  //
  if (i.parishkey2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"parishkey2",
        e));

    a << *i.parishkey2 ();
  }

  // returnreal
  //
  if (i.returnreal ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"returnreal",
        e));

    a << *i.returnreal ();
  }

  // returnsold
  //
  if (i.returnsold ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"returnsold",
        e));

    a << *i.returnsold ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // code
  //
  if (i.code ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"code",
        e));

    a << *i.code ();
  }

  // part
  //
  if (i.part ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"part",
        e));

    a << *i.part ();
  }

  // partstart
  //
  if (i.partstart ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"partstart",
        e));

    a << *i.partstart ();
  }

  // partend
  //
  if (i.partend ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"partend",
        e));

    a << *i.partend ();
  }

  // currency
  //
  if (i.currency ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"currency",
        e));

    a << *i.currency ();
  }

  // number
  //
  if (i.number ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"number",
        e));

    a << *i.number ();
  }

  // city
  //
  if (i.city ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"city",
        e));

    a << *i.city ();
  }

  // zipcode
  //
  if (i.zipcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"zipcode",
        e));

    a << *i.zipcode ();
  }

  // street
  //
  if (i.street ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"street",
        e));

    a << *i.street ();
  }

  // statecode
  //
  if (i.statecode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statecode",
        e));

    a << *i.statecode ();
  }

  // deliverycode
  //
  if (i.deliverycode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"deliverycode",
        e));

    a << *i.deliverycode ();
  }

  // typecode
  //
  if (i.typecode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"typecode",
        e));

    a << *i.typecode ();
  }

  // statuscode
  //
  if (i.statuscode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statuscode",
        e));

    a << *i.statuscode ();
  }

  // groupcode
  //
  if (i.groupcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"groupcode",
        e));

    a << *i.groupcode ();
  }

  // vatprz
  //
  if (i.vatprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vatprz",
        e));

    a << *i.vatprz ();
  }

  // extern1
  //
  if (i.extern1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern1",
        e));

    a << *i.extern1 ();
  }

  // extern2
  //
  if (i.extern2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern2",
        e));

    a << *i.extern2 ();
  }

  // extern3
  //
  if (i.extern3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern3",
        e));

    a << *i.extern3 ();
  }

  // userfield1
  //
  if (i.userfield1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"userfield1",
        e));

    a << *i.userfield1 ();
  }

  // userfield2
  //
  if (i.userfield2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"userfield2",
        e));

    a << *i.userfield2 ();
  }

  // userfield3
  //
  if (i.userfield3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"userfield3",
        e));

    a << *i.userfield3 ();
  }

  // user
  //
  if (i.user ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"user",
        e));

    a << *i.user ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_splititem& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // code
  //
  if (i.code ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"code",
        e));

    a << *i.code ();
  }

  // name
  //
  if (i.name ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"name",
        e));

    a << *i.name ();
  }

  // splitcode
  //
  if (i.splitcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"splitcode",
        e));

    a << *i.splitcode ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_placing& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // projectkey
  //
  if (i.projectkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"projectkey",
        e));

    a << *i.projectkey ();
  }

  // partcode
  //
  if (i.partcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"partcode",
        e));

    a << *i.partcode ();
  }

  // partcode1
  //
  if (i.partcode1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"partcode1",
        e));

    a << *i.partcode1 ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // code
  //
  if (i.code ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"code",
        e));

    a << *i.code ();
  }

  // placing
  //
  if (i.placing ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"placing",
        e));

    a << *i.placing ();
  }

  // extern1
  //
  if (i.extern1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern1",
        e));

    a << *i.extern1 ();
  }

  // extern2
  //
  if (i.extern2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern2",
        e));

    a << *i.extern2 ();
  }

  // extern3
  //
  if (i.extern3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern3",
        e));

    a << *i.extern3 ();
  }

  // budget
  //
  if (i.budget ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"budget",
        e));

    a << *i.budget ();
  }

  // budgetcustom
  //
  if (i.budgetcustom ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"budgetcustom",
        e));

    a << *i.budgetcustom ();
  }

  // lstgstart
  //
  if (i.lstgstart ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"lstgstart",
        e));

    a << *i.lstgstart ();
  }

  // lstgend
  //
  if (i.lstgend ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"lstgend",
        e));

    a << *i.lstgend ();
  }

  // vatprz
  //
  if (i.vatprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vatprz",
        e));

    a << *i.vatprz ();
  }

  // costobjectcode
  //
  if (i.costobjectcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"costobjectcode",
        e));

    a << *i.costobjectcode ();
  }

  // costobjectname
  //
  if (i.costobjectname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"costobjectname",
        e));

    a << *i.costobjectname ();
  }

  // costunitcode1
  //
  if (i.costunitcode1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"costunitcode1",
        e));

    a << *i.costunitcode1 ();
  }

  // costunitname1
  //
  if (i.costunitname1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"costunitname1",
        e));

    a << *i.costunitname1 ();
  }

  // costunitcode2
  //
  if (i.costunitcode2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"costunitcode2",
        e));

    a << *i.costunitcode2 ();
  }

  // costunitname2
  //
  if (i.costunitname2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"costunitname2",
        e));

    a << *i.costunitname2 ();
  }

  // statuscode
  //
  if (i.statuscode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statuscode",
        e));

    a << *i.statuscode ();
  }

  // statusname
  //
  if (i.statusname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statusname",
        e));

    a << *i.statusname ();
  }

  // groupcode
  //
  if (i.groupcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"groupcode",
        e));

    a << *i.groupcode ();
  }

  // groupname
  //
  if (i.groupname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"groupname",
        e));

    a << *i.groupname ();
  }

  // userfield1
  //
  if (i.userfield1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"userfield1",
        e));

    a << *i.userfield1 ();
  }

  // userfield2
  //
  if (i.userfield2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"userfield2",
        e));

    a << *i.userfield2 ();
  }

  // userfield3
  //
  if (i.userfield3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"userfield3",
        e));

    a << *i.userfield3 ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_revision& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // bkm.revisionitem
  //
  for (bkm_revision::bkm_revisionitem_const_iterator
       b (i.bkm_revisionitem ().begin ()), n (i.bkm_revisionitem ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.revisionitem",
        e));

    s << *b;
  }

  // ret.revisionitem
  //
  for (bkm_revision::ret_revisionitem_const_iterator
       b (i.ret_revisionitem ().begin ()), n (i.ret_revisionitem ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"ret.revisionitem",
        e));

    s << *b;
  }

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // projectkey
  //
  if (i.projectkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"projectkey",
        e));

    a << *i.projectkey ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // number
  //
  if (i.number ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"number",
        e));

    a << *i.number ();
  }

  // releasenumber
  //
  if (i.releasenumber ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"releasenumber",
        e));

    a << *i.releasenumber ();
  }

  // extern1
  //
  if (i.extern1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern1",
        e));

    a << *i.extern1 ();
  }

  // extern2
  //
  if (i.extern2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern2",
        e));

    a << *i.extern2 ();
  }

  // extern3
  //
  if (i.extern3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern3",
        e));

    a << *i.extern3 ();
  }

  // revision
  //
  if (i.revision ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"revision",
        e));

    a << *i.revision ();
  }

  // dateeffect
  //
  if (i.dateeffect ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"dateeffect",
        e));

    a << *i.dateeffect ();
  }

  // releasedby
  //
  if (i.releasedby ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"releasedby",
        e));

    a << *i.releasedby ();
  }

  // revisionbtr
  //
  if (i.revisionbtr ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"revisionbtr",
        e));

    a << *i.revisionbtr ();
  }

  // releasedbtr
  //
  if (i.releasedbtr ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"releasedbtr",
        e));

    a << *i.releasedbtr ();
  }

  // requestdate
  //
  if (i.requestdate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"requestdate",
        e));

    a << *i.requestdate ();
  }

  // releasedate
  //
  if (i.releasedate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"releasedate",
        e));

    a << *i.releasedate ();
  }

  // vatprz
  //
  if (i.vatprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vatprz",
        e));

    a << *i.vatprz ();
  }

  // statuscode
  //
  if (i.statuscode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statuscode",
        e));

    a << *i.statuscode ();
  }

  // statusname
  //
  if (i.statusname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statusname",
        e));

    a << *i.statusname ();
  }

  // statusinfo
  //
  if (i.statusinfo ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statusinfo",
        e));

    a << *i.statusinfo ();
  }

  // statusinfodate
  //
  if (i.statusinfodate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statusinfodate",
        e));

    a << *i.statusinfodate ();
  }

  // statusinfouser
  //
  if (i.statusinfouser ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statusinfouser",
        e));

    a << *i.statusinfouser ();
  }

  // groupcode
  //
  if (i.groupcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"groupcode",
        e));

    a << *i.groupcode ();
  }

  // groupname
  //
  if (i.groupname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"groupname",
        e));

    a << *i.groupname ();
  }

  // categorycode
  //
  if (i.categorycode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"categorycode",
        e));

    a << *i.categorycode ();
  }

  // categoryname
  //
  if (i.categoryname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"categoryname",
        e));

    a << *i.categoryname ();
  }

  // requestercode
  //
  if (i.requestercode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"requestercode",
        e));

    a << *i.requestercode ();
  }

  // requesterkey
  //
  if (i.requesterkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"requesterkey",
        e));

    a << *i.requesterkey ();
  }

  // requesterkeyid
  //
  if (i.requesterkeyid ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"requesterkeyid",
        e));

    a << *i.requesterkeyid ();
  }

  // causercode
  //
  if (i.causercode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"causercode",
        e));

    a << *i.causercode ();
  }

  // causerkey
  //
  if (i.causerkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"causerkey",
        e));

    a << *i.causerkey ();
  }

  // causerkeyid
  //
  if (i.causerkeyid ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"causerkeyid",
        e));

    a << *i.causerkeyid ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_revisionitem& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // placingkey
  //
  if (i.placingkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"placingkey",
        e));

    a << *i.placingkey ();
  }

  // placingcode
  //
  if (i.placingcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"placingcode",
        e));

    a << *i.placingcode ();
  }

  // placingname
  //
  if (i.placingname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"placingname",
        e));

    a << *i.placingname ();
  }

  // code
  //
  if (i.code ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"code",
        e));

    a << *i.code ();
  }

  // revisionbtr
  //
  if (i.revisionbtr ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"revisionbtr",
        e));

    a << *i.revisionbtr ();
  }

  // releasedbtr
  //
  if (i.releasedbtr ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"releasedbtr",
        e));

    a << *i.releasedbtr ();
  }

  // vatprz
  //
  if (i.vatprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vatprz",
        e));

    a << *i.vatprz ();
  }

  // ratingprz
  //
  if (i.ratingprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"ratingprz",
        e));

    a << *i.ratingprz ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const ret_revisionitem& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // orderkey
  //
  if (i.orderkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"orderkey",
        e));

    a << *i.orderkey ();
  }

  // ordercode
  //
  if (i.ordercode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"ordercode",
        e));

    a << *i.ordercode ();
  }

  // ordername
  //
  if (i.ordername ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"ordername",
        e));

    a << *i.ordername ();
  }

  // code
  //
  if (i.code ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"code",
        e));

    a << *i.code ();
  }

  // budget
  //
  if (i.budget ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"budget",
        e));

    a << *i.budget ();
  }

  // vatprz
  //
  if (i.vatprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vatprz",
        e));

    a << *i.vatprz ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_order& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // bkm.invoicedef
  //
  for (bkm_order::bkm_invoicedef_const_iterator
       b (i.bkm_invoicedef ().begin ()), n (i.bkm_invoicedef ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.invoicedef",
        e));

    s << *b;
  }

  // bkm.keyvalue
  //
  for (bkm_order::bkm_keyvalue_const_iterator
       b (i.bkm_keyvalue ().begin ()), n (i.bkm_keyvalue ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.keyvalue",
        e));

    s << *b;
  }

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // external
  //
  if (i.external ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"external",
        e));

    a << *i.external ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // projectkey
  //
  if (i.projectkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"projectkey",
        e));

    a << *i.projectkey ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // partcode
  //
  if (i.partcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"partcode",
        e));

    a << *i.partcode ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // vendorcode
  //
  if (i.vendorcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vendorcode",
        e));

    a << *i.vendorcode ();
  }

  // vendorkey
  //
  if (i.vendorkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vendorkey",
        e));

    a << *i.vendorkey ();
  }

  // vendorname
  //
  if (i.vendorname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vendorname",
        e));

    a << *i.vendorname ();
  }

  // vendorname2
  //
  if (i.vendorname2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vendorname2",
        e));

    a << *i.vendorname2 ();
  }

  // vendorname3
  //
  if (i.vendorname3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vendorname3",
        e));

    a << *i.vendorname3 ();
  }

  // vendorkeyid
  //
  if (i.vendorkeyid ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vendorkeyid",
        e));

    a << *i.vendorkeyid ();
  }

  // placingkey
  //
  if (i.placingkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"placingkey",
        e));

    a << *i.placingkey ();
  }

  // placingcode
  //
  if (i.placingcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"placingcode",
        e));

    a << *i.placingcode ();
  }

  // placingname
  //
  if (i.placingname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"placingname",
        e));

    a << *i.placingname ();
  }

  // number
  //
  if (i.number ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"number",
        e));

    a << *i.number ();
  }

  // numbercol
  //
  if (i.numbercol ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"numbercol",
        e));

    a << *i.numbercol ();
  }

  // order
  //
  if (i.order ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"order",
        e));

    a << *i.order ();
  }

  // contract
  //
  if (i.contract ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"contract",
        e));

    a << *i.contract ();
  }

  // extern1
  //
  if (i.extern1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern1",
        e));

    a << *i.extern1 ();
  }

  // extern2
  //
  if (i.extern2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern2",
        e));

    a << *i.extern2 ();
  }

  // extern3
  //
  if (i.extern3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern3",
        e));

    a << *i.extern3 ();
  }

  // currency
  //
  if (i.currency ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"currency",
        e));

    a << *i.currency ();
  }

  // orderbtr
  //
  if (i.orderbtr ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"orderbtr",
        e));

    a << *i.orderbtr ();
  }

  // rebatebtr
  //
  if (i.rebatebtr ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"rebatebtr",
        e));

    a << *i.rebatebtr ();
  }

  // orderdate
  //
  if (i.orderdate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"orderdate",
        e));

    a << *i.orderdate ();
  }

  // indexdate
  //
  if (i.indexdate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"indexdate",
        e));

    a << *i.indexdate ();
  }

  // lstgstart
  //
  if (i.lstgstart ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"lstgstart",
        e));

    a << *i.lstgstart ();
  }

  // lstgend
  //
  if (i.lstgend ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"lstgend",
        e));

    a << *i.lstgend ();
  }

  // offerdate
  //
  if (i.offerdate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"offerdate",
        e));

    a << *i.offerdate ();
  }

  // liabilityperiod
  //
  if (i.liabilityperiod ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"liabilityperiod",
        e));

    a << *i.liabilityperiod ();
  }

  // discountprz
  //
  if (i.discountprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"discountprz",
        e));

    a << *i.discountprz ();
  }

  // skontoprz
  //
  if (i.skontoprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"skontoprz",
        e));

    a << *i.skontoprz ();
  }

  // vatprz
  //
  if (i.vatprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vatprz",
        e));

    a << *i.vatprz ();
  }

  // statuscode
  //
  if (i.statuscode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statuscode",
        e));

    a << *i.statuscode ();
  }

  // statusname
  //
  if (i.statusname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statusname",
        e));

    a << *i.statusname ();
  }

  // groupcode
  //
  if (i.groupcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"groupcode",
        e));

    a << *i.groupcode ();
  }

  // groupname
  //
  if (i.groupname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"groupname",
        e));

    a << *i.groupname ();
  }

  // ordertypecode
  //
  if (i.ordertypecode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"ordertypecode",
        e));

    a << *i.ordertypecode ();
  }

  // ordertypename
  //
  if (i.ordertypename ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"ordertypename",
        e));

    a << *i.ordertypename ();
  }

  // userfield1
  //
  if (i.userfield1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"userfield1",
        e));

    a << *i.userfield1 ();
  }

  // userfield2
  //
  if (i.userfield2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"userfield2",
        e));

    a << *i.userfield2 ();
  }

  // userfield3
  //
  if (i.userfield3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"userfield3",
        e));

    a << *i.userfield3 ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }

  // vatopt
  //
  if (i.vatopt ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vatopt",
        e));

    a << *i.vatopt ();
  }

  // collect
  //
  if (i.collect ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"collect",
        e));

    a << *i.collect ();
  }

  // parentkey
  //
  if (i.parentkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"parentkey",
        e));

    a << *i.parentkey ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_addition& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // projectkey
  //
  if (i.projectkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"projectkey",
        e));

    a << *i.projectkey ();
  }

  // orderkey
  //
  if (i.orderkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"orderkey",
        e));

    a << *i.orderkey ();
  }

  // number
  //
  if (i.number ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"number",
        e));

    a << *i.number ();
  }

  // numberproject
  //
  if (i.numberproject ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"numberproject",
        e));

    a << *i.numberproject ();
  }

  // addition
  //
  if (i.addition ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"addition",
        e));

    a << *i.addition ();
  }

  // extern1
  //
  if (i.extern1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern1",
        e));

    a << *i.extern1 ();
  }

  // extern2
  //
  if (i.extern2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern2",
        e));

    a << *i.extern2 ();
  }

  // extern3
  //
  if (i.extern3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern3",
        e));

    a << *i.extern3 ();
  }

  // additionbtr
  //
  if (i.additionbtr ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"additionbtr",
        e));

    a << *i.additionbtr ();
  }

  // discountprz
  //
  if (i.discountprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"discountprz",
        e));

    a << *i.discountprz ();
  }

  // orderdate
  //
  if (i.orderdate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"orderdate",
        e));

    a << *i.orderdate ();
  }

  // offerdate
  //
  if (i.offerdate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"offerdate",
        e));

    a << *i.offerdate ();
  }

  // statuscode
  //
  if (i.statuscode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statuscode",
        e));

    a << *i.statuscode ();
  }

  // statusname
  //
  if (i.statusname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statusname",
        e));

    a << *i.statusname ();
  }

  // groupcode
  //
  if (i.groupcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"groupcode",
        e));

    a << *i.groupcode ();
  }

  // groupname
  //
  if (i.groupname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"groupname",
        e));

    a << *i.groupname ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_evident& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // projectkey
  //
  if (i.projectkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"projectkey",
        e));

    a << *i.projectkey ();
  }

  // orderkey
  //
  if (i.orderkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"orderkey",
        e));

    a << *i.orderkey ();
  }

  // number
  //
  if (i.number ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"number",
        e));

    a << *i.number ();
  }

  // numberproject
  //
  if (i.numberproject ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"numberproject",
        e));

    a << *i.numberproject ();
  }

  // extern1
  //
  if (i.extern1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern1",
        e));

    a << *i.extern1 ();
  }

  // extern2
  //
  if (i.extern2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern2",
        e));

    a << *i.extern2 ();
  }

  // extern3
  //
  if (i.extern3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern3",
        e));

    a << *i.extern3 ();
  }

  // evident
  //
  if (i.evident ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"evident",
        e));

    a << *i.evident ();
  }

  // evidentnote
  //
  if (i.evidentnote ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"evidentnote",
        e));

    a << *i.evidentnote ();
  }

  // evidentbtr
  //
  if (i.evidentbtr ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"evidentbtr",
        e));

    a << *i.evidentbtr ();
  }

  // offerbtr
  //
  if (i.offerbtr ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"offerbtr",
        e));

    a << *i.offerbtr ();
  }

  // ratedbtr
  //
  if (i.ratedbtr ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"ratedbtr",
        e));

    a << *i.ratedbtr ();
  }

  // entrydate
  //
  if (i.entrydate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"entrydate",
        e));

    a << *i.entrydate ();
  }

  // signdate
  //
  if (i.signdate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"signdate",
        e));

    a << *i.signdate ();
  }

  // statuscode
  //
  if (i.statuscode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statuscode",
        e));

    a << *i.statuscode ();
  }

  // statusname
  //
  if (i.statusname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statusname",
        e));

    a << *i.statusname ();
  }

  // groupcode
  //
  if (i.groupcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"groupcode",
        e));

    a << *i.groupcode ();
  }

  // groupname
  //
  if (i.groupname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"groupname",
        e));

    a << *i.groupname ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_backup& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // projectkey
  //
  if (i.projectkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"projectkey",
        e));

    a << *i.projectkey ();
  }

  // orderkey
  //
  if (i.orderkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"orderkey",
        e));

    a << *i.orderkey ();
  }

  // code
  //
  if (i.code ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"code",
        e));

    a << *i.code ();
  }

  // extern1
  //
  if (i.extern1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern1",
        e));

    a << *i.extern1 ();
  }

  // extern2
  //
  if (i.extern2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern2",
        e));

    a << *i.extern2 ();
  }

  // extern3
  //
  if (i.extern3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern3",
        e));

    a << *i.extern3 ();
  }

  // backup
  //
  if (i.backup ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"backup",
        e));

    a << *i.backup ();
  }

  // contractid
  //
  if (i.contractid ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"contractid",
        e));

    a << *i.contractid ();
  }

  // backupbtr
  //
  if (i.backupbtr ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"backupbtr",
        e));

    a << *i.backupbtr ();
  }

  // issuedate
  //
  if (i.issuedate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"issuedate",
        e));

    a << *i.issuedate ();
  }

  // periodofnotice
  //
  if (i.periodofnotice ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"periodofnotice",
        e));

    a << *i.periodofnotice ();
  }

  // returndate
  //
  if (i.returndate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"returndate",
        e));

    a << *i.returndate ();
  }

  // quitdate
  //
  if (i.quitdate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"quitdate",
        e));

    a << *i.quitdate ();
  }

  // validfromdate
  //
  if (i.validfromdate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"validfromdate",
        e));

    a << *i.validfromdate ();
  }

  // validtodate
  //
  if (i.validtodate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"validtodate",
        e));

    a << *i.validtodate ();
  }

  // warrantyfromdate
  //
  if (i.warrantyfromdate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"warrantyfromdate",
        e));

    a << *i.warrantyfromdate ();
  }

  // warrantytodate
  //
  if (i.warrantytodate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"warrantytodate",
        e));

    a << *i.warrantytodate ();
  }

  // account
  //
  if (i.account ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"account",
        e));

    a << *i.account ();
  }

  // iban
  //
  if (i.iban ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"iban",
        e));

    a << *i.iban ();
  }

  // bankkey
  //
  if (i.bankkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"bankkey",
        e));

    a << *i.bankkey ();
  }

  // bankswift
  //
  if (i.bankswift ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"bankswift",
        e));

    a << *i.bankswift ();
  }

  // typecode
  //
  if (i.typecode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"typecode",
        e));

    a << *i.typecode ();
  }

  // typename
  //
  if (i.typename_ ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"typename",
        e));

    a << *i.typename_ ();
  }

  // statuscode
  //
  if (i.statuscode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statuscode",
        e));

    a << *i.statuscode ();
  }

  // statusname
  //
  if (i.statusname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statusname",
        e));

    a << *i.statusname ();
  }

  // groupcode
  //
  if (i.groupcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"groupcode",
        e));

    a << *i.groupcode ();
  }

  // groupname
  //
  if (i.groupname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"groupname",
        e));

    a << *i.groupname ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_invdeftype& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // code
  //
  if (i.code ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"code",
        e));

    a << *i.code ();
  }

  // invoicedef
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"invoicedef",
        e));

    a << i.invoicedef ();
  }

  // valueprz
  //
  if (i.valueprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"valueprz",
        e));

    a << *i.valueprz ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_invoice& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // bkm.invoicepos
  //
  for (bkm_invoice::bkm_invoicepos_const_iterator
       b (i.bkm_invoicepos ().begin ()), n (i.bkm_invoicepos ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.invoicepos",
        e));

    s << *b;
  }

  // bkm.splitinvoice
  //
  for (bkm_invoice::bkm_splitinvoice_const_iterator
       b (i.bkm_splitinvoice ().begin ()), n (i.bkm_splitinvoice ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.splitinvoice",
        e));

    s << *b;
  }

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // partcode
  //
  if (i.partcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"partcode",
        e));

    a << *i.partcode ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // projectkey
  //
  if (i.projectkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"projectkey",
        e));

    a << *i.projectkey ();
  }

  // orderkey
  //
  if (i.orderkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"orderkey",
        e));

    a << *i.orderkey ();
  }

  // external
  //
  if (i.external ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"external",
        e));

    a << *i.external ();
  }

  // calculation
  //
  if (i.calculation ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"calculation",
        e));

    a << *i.calculation ();
  }

  // typecode
  //
  if (i.typecode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"typecode",
        e));

    a << *i.typecode ();
  }

  // typecount
  //
  if (i.typecount ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"typecount",
        e));

    a << *i.typecount ();
  }

  // number
  //
  if (i.number ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"number",
        e));

    a << *i.number ();
  }

  // numbercol
  //
  if (i.numbercol ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"numbercol",
        e));

    a << *i.numbercol ();
  }

  // invoicedate
  //
  if (i.invoicedate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"invoicedate",
        e));

    a << *i.invoicedate ();
  }

  // entrydate
  //
  if (i.entrydate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"entrydate",
        e));

    a << *i.entrydate ();
  }

  // entry2date
  //
  if (i.entry2date ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"entry2date",
        e));

    a << *i.entry2date ();
  }

  // verifydate
  //
  if (i.verifydate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"verifydate",
        e));

    a << *i.verifydate ();
  }

  // discountdate
  //
  if (i.discountdate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"discountdate",
        e));

    a << *i.discountdate ();
  }

  // discountnto
  //
  if (i.discountnto ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"discountnto",
        e));

    a << *i.discountnto ();
  }

  // agingdate
  //
  if (i.agingdate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"agingdate",
        e));

    a << *i.agingdate ();
  }

  // respitedate
  //
  if (i.respitedate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"respitedate",
        e));

    a << *i.respitedate ();
  }

  // extern1
  //
  if (i.extern1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern1",
        e));

    a << *i.extern1 ();
  }

  // extern2
  //
  if (i.extern2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern2",
        e));

    a << *i.extern2 ();
  }

  // extern3
  //
  if (i.extern3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern3",
        e));

    a << *i.extern3 ();
  }

  // range
  //
  if (i.range ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"range",
        e));

    a << *i.range ();
  }

  // period
  //
  if (i.period ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"period",
        e));

    a << *i.period ();
  }

  // barcode
  //
  if (i.barcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"barcode",
        e));

    a << *i.barcode ();
  }

  // verifier
  //
  if (i.verifier ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"verifier",
        e));

    a << *i.verifier ();
  }

  // statuscode
  //
  if (i.statuscode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statuscode",
        e));

    a << *i.statuscode ();
  }

  // statusname
  //
  if (i.statusname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statusname",
        e));

    a << *i.statusname ();
  }

  // groupcode
  //
  if (i.groupcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"groupcode",
        e));

    a << *i.groupcode ();
  }

  // groupname
  //
  if (i.groupname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"groupname",
        e));

    a << *i.groupname ();
  }

  // totalnto
  //
  if (i.totalnto ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"totalnto",
        e));

    a << *i.totalnto ();
  }

  // ntoverified
  //
  if (i.ntoverified ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"ntoverified",
        e));

    a << *i.ntoverified ();
  }

  // amountnto
  //
  if (i.amountnto ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"amountnto",
        e));

    a << *i.amountnto ();
  }

  // deducted
  //
  if (i.deducted ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"deducted",
        e));

    a << *i.deducted ();
  }

  // deductedvat
  //
  if (i.deductedvat ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"deductedvat",
        e));

    a << *i.deductedvat ();
  }

  // anwbtr
  //
  if (i.anwbtr ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"anwbtr",
        e));

    a << *i.anwbtr ();
  }

  // anwbtrnto
  //
  if (i.anwbtrnto ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"anwbtrnto",
        e));

    a << *i.anwbtrnto ();
  }

  // anwskobtr
  //
  if (i.anwskobtr ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"anwskobtr",
        e));

    a << *i.anwskobtr ();
  }

  // anwskonto
  //
  if (i.anwskonto ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"anwskonto",
        e));

    a << *i.anwskonto ();
  }

  // vatbtr
  //
  if (i.vatbtr ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vatbtr",
        e));

    a << *i.vatbtr ();
  }

  // vatprz
  //
  if (i.vatprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vatprz",
        e));

    a << *i.vatprz ();
  }

  // skontobto
  //
  if (i.skontobto ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"skontobto",
        e));

    a << *i.skontobto ();
  }

  // skontonto
  //
  if (i.skontonto ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"skontonto",
        e));

    a << *i.skontonto ();
  }

  // skontoprz
  //
  if (i.skontoprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"skontoprz",
        e));

    a << *i.skontoprz ();
  }

  // drl
  //
  if (i.drl ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"drl",
        e));

    a << *i.drl ();
  }

  // drlvat
  //
  if (i.drlvat ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"drlvat",
        e));

    a << *i.drlvat ();
  }

  // drlprz
  //
  if (i.drlprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"drlprz",
        e));

    a << *i.drlprz ();
  }

  // drlsurety
  //
  if (i.drlsurety ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"drlsurety",
        e));

    a << *i.drlsurety ();
  }

  // drlsuretyvat
  //
  if (i.drlsuretyvat ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"drlsuretyvat",
        e));

    a << *i.drlsuretyvat ();
  }

  // hrl
  //
  if (i.hrl ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"hrl",
        e));

    a << *i.hrl ();
  }

  // hrlvat
  //
  if (i.hrlvat ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"hrlvat",
        e));

    a << *i.hrlvat ();
  }

  // hrlprz
  //
  if (i.hrlprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"hrlprz",
        e));

    a << *i.hrlprz ();
  }

  // hrlsurety
  //
  if (i.hrlsurety ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"hrlsurety",
        e));

    a << *i.hrlsurety ();
  }

  // hrlsuretyvat
  //
  if (i.hrlsuretyvat ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"hrlsuretyvat",
        e));

    a << *i.hrlsuretyvat ();
  }

  // userfield1
  //
  if (i.userfield1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"userfield1",
        e));

    a << *i.userfield1 ();
  }

  // userfield2
  //
  if (i.userfield2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"userfield2",
        e));

    a << *i.userfield2 ();
  }

  // userfield3
  //
  if (i.userfield3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"userfield3",
        e));

    a << *i.userfield3 ();
  }

  // custom1
  //
  if (i.custom1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"custom1",
        e));

    a << *i.custom1 ();
  }

  // custom2
  //
  if (i.custom2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"custom2",
        e));

    a << *i.custom2 ();
  }

  // custom3
  //
  if (i.custom3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"custom3",
        e));

    a << *i.custom3 ();
  }

  // custom4
  //
  if (i.custom4 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"custom4",
        e));

    a << *i.custom4 ();
  }

  // custom5
  //
  if (i.custom5 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"custom5",
        e));

    a << *i.custom5 ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }

  // liabilityperiod1
  //
  if (i.liabilityperiod1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"liabilityperiod1",
        e));

    a << *i.liabilityperiod1 ();
  }

  // collect
  //
  if (i.collect ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"collect",
        e));

    a << *i.collect ();
  }

  // parentkey
  //
  if (i.parentkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"parentkey",
        e));

    a << *i.parentkey ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_invoicedef& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // bkm.invdeftype
  //
  for (bkm_invoicedef::bkm_invdeftype_const_iterator
       b (i.bkm_invdeftype ().begin ()), n (i.bkm_invdeftype ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.invdeftype",
        e));

    s << *b;
  }

  // typecode
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"typecode",
        e));

    a << i.typecode ();
  }

  // skontoperiod
  //
  if (i.skontoperiod ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"skontoperiod",
        e));

    a << *i.skontoperiod ();
  }

  // checkperiod
  //
  if (i.checkperiod ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"checkperiod",
        e));

    a << *i.checkperiod ();
  }

  // spanunitcode
  //
  if (i.spanunitcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"spanunitcode",
        e));

    a << *i.spanunitcode ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_invoicepos& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // code
  //
  if (i.code ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"code",
        e));

    a << *i.code ();
  }

  // sortid
  //
  if (i.sortid ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"sortid",
        e));

    a << *i.sortid ();
  }

  // invoicedeftype
  //
  if (i.invoicedeftype ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"invoicedeftype",
        e));

    a << *i.invoicedeftype ();
  }

  // current
  //
  if (i.current ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"current",
        e));

    a << *i.current ();
  }

  // totalvalue
  //
  if (i.totalvalue ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"totalvalue",
        e));

    a << *i.totalvalue ();
  }

  // valuento
  //
  if (i.valuento ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"valuento",
        e));

    a << *i.valuento ();
  }

  // valuevat
  //
  if (i.valuevat ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"valuevat",
        e));

    a << *i.valuevat ();
  }

  // valueprz
  //
  if (i.valueprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"valueprz",
        e));

    a << *i.valueprz ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_splitinvoice& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // splititemid
  //
  if (i.splititemid ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"splititemid",
        e));

    a << *i.splititemid ();
  }

  // amountnto
  //
  if (i.amountnto ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"amountnto",
        e));

    a << *i.amountnto ();
  }

  // deducted
  //
  if (i.deducted ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"deducted",
        e));

    a << *i.deducted ();
  }

  // deductedvat
  //
  if (i.deductedvat ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"deductedvat",
        e));

    a << *i.deductedvat ();
  }

  // drl
  //
  if (i.drl ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"drl",
        e));

    a << *i.drl ();
  }

  // drlvat
  //
  if (i.drlvat ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"drlvat",
        e));

    a << *i.drlvat ();
  }

  // hrl
  //
  if (i.hrl ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"hrl",
        e));

    a << *i.hrl ();
  }

  // hrlvat
  //
  if (i.hrlvat ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"hrlvat",
        e));

    a << *i.hrlvat ();
  }

  // vatbtr
  //
  if (i.vatbtr ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vatbtr",
        e));

    a << *i.vatbtr ();
  }

  // discountnto
  //
  if (i.discountnto ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"discountnto",
        e));

    a << *i.discountnto ();
  }

  // drlsurety
  //
  if (i.drlsurety ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"drlsurety",
        e));

    a << *i.drlsurety ();
  }

  // drlsuretyvat
  //
  if (i.drlsuretyvat ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"drlsuretyvat",
        e));

    a << *i.drlsuretyvat ();
  }

  // hrlsurety
  //
  if (i.hrlsurety ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"hrlsurety",
        e));

    a << *i.hrlsurety ();
  }

  // hrlsuretyvat
  //
  if (i.hrlsuretyvat ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"hrlsuretyvat",
        e));

    a << *i.hrlsuretyvat ();
  }

  // skontonto
  //
  if (i.skontonto ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"skontonto",
        e));

    a << *i.skontonto ();
  }

  // anwbtrnto
  //
  if (i.anwbtrnto ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"anwbtrnto",
        e));

    a << *i.anwbtrnto ();
  }

  // anwskonto
  //
  if (i.anwskonto ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"anwskonto",
        e));

    a << *i.anwskonto ();
  }

  // anwbtr
  //
  if (i.anwbtr ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"anwbtr",
        e));

    a << *i.anwbtr ();
  }

  // anwskobtr
  //
  if (i.anwskobtr ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"anwskobtr",
        e));

    a << *i.anwskobtr ();
  }

  // skontobto
  //
  if (i.skontobto ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"skontobto",
        e));

    a << *i.skontobto ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_payment& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // invoicekey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"invoicekey",
        e));

    a << i.invoicekey ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // partcode
  //
  if (i.partcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"partcode",
        e));

    a << *i.partcode ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // number
  //
  if (i.number ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"number",
        e));

    a << *i.number ();
  }

  // external
  //
  if (i.external ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"external",
        e));

    a << *i.external ();
  }

  // extern1
  //
  if (i.extern1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern1",
        e));

    a << *i.extern1 ();
  }

  // extern2
  //
  if (i.extern2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern2",
        e));

    a << *i.extern2 ();
  }

  // extern3
  //
  if (i.extern3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern3",
        e));

    a << *i.extern3 ();
  }

  // payment
  //
  if (i.payment ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"payment",
        e));

    a << *i.payment ();
  }

  // paymentvat
  //
  if (i.paymentvat ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"paymentvat",
        e));

    a << *i.paymentvat ();
  }

  // paymentdate
  //
  if (i.paymentdate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"paymentdate",
        e));

    a << *i.paymentdate ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const ava_unit& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // code
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"code",
        e));

    a << i.code ();
  }

  // normcode
  //
  if (i.normcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"normcode",
        e));

    a << *i.normcode ();
  }

  // unit
  //
  if (i.unit ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"unit",
        e));

    a << *i.unit ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const ava_order& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // ava.orderpos
  //
  if (i.ava_orderpos ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"ava.orderpos",
        e));

    s << *i.ava_orderpos ();
  }

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // projectkey
  //
  if (i.projectkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"projectkey",
        e));

    a << *i.projectkey ();
  }

  // bkmorderid
  //
  if (i.bkmorderid ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"bkmorderid",
        e));

    a << *i.bkmorderid ();
  }

  // bkmorderkey
  //
  if (i.bkmorderkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"bkmorderkey",
        e));

    a << *i.bkmorderkey ();
  }

  // masterkey
  //
  if (i.masterkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"masterkey",
        e));

    a << *i.masterkey ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // normcode
  //
  if (i.normcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"normcode",
        e));

    a << *i.normcode ();
  }

  // number
  //
  if (i.number ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"number",
        e));

    a << *i.number ();
  }

  // order
  //
  if (i.order ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"order",
        e));

    a << *i.order ();
  }

  // wage
  //
  if (i.wage ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"wage",
        e));

    a << *i.wage ();
  }

  // other
  //
  if (i.other ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"other",
        e));

    a << *i.other ();
  }

  // posprice
  //
  if (i.posprice ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"posprice",
        e));

    a << *i.posprice ();
  }

  // limitdate
  //
  if (i.limitdate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"limitdate",
        e));

    a << *i.limitdate ();
  }

  // indexdate
  //
  if (i.indexdate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"indexdate",
        e));

    a << *i.indexdate ();
  }

  // discountprz
  //
  if (i.discountprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"discountprz",
        e));

    a << *i.discountprz ();
  }

  // skontoprz
  //
  if (i.skontoprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"skontoprz",
        e));

    a << *i.skontoprz ();
  }

  // vatprz
  //
  if (i.vatprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vatprz",
        e));

    a << *i.vatprz ();
  }

  // statuscode
  //
  if (i.statuscode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statuscode",
        e));

    a << *i.statuscode ();
  }

  // statusname
  //
  if (i.statusname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statusname",
        e));

    a << *i.statusname ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const ava_orderpos& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // poscode
  //
  if (i.poscode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"poscode",
        e));

    a << *i.poscode ();
  }

  // itemnumber
  //
  if (i.itemnumber ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"itemnumber",
        e));

    a << *i.itemnumber ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // keyword
  //
  if (i.keyword ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"keyword",
        e));

    a << *i.keyword ();
  }

  // unitcode
  //
  if (i.unitcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"unitcode",
        e));

    a << *i.unitcode ();
  }

  // unitkey
  //
  if (i.unitkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"unitkey",
        e));

    a << *i.unitkey ();
  }

  // groupcode
  //
  if (i.groupcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"groupcode",
        e));

    a << *i.groupcode ();
  }

  // text
  //
  if (i.text ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"text",
        e));

    a << *i.text ();
  }

  // comment
  //
  if (i.comment ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"comment",
        e));

    a << *i.comment ();
  }

  // wage
  //
  if (i.wage ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"wage",
        e));

    a << *i.wage ();
  }

  // other
  //
  if (i.other ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"other",
        e));

    a << *i.other ();
  }

  // quantity
  //
  if (i.quantity ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"quantity",
        e));

    a << *i.quantity ();
  }

  // unitprice
  //
  if (i.unitprice ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"unitprice",
        e));

    a << *i.unitprice ();
  }

  // posprice
  //
  if (i.posprice ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"posprice",
        e));

    a << *i.posprice ();
  }

  // discountprz
  //
  if (i.discountprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"discountprz",
        e));

    a << *i.discountprz ();
  }

  // vatprz
  //
  if (i.vatprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vatprz",
        e));

    a << *i.vatprz ();
  }

  // statuscode
  //
  if (i.statuscode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statuscode",
        e));

    a << *i.statuscode ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_document& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // scope
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"scope",
        e));

    a << i.scope ();
  }

  // scopekey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"scopekey",
        e));

    a << i.scopekey ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // name
  //
  if (i.name ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"name",
        e));

    a << *i.name ();
  }

  // extension
  //
  if (i.extension ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extension",
        e));

    a << *i.extension ();
  }

  // zipformat
  //
  if (i.zipformat ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"zipformat",
        e));

    a << *i.zipformat ();
  }

  // link
  //
  if (i.link ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"link",
        e));

    a << *i.link ();
  }

  // data
  //
  if (i.data ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"data",
        e));

    a << *i.data ();
  }

  // filename
  //
  if (i.filename ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"filename",
        e));

    a << *i.filename ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }

  // viewertype
  //
  if (i.viewertype ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"viewertype",
        e));

    a << *i.viewertype ();
  }

  // main
  //
  if (i.main ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"main",
        e));

    a << *i.main ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const bkm_keyvalue& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // bkm.contact
  //
  if (i.bkm_contact ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.contact",
        e));

    s << *i.bkm_contact ();
  }

  // bkm.counterpart
  //
  if (i.bkm_counterpart ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.counterpart",
        e));

    s << *i.bkm_counterpart ();
  }

  // bkm.user
  //
  if (i.bkm_user ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.user",
        e));

    s << *i.bkm_user ();
  }

  // bkm.range
  //
  if (i.bkm_range ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.range",
        e));

    s << *i.bkm_range ();
  }

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // scope
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"scope",
        e));

    a << i.scope ();
  }

  // scopekey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"scopekey",
        e));

    a << i.scopekey ();
  }

  // valuetypekey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"valuetypekey",
        e));

    a << i.valuetypekey ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // code
  //
  if (i.code ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"code",
        e));

    a << *i.code ();
  }

  // name
  //
  if (i.name ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"name",
        e));

    a << *i.name ();
  }

  // value
  //
  if (i.value ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"value",
        e));

    a << *i.value ();
  }

  // valuekey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"valuekey",
        e));

    a << i.valuekey ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const ret_order& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // projectkey
  //
  if (i.projectkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"projectkey",
        e));

    a << *i.projectkey ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // partcode
  //
  if (i.partcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"partcode",
        e));

    a << *i.partcode ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // customerkey
  //
  if (i.customerkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"customerkey",
        e));

    a << *i.customerkey ();
  }

  // customerkeyid
  //
  if (i.customerkeyid ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"customerkeyid",
        e));

    a << *i.customerkeyid ();
  }

  // customercode
  //
  if (i.customercode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"customercode",
        e));

    a << *i.customercode ();
  }

  // customername
  //
  if (i.customername ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"customername",
        e));

    a << *i.customername ();
  }

  // customercounterpartkey
  //
  if (i.customercounterpartkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"customercounterpartkey",
        e));

    a << *i.customercounterpartkey ();
  }

  // number
  //
  if (i.number ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"number",
        e));

    a << *i.number ();
  }

  // order
  //
  if (i.order ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"order",
        e));

    a << *i.order ();
  }

  // contract
  //
  if (i.contract ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"contract",
        e));

    a << *i.contract ();
  }

  // extern1
  //
  if (i.extern1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern1",
        e));

    a << *i.extern1 ();
  }

  // extern2
  //
  if (i.extern2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern2",
        e));

    a << *i.extern2 ();
  }

  // extern3
  //
  if (i.extern3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern3",
        e));

    a << *i.extern3 ();
  }

  // currency
  //
  if (i.currency ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"currency",
        e));

    a << *i.currency ();
  }

  // exchange
  //
  if (i.exchange ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"exchange",
        e));

    a << *i.exchange ();
  }

  // budget
  //
  if (i.budget ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"budget",
        e));

    a << *i.budget ();
  }

  // budgetvat
  //
  if (i.budgetvat ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"budgetvat",
        e));

    a << *i.budgetvat ();
  }

  // rental
  //
  if (i.rental ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"rental",
        e));

    a << *i.rental ();
  }

  // rentalvat
  //
  if (i.rentalvat ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"rentalvat",
        e));

    a << *i.rentalvat ();
  }

  // vatprz
  //
  if (i.vatprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vatprz",
        e));

    a << *i.vatprz ();
  }

  // statuscode
  //
  if (i.statuscode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statuscode",
        e));

    a << *i.statuscode ();
  }

  // statusname
  //
  if (i.statusname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statusname",
        e));

    a << *i.statusname ();
  }

  // groupcode
  //
  if (i.groupcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"groupcode",
        e));

    a << *i.groupcode ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const ret_invoice& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // bkm.keyvalue
  //
  for (ret_invoice::bkm_keyvalue_const_iterator
       b (i.bkm_keyvalue ().begin ()), n (i.bkm_keyvalue ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        L"bkm.keyvalue",
        e));

    s << *b;
  }

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"id",
        e));

    a << *i.id ();
  }

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // matchfield
  //
  if (i.matchfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"matchfield",
        e));

    a << *i.matchfield ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // projectkey
  //
  if (i.projectkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"projectkey",
        e));

    a << *i.projectkey ();
  }

  // orderkey
  //
  if (i.orderkey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"orderkey",
        e));

    a << *i.orderkey ();
  }

  // external
  //
  if (i.external ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"external",
        e));

    a << *i.external ();
  }

  // calculation
  //
  if (i.calculation ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"calculation",
        e));

    a << *i.calculation ();
  }

  // typecode
  //
  if (i.typecode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"typecode",
        e));

    a << *i.typecode ();
  }

  // typecount
  //
  if (i.typecount ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"typecount",
        e));

    a << *i.typecount ();
  }

  // number
  //
  if (i.number ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"number",
        e));

    a << *i.number ();
  }

  // name
  //
  if (i.name ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"name",
        e));

    a << *i.name ();
  }

  // invoicedate
  //
  if (i.invoicedate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"invoicedate",
        e));

    a << *i.invoicedate ();
  }

  // invoicevat
  //
  if (i.invoicevat ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"invoicevat",
        e));

    a << *i.invoicevat ();
  }

  // targetdate
  //
  if (i.targetdate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"targetdate",
        e));

    a << *i.targetdate ();
  }

  // payment
  //
  if (i.payment ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"payment",
        e));

    a << *i.payment ();
  }

  // paymentdate
  //
  if (i.paymentdate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"paymentdate",
        e));

    a << *i.paymentdate ();
  }

  // paymentvat
  //
  if (i.paymentvat ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"paymentvat",
        e));

    a << *i.paymentvat ();
  }

  // extern1
  //
  if (i.extern1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern1",
        e));

    a << *i.extern1 ();
  }

  // extern2
  //
  if (i.extern2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern2",
        e));

    a << *i.extern2 ();
  }

  // extern3
  //
  if (i.extern3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern3",
        e));

    a << *i.extern3 ();
  }

  // lstgyear
  //
  if (i.lstgyear ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"lstgyear",
        e));

    a << *i.lstgyear ();
  }

  // barcode
  //
  if (i.barcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"barcode",
        e));

    a << *i.barcode ();
  }

  // statuscode
  //
  if (i.statuscode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statuscode",
        e));

    a << *i.statuscode ();
  }

  // statusname
  //
  if (i.statusname ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statusname",
        e));

    a << *i.statusname ();
  }

  // deducted
  //
  if (i.deducted ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"deducted",
        e));

    a << *i.deducted ();
  }

  // deductedvat
  //
  if (i.deductedvat ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"deductedvat",
        e));

    a << *i.deductedvat ();
  }

  // totalnto
  //
  if (i.totalnto ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"totalnto",
        e));

    a << *i.totalnto ();
  }

  // totalvat
  //
  if (i.totalvat ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"totalvat",
        e));

    a << *i.totalvat ();
  }

  // vatprz
  //
  if (i.vatprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"vatprz",
        e));

    a << *i.vatprz ();
  }

  // rateprz
  //
  if (i.rateprz ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"rateprz",
        e));

    a << *i.rateprz ();
  }

  // currency
  //
  if (i.currency ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"currency",
        e));

    a << *i.currency ();
  }

  // exchange
  //
  if (i.exchange ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"exchange",
        e));

    a << *i.exchange ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }

  // skontoperiod
  //
  if (i.skontoperiod ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"skontoperiod",
        e));

    a << *i.skontoperiod ();
  }

  // checkperiod
  //
  if (i.checkperiod ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"checkperiod",
        e));

    a << *i.checkperiod ();
  }

  // documentdate
  //
  if (i.documentdate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"documentdate",
        e));

    a << *i.documentdate ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const ret_payment& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // externalkey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"externalkey",
        e));

    a << i.externalkey ();
  }

  // invoicekey
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"invoicekey",
        e));

    a << i.invoicekey ();
  }

  // controlcode
  //
  if (i.controlcode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"controlcode",
        e));

    a << *i.controlcode ();
  }

  // number
  //
  if (i.number ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"number",
        e));

    a << *i.number ();
  }

  // external
  //
  if (i.external ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"external",
        e));

    a << *i.external ();
  }

  // extern1
  //
  if (i.extern1 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern1",
        e));

    a << *i.extern1 ();
  }

  // extern2
  //
  if (i.extern2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern2",
        e));

    a << *i.extern2 ();
  }

  // extern3
  //
  if (i.extern3 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"extern3",
        e));

    a << *i.extern3 ();
  }

  // statuscode
  //
  if (i.statuscode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"statuscode",
        e));

    a << *i.statuscode ();
  }

  // payment
  //
  if (i.payment ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"payment",
        e));

    a << *i.payment ();
  }

  // paymentvat
  //
  if (i.paymentvat ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"paymentvat",
        e));

    a << *i.paymentvat ();
  }

  // paymentdate
  //
  if (i.paymentdate ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"paymentdate",
        e));

    a << *i.paymentdate ();
  }

  // currency
  //
  if (i.currency ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"currency",
        e));

    a << *i.currency ();
  }

  // exchange
  //
  if (i.exchange ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"exchange",
        e));

    a << *i.exchange ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"desc",
        e));

    a << *i.desc ();
  }

  // note
  //
  if (i.note ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"note",
        e));

    a << *i.note ();
  }

  // remark
  //
  if (i.remark ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        L"remark",
        e));

    a << *i.remark ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

